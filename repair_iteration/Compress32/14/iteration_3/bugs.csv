bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
2	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
3	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
4	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
5	[BUG]  [BUGGY]  Integer  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Integer  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Integer  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
6	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
7	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
8	[BUG]  [BUGGY]  long  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
9	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
10	[BUG]  [BUGGY]  int  currEntrySize  =  getRecordSize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getRecordSize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getRecordSize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
11	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize()  +  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize()  +  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize()  +  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
12	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize()  -  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize()  -  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize()  -  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
13	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >=  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >=  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >=  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
14	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
15	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
16	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
17	[BUG]  [BUGGY]  Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
18	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
19	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
20	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  return(int)(available()  *  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available()  *  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available()  *  entryOffset);	  return(int)(available()    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
29	[BUG]  [BUGGY]  return(long)(available()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(available()  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(available()  -  entryOffset);	  return(int)(available()    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
30	[BUG]  [BUGGY]  return(int)(available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available()  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available()  -  entrySize);	  return(int)(available()    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
31	[BUG]  [BUGGY]  return(int)(this.blockSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(this.blockSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(this.blockSize  -  entryOffset);	  return(int)(available()    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
32	[BUG]  [BUGGY]  return(int)(available()  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available()  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available()  +  entryOffset);	  return(int)(available()    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
33	[BUG]  [BUGGY]  return(int)(entrySize,  entryOffset  -  recordSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  entryOffset  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  entryOffset  -  recordSize);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  return(int)(entrySize,  recordSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  recordSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  recordSize  -  entryOffset);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  return(int)(entryOffset,  recordSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset,  recordSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset,  recordSize  -  entryOffset);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  return(int)(entrySize  -  1,  entryOffset  -  recordSize);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  1,  entryOffset  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  1,  entryOffset  -  recordSize);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  return(int)(blockSize,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize,  entryOffset  -  entryOffset);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  return(long)(entrySize,  entryOffset  -  recordSize);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize,  entryOffset  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize,  entryOffset  -  recordSize);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  return(int)(entrySize  -  available);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  available);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  available);	  return(int)(available    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
40	[BUG]  [BUGGY]  return(int)(entrySize,  entryOffset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  entryOffset  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  entryOffset  +  entryOffset);	  return(int)(entrySize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
41	[BUG]  [BUGGY]  return(int)(entrySize,  entryOffset  -  blockSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  entryOffset  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  entryOffset  -  blockSize);	  return(int)(entrySize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  return(int)(entrySize,  entryOffset  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  entryOffset  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  entryOffset  -  entryOffset  +  1);	  return(int)(entrySize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  return(int)(entryOffset,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset,  entrySize  -  entryOffset);	  return(int)(entrySize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  return(int)(entrySize  -  1,  entryOffset  -  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  1,  entryOffset  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  1,  entryOffset  -  1);	  return(int)(entrySize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  return(int)(entrySize  -  recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  recordSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  recordSize  +  1);	  return(int)(recordSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  int  recordSize  =(int)(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  recordSize  =(int)(entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  recordSize  =(int)(entrySize  -  entryOffset  +  1);	  return(int)(recordSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
47	[BUG]  [BUGGY]  return(int)(entryOffset  -  recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  recordSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  recordSize  +  1);	  return(int)(recordSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
48	[BUG]  [BUGGY]  return(byte)(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(entrySize  -  entryOffset  +  1);	  return(int)(recordSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
49	[BUG]  [BUGGY]  return(long)(blockSize  -  recordSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(blockSize  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(blockSize  -  recordSize);	  return(int)(blockSize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
50	[BUG]  [BUGGY]  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Integer.MAX_VALUE;	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
51	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
52	[BUG]  [BUGGY]  if(entrySize  <  =  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
53	[BUG]  [BUGGY]  int  entrySize  =  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =  SMALL_BUFFER_SIZE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entrySize  =  SMALL_BUFFER_SIZE;	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
54	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =  getEntrySize();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entrySize  =  getEntrySize();	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
55	[BUG]  [BUGGY]  int  entrySize  =  SMALL_BUFFER_SIZE  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =  SMALL_BUFFER_SIZE  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entrySize  =  SMALL_BUFFER_SIZE  +  entryOffset;	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
56	[BUG]  [BUGGY]  int  return(int)(entrySize  -  recordSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  return(int)(entrySize  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  return(int)(entrySize  -  recordSize);	  return(long)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
57	[BUG]  [BUGGY]  return(byte)(entrySize  -  recordSize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(entrySize  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(entrySize  -  recordSize);	  return(long)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
58	[BUG]  [BUGGY]  return(int)(entrySize  -  checkSize);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  checkSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  checkSize);	  return(long)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
59	[BUG]  [BUGGY]  return(short)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(short)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(short)(entrySize  -  entryOffset);	  return(byte)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
60	[BUG]  [BUGGY]  return(byte)(recordSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(recordSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(recordSize  -  entryOffset);	  return(byte)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
61	[BUG]  [BUGGY]  return(char)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(char)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(char)(entrySize  -  entryOffset);	  return(byte)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
62	[BUG]  [BUGGY]  return(int)(entrySize  /  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  blockSize  +  1);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  return(long)(entrySize  /  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  /  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  /  entryOffset  +  1);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
64	[BUG]  [BUGGY]  return(int)(entrySize  /  entryOffset  +  2);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  entryOffset  +  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  entryOffset  +  2);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
65	[BUG]  [BUGGY]  return(int)(entrySize  /  recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  recordSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  recordSize  +  1);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
66	[BUG]  [BUGGY]  return(int)(recordSize  /  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  /  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  /  entryOffset  +  1);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
68	[BUG]  [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
69	[BUG]  [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
70	[BUG]  [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
71	[BUG]  [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
72	[BUG]  [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
73	[BUG]  [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(curr  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(curr  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(curr	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
74	[BUG]  [BUGGY]  return(int)(entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  entryOffset);	  return(int)(entryOffset    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
75	[BUG]  [BUGGY]  return(long)(entryOffset  -  blockSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entryOffset  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entryOffset  -  blockSize);	  return(int)(entryOffset    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
76	[BUG]  [BUGGY]  return(int)(recordSize,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize,  entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize,  entryOffset  -  entrySize);	  return(int)(0,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
77	[BUG]  [BUGGY]  return(int)(0,  entryOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entryOffset  +  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entryOffset  +  entrySize);	  return(int)(0,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
78	[BUG]  [BUGGY]  return(int)(0,  entryOffset  -  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entryOffset  -  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entryOffset  -  entrySize  +  1);	  return(int)(0,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
79	[BUG]  [BUGGY]  return(int)(entrySize  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  entryOffset);	  return(int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
80	[BUG]  [BUGGY]  return(int)(entrySize  *  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  SMALL_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  SMALL_BUFFER_SIZE);	  return(int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
81	[BUG]  [BUGGY]  return(int)(entrySize  *  blockSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  blockSize);	  return(int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
82	[BUG]  [BUGGY]  return(int)(recordSize  *  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  *  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  *  entryOffset);	  return(int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
83	[BUG]  [BUGGY]  return(int)(entryOffset  *  entrySize);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  *  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  *  entrySize);	  return(int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
84	[BUG]  [BUGGY]  return(int)(blockSize  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  /  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  /  entryOffset);	  return(int)(entrySize    /    recordSize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
85	[BUG]  [BUGGY]  return(int)(entryOffset  /  recordSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  /  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  /  recordSize);	  return(int)(entrySize    /    recordSize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
86	[BUG]  [BUGGY]  return(long)(entrySize  /  recordSize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  /  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  /  recordSize);	  return(int)(entrySize    /    recordSize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
87	[BUG]  [BUGGY]  return(int)(entryOffset  -  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  entrySize  +  1);	  return(int)(entrySize    -    blockSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
88	[BUG]  [BUGGY]  return(int)(entryOffset  -  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  blockSize  +  1);	  return(int)(entrySize    -    blockSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  SMALL_BUFFER_SIZE;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  SMALL_BUFFER_SIZE;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  SMALL_BUFFER_SIZE;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
95	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
97	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
98	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
100	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
101	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
102	[BUG]  [BUGGY]  return(int)(0L,  entrySize  -  blockSize);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L,  entrySize  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entrySize  -  blockSize);	  return(int)(0L,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  return(int)(0L,  entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L,  entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entrySize  -  entryOffset  +  1);	  return(int)(0L,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
104	[BUG]  [BUGGY]  return(int)(recordSize,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize,  entrySize  -  entryOffset);	  return(int)(0L,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
105	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
106	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
107	[BUG]  [BUGGY]  Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
108	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
109	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
110	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
111	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
112	[BUG]  [BUGGY]  int  return(int)(entrySize  -  blockSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  return(int)(entrySize  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  return(int)(entrySize  -  blockSize);	  return(long)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
113	[BUG]  [BUGGY]  return(byte)(entrySize  -  blockSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(entrySize  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(entrySize  -  blockSize);	  return(long)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
122	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
123	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
124	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
126	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
127	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
128	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
129	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
130	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
131	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
132	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
133	[BUG]  [BUGGY]  Integer  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Integer  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Integer  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
134	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Entry  <  K,  V>  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Entry  <  K,  V>  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
135	[BUG]  [BUGGY]  long  blockSize  =(long)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  blockSize  =(long)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  blockSize  =(long)(entrySize  -  entryOffset);	  int    blockSize    =(int)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
136	[BUG]  [BUGGY]  int  blockSize  =(int)(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  blockSize  =(int)(entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =(int)(entrySize  -  entryOffset  +  1);	  int    blockSize    =(int)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
137	[BUG]  [BUGGY]  int  blockSize  =(int)(entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  blockSize  =(int)(entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =(int)(entryOffset  -  entrySize);	  int    blockSize    =(int)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
138	[BUG]  [BUGGY]  int  blockSize  =(int)(entrySize  -  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  blockSize  =(int)(entrySize  -  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =(int)(entrySize  -  entryOffset,  hasHitEOF);	  int    blockSize    =(int)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
139	[BUG]  [BUGGY]  int  blockSize  =(int)(recordSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  blockSize  =(int)(recordSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =(int)(recordSize  -  entryOffset);	  int    blockSize    =(int)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
140	[BUG]  [BUGGY]  int  blockSize  =(int)(entrySize  *  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  blockSize  =(int)(entrySize  *  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =(int)(entrySize  *  entryOffset);	  int    blockSize    =(int)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
141	[BUG]  [BUGGY]  return(String)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(String)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(String)(entrySize  -  entryOffset);	  return(char)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
142	[BUG]  [BUGGY]  return(String)(entrySize  -  blockSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(String)(entrySize  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(String)(entrySize  -  blockSize);	  return(char)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
150	[BUG]  [BUGGY]  return(int)(entrySize  -  length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  length);	  return(int)(length    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
151	[BUG]  [BUGGY]  return(long)(entrySize  -  length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  -  length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  -  length);	  return(int)(length    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
152	[BUG]  [BUGGY]  return(int)(entrySize  -  entryLimit);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryLimit);	  return(int)(length    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
153	[BUG]  [BUGGY]  return(int)(entrySize  *  SMALL_BUFFER_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  SMALL_BUFFER_SIZE  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  SMALL_BUFFER_SIZE  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
154	[BUG]  [BUGGY]  return(int)(entrySize  *  recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  recordSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  recordSize  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
155	[BUG]  [BUGGY]  return(int)(entrySize  *  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  blockSize  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
156	[BUG]  [BUGGY]  return(int)(entrySize  *  length  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  length  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  length  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
157	[BUG]  [BUGGY]  return(long)(entrySize  *  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  *  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  *  entryOffset  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
158	[BUG]  [BUGGY]  return(int)(entrySize  -  blockOffset  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  blockOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  blockOffset  +  1);	  return(int)(blockSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
159	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  1;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
160	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  2;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  2;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
161	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  2)+  1;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  2)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  2)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
162	[BUG]  [BUGGY]  return(long)(entrySize  -  entryOffset  +  1)+  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  -  entryOffset  +  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  -  entryOffset  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
163	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1L;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  1L;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
164	[BUG]  [BUGGY]  return(int)(entryOffset  -  entrySize  +  1)+  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  entrySize  +  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  entrySize  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
165	[BUG]  [BUGGY]  long  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
166	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
167	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize()  -  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize()  -  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize()  -  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
168	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize()  +  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize()  +  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize()  +  entryOffset;  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
169	[BUG]  [BUGGY]  int  currEntrySize  =  getRecordSize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getRecordSize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getRecordSize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
170	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(entrySize  >  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(entrySize  >  entryOffset)  {  return  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize();  if(entrySize  >  entryOffset)  {  return  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
171	[BUG]  [BUGGY]  return(int)(0L,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entryOffset  -  entryOffset);	  return(int)(0L,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
172	[BUG]  [BUGGY]  return(int)(0L,  entryOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L,  entryOffset  +  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entryOffset  +  entrySize);	  return(int)(0L,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
173	[BUG]  [BUGGY]  return(int)(0L,  entryOffset  -  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L,  entryOffset  -  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entryOffset  -  entrySize  +  1);	  return(int)(0L,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
174	[BUG]  [BUGGY]  int  entrySize  =(int)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =(int)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entrySize  =(int)(entrySize  -  entryOffset);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
175	[BUG]  [BUGGY]  return  entryOffset(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  entryOffset(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return  entryOffset(entrySize  -  entryOffset);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
176	[BUG]  [BUGGY]  int  return(int)(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  return(int)(entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  return(int)(entrySize  -  entryOffset  +  1);	  return(long)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
177	[BUG]  [BUGGY]  int  entrySize  =(int)(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =(int)(entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entrySize  =(int)(entrySize  -  entryOffset  +  1);	  return(long)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
178	[BUG]  [BUGGY]  return(Integer)(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(Integer)(entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(Integer)(entrySize  -  entryOffset  +  1);	  return(long)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
179	[BUG]  [BUGGY]  recordSize(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  recordSize(entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	recordSize(entrySize  -  entryOffset  +  1);	  return(long)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
180	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
181	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
183	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
184	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
185	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
186	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
187	[BUG]  [BUGGY]  return(int)(blockSize  *  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  *  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  *  entryOffset);	  return(int)(entrySize    *    recordSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
188	[BUG]  [BUGGY]  return(int)(entryOffset  *  recordSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  *  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  *  recordSize);	  return(int)(entrySize    *    recordSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
189	[BUG]  [BUGGY]  return(int)(blockSize  *  recordSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  *  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  *  recordSize);	  return(int)(entrySize    *    recordSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
190	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  4);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  4);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  4);	  return(int)(entrySize    -    entryOffset    +    2);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
191	[BUG]  [BUGGY]  return(long)(entrySize  -  entryOffset  +  2);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  -  entryOffset  +  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  -  entryOffset  +  2);	  return(int)(entrySize    -    entryOffset    +    2);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
192	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  3);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  3);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  3);	  return(int)(entrySize    -    entryOffset    +    2);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
193	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  *  2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  *  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  *  2);	  return(int)(entrySize    -    entryOffset    +    2);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
194	[BUG]  [BUGGY]  return(int)(256,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(256,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(256,  entrySize  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
195	[BUG]  [BUGGY]  return(int)(256,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(256,  entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(256,  entryOffset  -  entrySize);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
196	[BUG]  [BUGGY]  int  entrySize  =(int)(256,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =(int)(256,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entrySize  =(int)(256,  entryOffset  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
197	[BUG]  [BUGGY]  return(byte)(256,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(256,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(256,  entryOffset  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
198	[BUG]  [BUGGY]  return(int)(255,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(255,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(255,  entrySize  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
199	[BUG]  [BUGGY]  return(long)(256,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(256,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(256,  entryOffset  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
200	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
201	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
202	[BUG]  [BUGGY]  Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Integer  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
203	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
204	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
205	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	Entry  <  K,  V>  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
206	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
207	[BUG]  [BUGGY]  return(long)(recordSize  -  blockSize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(recordSize  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(recordSize  -  blockSize);	  return(int)(recordSize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
208	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset,  hasHitEOF);	  return(int)(EntrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
209	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset,  blockSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset,  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset,  blockSize);	  return(int)(EntrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
210	[BUG]  [BUGGY]  return(long)(entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entryOffset  -  entryOffset);	  return(int)(entryOffset    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
211	[BUG]  [BUGGY]  return(int)(entryOffset  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  entryOffset  +  1);	  return(int)(entryOffset    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  cur  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  cur  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  cur	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
219	[BUG]  [BUGGY]  return(int)(1L,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(1L,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(1L,  entrySize  -  entryOffset);	  return(int)(1L,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
220	[BUG]  [BUGGY]  return(byte)(entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(entryOffset  -  entrySize);	  return(byte)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
221	[BUG]  [BUGGY]  return(byte)(entrySize  -  entryOffset,  blockSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(entrySize  -  entryOffset,  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(entrySize  -  entryOffset,  blockSize);	  return(byte)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
222	[BUG]  [BUGGY]  return(byte)(entrySize  -  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(entrySize  -  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(entrySize  -  entryOffset,  hasHitEOF);	  return(byte)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
223	[BUG]  [BUGGY]  return(int)(0,  entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entrySize  -  entryOffset  +  1);	  return(int)(0,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
224	[BUG]  [BUGGY]  return(int)(0,  entrySize  -  blockSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entrySize  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entrySize  -  blockSize);	  return(int)(0,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
225	[BUG]  [BUGGY]  return(int)(this.blockSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(this.blockSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(this.blockSize  -  entrySize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
226	[BUG]  [BUGGY]  return(long)(entrySize  -  this.blockSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  -  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  -  this.blockSize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
227	[BUG]  [BUGGY]  return(int)(entryOffset  -  this.blockSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  this.blockSize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
228	[BUG]  [BUGGY]  return(int)(recordSize  -  this.blockSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  -  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  -  this.blockSize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
229	[BUG]  [BUGGY]  return(byte)(entrySize  -  this.blockSize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(entrySize  -  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(entrySize  -  this.blockSize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
230	[BUG]  [BUGGY]  return(long)(entrySize  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  /  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  /  entryOffset);	  return(int)(available    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
231	[BUG]  [BUGGY]  return(int)(entrySize  /  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  this.entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  this.entryOffset);	  return(int)(available    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
232	[BUG]  [BUGGY]  return(int)(recordSize  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  /  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  /  entryOffset);	  return(int)(available    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
233	[BUG]  [BUGGY]  return(int)(entrySize  /  EntryOffset);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  EntryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  EntryOffset);	  return(int)(available    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
234	[BUG]  [BUGGY]  return(int)(entrySize  /  this.blockSize);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  this.blockSize);	  return(int)(available    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
235	[BUG]  [BUGGY]  return(int)(blockSize  /  entrySize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  /  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  /  entrySize);	  return(int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
236	[BUG]  [BUGGY]  return(int)(entryOffset  /  blockSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  /  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  /  blockSize);	  return(int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
237	[BUG]  [BUGGY]  return(long)(entrySize  /  blockSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  /  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  /  blockSize);	  return(int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
238	[BUG]  [BUGGY]  return(int)(entrySize  *  this.blockSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  this.blockSize);	  return(int)(available    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
239	[BUG]  [BUGGY]  return(long)(entrySize  *  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  *  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  *  entryOffset);	  return(int)(available    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
240	[BUG]  [BUGGY]  return(int)(entrySize  *  EntryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  EntryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  EntryOffset);	  return(int)(available    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
241	[BUG]  [BUGGY]  return(int)(entrySize  *  fileLength);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  fileLength);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  fileLength);	  return(int)(available    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
242	[BUG]  [BUGGY]  return(int)(entrySize,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  entrySize  -  entryOffset);	  return(int)(available,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
243	[BUG]  [BUGGY]  return(int)(entrySize,  available  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  available  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  available  -  entryOffset);	  return(int)(available,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
244	[BUG]  [BUGGY]  return(int)(entrySize,  this.blockSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  this.blockSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  this.blockSize  -  entryOffset);	  return(int)(available,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
246	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
247	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEnt  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
248	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
249	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
250	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
253	[BUG]  [BUGGY]  int  blockSize  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  blockSize  =  currEntry.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =  currEntry.length;	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
254	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
255	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getKey();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
260	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
261	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
263	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
264	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(curr  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(curr  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(curr	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
265	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
266	[BUG]  [BUGGY]  return  (int)(entryOffset  -  fileSize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entryOffset  -  fileSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return  (int)(entryOffset  -  fileSize);	  return    (int)(entrySize    -    fileSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
267	[BUG]  [BUGGY]  return  (int)(entrySize  /  fileSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  /  fileSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return  (int)(entrySize  /  fileSize);	  return    (int)(entrySize    -    fileSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
268	[BUG]  [BUGGY]  return(int)(entrySize  -  currentOffset);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  currentOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  currentOffset);	  return(int)(currentSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
269	[BUG]  [BUGGY]  return(int)(entryOffset  -  currentSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  currentSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  currentSize);	  return(int)(currentSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
270	[BUG]  [BUGGY]  return(byte)(recordSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(recordSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(recordSize  -  entrySize);	  return(int)(recordSize    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
271	[BUG]  [BUGGY]  int  entrySize  =(int)(entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =(int)(entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  entrySize  =(int)(entryOffset  -  entryOffset);	  return(int)(entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
272	[BUG]  [BUGGY]  return(long)(entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entryOffset  -  entrySize);	  return(int)(entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  currEntry.length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
279	[BUG]  [BUGGY]  return(int)(currEntry.available()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(currEntry.available()  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(currEntry.available()  -  entryOffset);	  return(int)(entryOffset    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
280	[BUG]  [BUGGY]  return(int)(currEntry.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(currEntry.available()  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(currEntry.available()  -  entrySize);	  return(int)(entryOffset    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
281	[BUG]  [BUGGY]  return(int)(MAX_VALUE,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(MAX_VALUE,  entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(MAX_VALUE,  entryOffset  -  entrySize);	  return(int)(0,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
282	[BUG]  [BUGGY]  return(int)(0,  entryOffset  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entryOffset  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entryOffset  -  entryOffset  +  1);	  return(int)(0,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
283	[BUG]  [BUGGY]  return(int)(recordSize  /  blockSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  /  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  /  blockSize);	  return(int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
284	[BUG]  [BUGGY]  return(int)(recordSize  /  entrySize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  /  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  /  entrySize);	  return(int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
285	[BUG]  [BUGGY]  return(int)(blockSize  *  entrySize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  *  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  *  entrySize);	  return(int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
286	[BUG]  [BUGGY]  return(int)(1L  +  entryOffset,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(1L  +  entryOffset,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(1L  +  entryOffset,  entrySize  -  entryOffset);	  return(int)(1L,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
287	[BUG]  [BUGGY]  return(int)(MAX_VALUE,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(MAX_VALUE,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(MAX_VALUE,  entryOffset  -  entryOffset);	  return(int)(1L,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
288	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
289	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
290	[BUG]  [BUGGY]  return(int)(recordSize  -  entryOffset  +  1)+  1;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  -  entryOffset  +  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  -  entryOffset  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
291	[BUG]  [BUGGY]  return(int)(entrySize  *  entryOffset  +  1)+  1;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  entryOffset  +  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  entryOffset  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
292	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  *  1)+  1;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  *  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  *  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
293	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
294	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(zipEncoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(zipEncoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
295	[BUG]  [BUGGY]  if(zipEncoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(zipEncoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(zipEncoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
296	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  0)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  0)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
297	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
298	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
299	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
300	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  +  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  +  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  +  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
301	[BUG]  [BUGGY]  int  return(int)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  return(int)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  return(int)(entrySize  -  entryOffset);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
302	[BUG]  [BUGGY]  return  new  int(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  new  int(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return  new  int(entrySize  -  entryOffset);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
303	[BUG]  [BUGGY]  if(entrySize  >  MAX_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  MAX_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  MAX_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
304	[BUG]  [BUGGY]  recordSize  =  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  recordSize  =  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	recordSize  =  Integer.MAX_VALUE;	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
305	[BUG]  [BUGGY]  return(long)(blockSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(blockSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(blockSize  -  entrySize);	  return(long)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
306	[BUG]  [BUGGY]  return(int)(blockSize  /  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  /  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  /  entryOffset  +  1);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
307	[BUG]  [BUGGY]  return(int)(entrySize  /  length  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  length  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  length  +  1);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
312	[BUG]  [BUGGY]  return(int)(256  *  entryOffset,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(256  *  entryOffset,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(256  *  entryOffset,  entrySize  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
313	[BUG]  [BUGGY]  return(int)(256L  +  entryOffset,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(256L  +  entryOffset,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(256L  +  entryOffset,  entrySize  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
314	[BUG]  [BUGGY]  return(int)(256  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(256  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(256  -  entrySize);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
315	[BUG]  [BUGGY]  return(int)(available()  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available()  /  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available()  /  entryOffset);	  return(int)(available()    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
316	[BUG]  [BUGGY]  return(int)(0L  +  entrySize,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L  +  entrySize,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L  +  entrySize,  entryOffset  -  entryOffset);	  return(int)(0L,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
317	[BUG]  [BUGGY]  return(int)(0L  *  entrySize,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L  *  entrySize,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L  *  entrySize,  entryOffset  -  entryOffset);	  return(int)(0L,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
318	[BUG]  [BUGGY]  return(int)(0L  *  entrySize,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L  *  entrySize,  entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L  *  entrySize,  entryOffset  -  entrySize);	  return(int)(0L,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
319	[BUG]  [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    this.blockSize    =    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
322	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
323	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
324	[BUG]  [BUGGY]  return(int)(recordSize  *  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  *  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  *  entryOffset  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
325	[BUG]  [BUGGY]  return(int)(entrySize  *  RecordSize  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  RecordSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  RecordSize  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
326	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
327	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
328	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
329	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEnt  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
330	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
331	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntries.get  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntries.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntries.get	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
332	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
333	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(cur  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(cur  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(cur	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
335	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
336	[BUG]  [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
337	[BUG]  [BUGGY]  return(char)(blockSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(char)(blockSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(char)(blockSize  -  entryOffset);	  return(char)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
338	[BUG]  [BUGGY]  return(String)(blockSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(String)(blockSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(String)(blockSize  -  entrySize);	  return(char)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
339	[BUG]  [BUGGY]  return(int)(length  -  entryOffset);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(length  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(length  -  entryOffset);	  return(int)(entryOffset    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
340	[BUG]  [BUGGY]  int  blockSize  =(int)(entrySize  -  recordSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  blockSize  =(int)(entrySize  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =(int)(entrySize  -  recordSize);	  int    blockSize    =(int)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
341	[BUG]  [BUGGY]  return(int)(0,  entrySize  -  recordSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entrySize  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entrySize  -  recordSize);	  return(int)(recordSize    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
342	[BUG]  [BUGGY]  return(int)(recordSize  *  entrySize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  *  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  *  entrySize);	  return(int)(recordSize    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
343	[BUG]  [BUGGY]  if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
344	[BUG]  [BUGGY]  if(entrySize  <  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
345	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
346	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
347	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
348	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(currEntry  ==  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(currEntry  ==  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
349	[BUG]  [BUGGY]  return(int)(available  *  DateTimeConstants.MILLIS_PER_SIZE);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available  *  DateTimeConstants.MILLIS_PER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available  *  DateTimeConstants.MILLIS_PER_SIZE);	  return(int)(available    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
350	[BUG]  [BUGGY]  return(int)(entrySize  *  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  this.entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  this.entryOffset);	  return(int)(available    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
351	[BUG]  [BUGGY]  return(int)(available  *  DateTimeConstants.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available  *  DateTimeConstants.MAX_VALUE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available  *  DateTimeConstants.MAX_VALUE);	  return(int)(available    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
352	[BUG]  [BUGGY]  return(int)(available  *  entrySize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available  *  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available  *  entrySize);	  return(int)(available    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
353	[BUG]  [BUGGY]  return(int)(available  /  entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available  /  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available  /  entrySize);	  return(int)(available    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
354	[BUG]  [BUGGY]  return(int)(entrySize  -  fileSize  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  fileSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  fileSize  +  1);	  return(int)(recordSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
355	[BUG]  [BUGGY]  return(int)(entrySize,  data.length  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  data.length  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  data.length  -  entryOffset);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
356	[BUG]  [BUGGY]  return(int)(0,  entryOffset  -  recordSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entryOffset  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entryOffset  -  recordSize);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
357	[BUG]  [BUGGY]  return(long)(this.blockSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(this.blockSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(this.blockSize  -  entrySize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
358	[BUG]  [BUGGY]  return(int)(blockSize  -  this.blockSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  -  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  -  this.blockSize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
359	[BUG]  [BUGGY]  return(char)(entrySize  -  this.blockSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(char)(entrySize  -  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(char)(entrySize  -  this.blockSize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
360	[BUG]  [BUGGY]  return(int)(entrySize  -  currentSize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  currentSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  currentSize);	  return(int)(currentSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
361	[BUG]  [BUGGY]  return(int)(fileSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(fileSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(fileSize  -  entrySize);	  return    (int)(entrySize    -    fileSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
364	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
366	[BUG]  [BUGGY]  return(int)(0L,  blockSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L,  blockSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  blockSize  -  entryOffset);	  return(int)(0L,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
367	[BUG]  [BUGGY]  return(int)(0L,  entrySize  -  recordSize);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L,  entrySize  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entrySize  -  recordSize);	  return(int)(0L,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
368	[BUG]  [BUGGY]  return(int)(0L  +  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L  +  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L  +  entrySize  -  entryOffset);	  return(int)(0L,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
369	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
370	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(!hasHitEOF)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(!hasHitEOF)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
371	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
372	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(zipEncoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(zipEncoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
373	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
374	[BUG]  [BUGGY]  return(byte)(available  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(available  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(available  -  entrySize);	  return(byte)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
375	[BUG]  [BUGGY]  return(byte)(available  *  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(available  *  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(available  *  entryOffset);	  return(byte)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
376	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
377	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
378	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
379	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
380	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.!=  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.!=  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.!=	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
381	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
382	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  ==  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  ==  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  ==	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
383	[BUG]  [BUGGY]  return(int)(recordSize  *  blockSize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  *  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  *  blockSize);	  return(int)(recordSize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
384	[BUG]  [BUGGY]  return(int)(blockSize  /  recordSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  /  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  /  recordSize);	  return(int)(entrySize    /    recordSize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
385	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
386	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrentEntrySize();  if(currEntrySize  <  entryOffset)  {  return  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
387	[BUG]  [BUGGY]  return(int)(available,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available,  entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available,  entryOffset  -  entrySize);	  return(int)(available,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
388	[BUG]  [BUGGY]  return(int)(available,  entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(available,  entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available,  entrySize  -  entryOffset  +  1);	  return(int)(available,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
389	[BUG]  [BUGGY]  return(int)(length  *  recordSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(length  *  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(length  *  recordSize);	  return(int)(entrySize    *    recordSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
390	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
391	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
392	[BUG]  [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
393	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
394	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  recordSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
395	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
396	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
397	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
398	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
399	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
400	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.!=  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.!=  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.!=	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
401	[BUG]  [BUGGY]  return(int)(recordSize  -  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  -  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  -  entrySize  +  1);	  return(int)(entrySize    -    blockSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
402	[BUG]  [BUGGY]  return(int)(recordSize  -  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  -  blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  -  blockSize  +  1);	  return(int)(entrySize    -    blockSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
403	[BUG]  [BUGGY]  return(long)(entrySize  -  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  -  blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  -  blockSize  +  1);	  return(int)(entrySize    -    blockSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
404	[BUG]  [BUGGY]  return(int)(entrySize  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entrySize);	  return(int)(length    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
405	[BUG]  [BUGGY]  return(int)(entrySize  *  RecordSize.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  RecordSize.MAX_VALUE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  RecordSize.MAX_VALUE);	  return(int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
406	[BUG]  [BUGGY]  return(int)(entrySize  *  RecordSize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  RecordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  RecordSize);	  return(int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
407	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
408	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
409	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
410	[BUG]  [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
411	[BUG]  [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
412	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
413	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
414	[BUG]  [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
415	[BUG]  [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  i  =  0,  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
416	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
417	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
418	[BUG]  [BUGGY]  return(int)(0,  this.blockSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  this.blockSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  this.blockSize  -  entryOffset);	  return(int)(0,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
419	[BUG]  [BUGGY]  return(int)(recordSize  -  entryOffset  +  2);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  -  entryOffset  +  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  -  entryOffset  +  2);	  return(int)(entrySize    -    entryOffset    +    2);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
420	[BUG]  [BUGGY]  return(byte)(blockSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(blockSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(blockSize  -  entryOffset);	  return(byte)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
421	[BUG]  [BUGGY]  return(long)(available  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(available  /  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(available  /  entryOffset);	  return(int)(available    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
422	[BUG]  [BUGGY]  return(int)(entrySize  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  +  entryOffset);	  return(int)(available    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
423	[BUG]  [BUGGY]  for(int  i  =  0,  blockSize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  blockSize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  blockSize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
424	[BUG]  [BUGGY]  int  i  =  0,  blockSize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  blockSize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  i  =  0,  blockSize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
425	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    int    blockSize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
426	[BUG]  [BUGGY]  return(int)(0,  entryOffset  -  blockSize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entryOffset  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entryOffset  -  blockSize);	  return(int)(entryOffset    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
427	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
428	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
429	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  ==  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  ==  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
430	[BUG]  [BUGGY]  return(int)(entrySize  -  blockSize  +  1)+  1;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  blockSize  +  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  blockSize  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
431	[BUG]  [BUGGY]  if(zipEncoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(zipEncoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(zipEncoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
432	[BUG]  [BUGGY]  if(encoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(encoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(encoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
433	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
434	[BUG]  [BUGGY]  if(encoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(encoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(encoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
435	[BUG]  [BUGGY]  return(int)(512,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(512,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(512,  entrySize  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
436	[BUG]  [BUGGY]  return(int)(28,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(28,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(28,  entrySize  -  entryOffset);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
437	[BUG]  [BUGGY]  return(int)(28,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(28,  entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(28,  entryOffset  -  entrySize);	  return(int)(256,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
438	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  <  =  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
439	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(currEntry  ==  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(currEntry  ==  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
440	[BUG]  [BUGGY]  if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
441	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
442	[BUG]  [BUGGY]  return(int)(entrySize  *  this.blockSize  +  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  this.blockSize  +  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  this.blockSize  +  entryOffset  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
443	[BUG]  [BUGGY]  return(int)(blockSize  *  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  *  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  *  entryOffset  +  1);	  return(int)(entrySize    *    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
444	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset,  recordSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset,  recordSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset,  recordSize  -  entryOffset);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
445	[BUG]  [BUGGY]  return(int)(entrySize,  entryOffset  -  fileSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  entryOffset  -  fileSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  entryOffset  -  fileSize);	  return(int)(recordSize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
446	[BUG]  [BUGGY]  return(byte)(EntrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(byte)(EntrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(EntrySize  -  entryOffset);	  return(byte)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
447	[BUG]  [BUGGY]  return(int)(blockSize,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize,  entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize,  entrySize  -  entryOffset);	  return(int)(available,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
448	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
449	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
450	[BUG]  [BUGGY]  if(encoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(encoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(encoding!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
451	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
452	[BUG]  [BUGGY]  if(encoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(encoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(encoding  ==  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	  if(currEntry!=    null)    {    currEntry    =    getZipEncoding();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
453	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
454	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  recordSize)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
455	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1));  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  1));	  return(int)(blockSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
456	[BUG]  [BUGGY]  return(int)(entrySize  -  blockSize  +  1));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  blockSize  +  1));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  blockSize  +  1));	  return(int)(blockSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
457	[BUG]  [BUGGY]  return(int)(blockSize  *  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  *  SMALL_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  *  SMALL_BUFFER_SIZE);	  return(int)(entrySize    *    recordSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
458	[BUG]  [BUGGY]  int  currEntrySize  =  getEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  currEntrySize  =  getEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	  int    currEntrySize    =    getCurrEntrySize();    if(currEntrySize    >    entryOffset)    {    return    currEntrySize    +    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
459	[BUG]  [BUGGY]  return(int)(0,  blockSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  blockSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  blockSize  -  entryOffset);	  return(int)(0,    entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
460	[BUG]  [BUGGY]  for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
461	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
462	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
463	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEnt	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
464	[BUG]  [BUGGY]  for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entryOffset)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
465	[BUG]  [BUGGY]  long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
466	[BUG]  [BUGGY]  long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
467	[BUG]  [BUGGY]  long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
468	[BUG]  [BUGGY]  long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
469	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
470	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
471	[BUG]  [BUGGY]  int  blockSize  =  getZipEncoding().encode(currEntry.get  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  blockSize  =  getZipEncoding().encode(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =  getZipEncoding().encode(currEntry.get	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
472	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
473	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
474	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEnt  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding().encode(currEntry.get    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
475	[BUG]  [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  1);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
476	[BUG]  [BUGGY]  return(int)(entrySize  /  this.blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  this.blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  this.blockSize  +  1);	  return(int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
477	[BUG]  [BUGGY]  return(int)(lineSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(lineSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(lineSize  -  entryOffset);	  return(int)(entryOffset    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
478	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
479	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
480	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
481	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset,  entryOffset  -  entryOffset);	  return(int)(entrySize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
482	[BUG]  [BUGGY]  return(int)(entrySize,  blockSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize,  blockSize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  blockSize  -  entryOffset);	  return(int)(entrySize,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
483	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >=  entryOffset)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
484	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  ==  entryOffset)  {  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
485	[BUG]  [BUGGY]  if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  0)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  if(currEntry!=    null)    {    currEntry    =    getCurrEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
486	[BUG]  [BUGGY]  return(int)(entrySize  *  fileSize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  fileSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  fileSize);	  return    (int)(entrySize    -    fileSize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
487	[BUG]  [BUGGY]  return(int)(entrySize  -  startSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  startSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  startSize);	  return(long)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
488	[BUG]  [BUGGY]  return(int)(entrySize  -  registerSize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  registerSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  registerSize);	  return(long)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
489	[BUG]  [BUGGY]  return(int)(entryLength  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryLength  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryLength  -  entrySize);	  return(int)(length    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
490	[BUG]  [BUGGY]  return(int)(entrySize  -  fileLength);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  fileLength);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  fileLength);	  return(int)(length    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
491	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    entryOffset;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getZipEncoding();    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
492	[BUG]  [BUGGY]  return(int)(0L,  entryOffset  -  blockSize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0L,  entryOffset  -  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entryOffset  -  blockSize);	  return(int)(0L,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
493	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
494	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  isHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
495	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
496	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
497	[BUG]  [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  SMALL_BUFFER_SIZE);	  return(int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
498	[BUG]  [BUGGY]  return(int)(entrySize  -  escapeOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  escapeOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  escapeOffset);	  return(long)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
499	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
500	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEnt	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
501	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  cur  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  cur  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  cur	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    return    currEntry.    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
502	[BUG]  [BUGGY]  return(int)(entrySize  -  this.blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  this.blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  this.blockSize  +  1);	  return(int)(recordSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
503	[BUG]  [BUGGY]  return(int)(0,  entrySize  -  this.blockSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(0,  entrySize  -  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entrySize  -  this.blockSize);	  return(int)(entrySize    -    this.blockSize);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
504	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEnt  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEnt	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
505	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
506	[BUG]  [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	long  entryOffset  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    for(int    i    =    0;    i    <    blockSize;    ++i)    {    TarArchiveEntry    currEntry    =    getTarArchiveEntry(i);    if(currEntry.    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
507	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEnt	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
508	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEnt	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
509	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  blockSize;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
510	[BUG]  [BUGGY]  for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  entrySize;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
511	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  curr  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  curr  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  curr	  for(int    i    =    0,    hasHitEOF;    i    <    blockSize;    i++)    {    TarArchiveEntry    currEntry    =(TarArchiveEntry)currEntry.getValue();    if(currEntry.length    >    entrySize)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
512	[BUG]  [BUGGY]  if(entrySize  >  blockSize)  {  return  Integer.MAX_VALUE;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  blockSize)  {  return  Integer.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  blockSize)  {  return  Integer.MAX_VALUE;  }	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
513	[BUG]  [BUGGY]  return  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return  Integer.MAX_VALUE;	  if(entrySize    >    SMALL_BUFFER_SIZE)    {    return    Integer.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
