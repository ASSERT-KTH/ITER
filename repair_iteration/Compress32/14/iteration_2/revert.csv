projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(1L,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(EntrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(available-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=(int)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(256,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(length-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available()-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available/entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(char)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+1)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(currentSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){returnInteger.MAX_VALUE;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184IntegercurrEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize==entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(currEntrySize<entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getRecordSize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize()+entryOffset;if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize()-entryOffset;if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(currEntrySize>=entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184IntegercurrEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184Entry<K,V>currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<recordSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<this.blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<currEntry.length;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available()*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(available()-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available()-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(this.blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available()+entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,entryOffset-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,recordSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset,recordSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-1,entryOffset-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize,entryOffset-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-available);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,entryOffset+entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,entryOffset-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,entryOffset-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-1,entryOffset-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-recordSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intrecordSize=(int)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-recordSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(blockSize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184Integer.MAX_VALUE;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){returnInteger.MAX_VALUE;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=SMALL_BUFFER_SIZE){returnInteger.MAX_VALUE;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentrySize=SMALL_BUFFER_SIZE;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentrySize=getEntrySize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentrySize=SMALL_BUFFER_SIZE+entryOffset;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intreturn(int)(entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-checkSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(short)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(recordSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(char)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize/entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/entryOffset+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/recordSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize/entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(curr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entryOffset-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset+entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset-entrySize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*SMALL_BUFFER_SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset*entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize/entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset/recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize/recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-entrySize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<SMALL_BUFFER_SIZE;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){return
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<recordSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<this.blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){return0;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184IntegercurrEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){return0;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184Entry<K,V>currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){return0;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intreturn(int)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<currEntry.length;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entrySize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entrySize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize==entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184IntegercurrEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184Entry<K,V>currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longblockSize=(long)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=(int)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=(int)(entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=(int)(entrySize-entryOffset,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=(int)(recordSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=(int)(entrySize*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(String)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(String)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<this.blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isHitEOF;i<isHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<this.length;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isHitEOF;i<this.blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<this.entrySize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryLimit);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*SMALL_BUFFER_SIZE+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*recordSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*length+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize*entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-blockOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+1)/1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+1)+2;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+2)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-entryOffset+1)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+1)+1L;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-entrySize+1)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(currEntrySize<entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize()-entryOffset;if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize()+entryOffset;if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getRecordSize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(entrySize>entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entryOffset+entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entryOffset-entrySize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentrySize=(int)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184returnentryOffset(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intreturn(int)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentrySize=(int)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(Integer)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184recordSize(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset<SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset<SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset*recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize*recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+4);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-entryOffset+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+3);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset*2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(256,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(256,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentrySize=(int)(256,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(256,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(255,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(256,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184IntegercurrEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184Entry<K,V>currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(recordSize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset,blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry.length
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(1L,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entrySize-entryOffset,blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entrySize-entryOffset,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(this.blockSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entrySize-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize/entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/this.entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize/entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/EntryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize/entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset/blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize/blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*EntryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*fileLength);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,available-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,this.blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset<SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=currEntry.length;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<currEntry.length;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<recordSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getKey();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(curr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-currentOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-currentSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(recordSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intentrySize=(int)(entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<currEntry.length;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<length;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<recordSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<this.blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(currEntry.available()-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(currEntry.available()-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(MAX_VALUE,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize/blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize/entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize*entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(1L+entryOffset,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(MAX_VALUE,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entryOffset+1)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*entryOffset+1)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset*1)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(zipEncoding!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(zipEncoding==null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=0){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrentEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrentEntrySize();if(currEntrySize<entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(currEntrySize+entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intreturn(int)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184returnnewint(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>MAX_BUFFER_SIZE){returnInteger.MAX_VALUE;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184recordSize=Integer.MAX_VALUE;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(blockSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize/entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/length+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(256*entryOffset,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(256L+entryOffset,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(256-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available()/entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L+entrySize,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L*entrySize,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L*entrySize,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize*entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*RecordSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntries.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(cur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(char)(blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(String)(blockSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(length-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=(int)(entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize*entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<0){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=0){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=entryOffset){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry==null){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available*DateTimeConstants.MILLIS_PER_SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*this.entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available*DateTimeConstants.MAX_VALUE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available*entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available/entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-fileSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,data.length-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(this.blockSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(char)(entrySize-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-currentSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(fileSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){return
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L+entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(!hasHitEOF){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<0){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(zipEncoding!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(available-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(available*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=0){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.!=
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.==
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize*blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize/recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrentEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrentEntrySize();if(currEntrySize<entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available,entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(length*recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<recordSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=0){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.!=
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entrySize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*RecordSize.MAX_VALUE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*RecordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184inti=0,blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,this.blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entryOffset+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(available/entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize+entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,blockSize;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184inti=0,blockSize;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<len;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<SMALL_BUFFER_SIZE){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize==entryOffset){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-blockSize+1)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(zipEncoding==null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(encoding!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(encoding==null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(512,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(28,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(28,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize<=entryOffset){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry==null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>entryOffset){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*this.blockSize+entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize*entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset,recordSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,entryOffset-fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(EntrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<len;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(encoding!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(encoding==null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>recordSize){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+1));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-blockSize+1));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize*SMALL_BUFFER_SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,entrySize;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<len;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entrySize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,entrySize;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=getZipEncoding().encode(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/SMALL_BUFFER_SIZE+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/this.blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(lineSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>=entryOffset){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize==entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>0){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-startSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-registerSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryLength-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-fileLength);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entryOffset-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<len;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,isHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/SMALL_BUFFER_SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-escapeOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<len;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-this.blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entrySize-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184longentryOffset>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=blockSize;i<len;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,entrySize;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,len=hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>blockSize){returnInteger.MAX_VALUE;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184returnInteger.MAX_VALUE;
