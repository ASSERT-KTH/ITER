bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(int)(0,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(0,  entrySize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entrySize  -  entryOffset);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  return(int)(entrySize,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize,  entryOffset  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize,  entryOffset  -  entryOffset);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  return(int)(recordSize,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(recordSize,  entryOffset  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize,  entryOffset  -  entryOffset);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  return(int)(0,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(0,  entryOffset  -  entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0,  entryOffset  -  entrySize);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  return(int)(0L,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(0L,  entryOffset  -  entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entryOffset  -  entrySize);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  return(int)(0L,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(0L,  entrySize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(0L,  entrySize  -  entryOffset);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  return(int)(1L,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(1L,  entryOffset  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(1L,  entryOffset  -  entryOffset);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  int  blockSize  =  currEntry.length;	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.length;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  this.blockSize  =  currEntry.length;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entrySize)  {  return  currEntry.length;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.length  >  entryOffset)  {  return  currEntry.length;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  return  currEntry.	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  blockSize;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  2);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  -  entryOffset  +  2);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  2);	  return(int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  return(int)(recordSize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(recordSize  -  entryOffset  +  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  -  entryOffset  +  1);	  return(int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  return(int)(entrySize  *  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  *  entryOffset  +  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  entryOffset  +  1);	  return(int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  return(long)(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(long)(entrySize  -  entryOffset  +  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  -  entryOffset  +  1);	  return(int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  return(int)(entrySize  /  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  /  entryOffset  +  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  entryOffset  +  1);	  return(int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
20	[BUG]  [BUGGY]  return  (int)(entrySize  -  fileSize);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  -  fileSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return  (int)(entrySize  -  fileSize);	  return    (int)(recordSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  return  (long)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (long)(entrySize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return  (long)(entrySize  -  entryOffset);	  return    (int)(recordSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  return(byte)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(byte)(entrySize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(entrySize  -  entryOffset);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  return(int)(EntrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(EntrySize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(EntrySize  -  entryOffset);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  return(int)(entrySize  *  entryOffset);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  *  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  entryOffset);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  return(byte)(available  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(byte)(available  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(byte)(available  -  entryOffset);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  int  blockSize  =(int)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  int  blockSize  =(int)(entrySize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  blockSize  =(int)(entrySize  -  entryOffset);	  return    (int)(blockSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  return(int)(entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entryOffset  -  entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  entrySize);	  return(int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  return(int)(entryOffset  -  recordSize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entryOffset  -  recordSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  recordSize);	  return(int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  return(int)(entrySize  /  recordSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  /  recordSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  recordSize);	  return(int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  return(long)(entrySize  -  recordSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(long)(entrySize  -  recordSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  -  recordSize);	  return(int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  return(int)(entryOffset  -  blockSize);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entryOffset  -  blockSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entryOffset  -  blockSize);	  return(int)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  return(long)(entrySize  -  blockSize);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(long)(entrySize  -  blockSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(long)(entrySize  -  blockSize);	  return(int)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  return(int)(entrySize  /  blockSize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  /  blockSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  /  blockSize);	  return(int)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  return(int)(blockSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(blockSize  -  entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  -  entrySize);	  return(int)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  return(int)(blockSize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(blockSize  -  entryOffset  +  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  -  entryOffset  +  1);	  return(int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  return(int)(entrySize  -  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  -  blockSize  +  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  blockSize  +  1);	  return(int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  return(int)(available,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(available,  entrySize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available,  entrySize  -  entryOffset);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  return(int)(256,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(256,  entryOffset  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(256,  entryOffset  -  entryOffset);	  return(int)(0,    entryOffset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  return(int)(recordSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(recordSize  -  entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  -  entrySize);	  return(int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  return(int)(length  -  entrySize);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(length  -  entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(length  -  entrySize);	  return(int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  return(int)(blockSize  -  recordSize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(blockSize  -  recordSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(blockSize  -  recordSize);	  return(int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  return(int)(available  -  entrySize);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(available  -  entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available  -  entrySize);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  return(int)(available  *  entryOffset);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(available  *  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available  *  entryOffset);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  return(int)(available()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(available()  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available()  -  entryOffset);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  return(int)(available  /  entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(available  /  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(available  /  entryOffset);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  return(int)(recordSize  -  blockSize);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(recordSize  -  blockSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(recordSize  -  blockSize);	  return(int)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  return(char)(entrySize  -  blockSize);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(char)(entrySize  -  blockSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(char)(entrySize  -  blockSize);	  return(int)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize  +  currEntrySize;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.available();  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	int  currEntrySize  =  getCurrEntrySize();  if(currEntrySize  >  entryOffset)  {  return  currEntrySize;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(currEntry!=  null)  {  currEntry  =  getZipEncoding();  if(currEntry!=  null)  {  return  currEntry.length;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(currEntry!=  null)  {  currEntry  =  getCurrEntry();  if(currEntry!=  null)  {  return  0;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1;  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  return(int)(currentSize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(currentSize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(currentSize  -  entryOffset);	  return(int)(available    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  return(int)(entrySize  -  this.blockSize);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  -  this.blockSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  -  this.blockSize);	  return    (int)(blockSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  return(int)(entrySize  *  recordSize);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  *  recordSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	return(int)(entrySize  *  recordSize);	  return(int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
60	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrEntry(i);  if(currEntry.	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  entryOffset;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
62	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getTarArchiveEntry(i);  if(currEntry.	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding();  if(currEntry.	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	184	184	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  for(int  i  =  0;  i  <  blockSize;  ++i)  {  TarArchiveEntry  currEntry  =  getZipEncoding().encode(currEntry.get	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
