projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(0L,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(1L,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();intblockSize=currEntry.length;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();this.blockSize=currEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entrySize){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.length>entryOffset){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){returncurrEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184for(inti=0,hasHitEOF;i<blockSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(EntrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(byte)(available-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intblockSize=(int)(entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entryOffset-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(long)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize/blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-entryOffset+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-blockSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available,entrySize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(256,entryOffset-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(length-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(blockSize-recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available-entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available*entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available()-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(available/entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(recordSize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(char)(entrySize-blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.available();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getZipEncoding();if(currEntry!=null){returncurrEntry.length;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){return0;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-entryOffset+1)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(currentSize-entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize-this.blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184return(int)(entrySize*recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getCurrEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=entryOffset;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getTarArchiveEntry(i);if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding();if(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){returnInteger.MAX_VALUE;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java184if(entrySize>SMALL_BUFFER_SIZE){for(inti=0;i<blockSize;++i){TarArchiveEntrycurrEntry=getZipEncoding().encode(currEntry.get
