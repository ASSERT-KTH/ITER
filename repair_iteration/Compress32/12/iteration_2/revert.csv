projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returngetNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returngetNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?currEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returngetNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getStart();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getRaw();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?nextEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?currEntry:getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)this.currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558if(currEntry==null){returncurrEntry.getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.currEntry.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)currEntry.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)super.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returngetNextEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getFirstChild();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextFileEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextRecordEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.next;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRecordSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getLastChild();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)entry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)super.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getFirstEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getMethod();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getNextValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getSource();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextTarEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextTarEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRawParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)record.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)record.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextInternalEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getRawParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?currEntry:getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getMethod();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getPath();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextPathEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextPath();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextPathEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.next;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.cloneTar();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)this.currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.currEntry.getNextBytes();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?currEntry:getNextTarEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.currEntry:getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry().getKey():getNextEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry().getValue():null;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)entry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)entry.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)entry.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)entry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():currEntry.next;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getLastChild();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getString();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getLocalFile();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returnthis.currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry==null?null:currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?null:currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry.getNextEntry(null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returngetNextEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returnthis.currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returngetNextEntry().getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returngetNextEntry().getRawValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returngetNextEntry().getValue()-1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextRecordEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextRecordEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextRecordEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:getNextRecordEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextCurrentEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextRecordEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.getNextTarEntry():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextValue():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getRecord();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getAstRoot();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?null:getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextTarEntry().getRawValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextTarEntry().getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?null:getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextArchiveEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.record.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)record.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)record.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getLastPath();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRawClass();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():currEntry.getMethod();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getLastEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getStartEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.super.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)super.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)super.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.getNextTarEntry():currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRawValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returnthis.currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry==null?null:currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?null:currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry==null?null:currEntry.getParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getRawEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRawKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getPassword();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)super.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.super.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(nextEntry==null)?currEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.nextEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?nextEntry:getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)currEntry.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getLocalName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.currEntry.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextEntry():getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():getNextRecordEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():getNextFileEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():getNextPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:getNextTarEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextTarEntry().getRawKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?null:getNextTarEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getEnd();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getStart()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getRawKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getPassword();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)this.currEntry.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)entry.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?currEntry:getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.currEntry:getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?nextEntry:getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?currEntry:getNextRecordEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextFileEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextFileEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextFileEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextFiles();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextInternalEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextInternalEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:getNextInternalEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?null:getNextInternalEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558if(currEntry!=null){returncurrEntry.getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558this.currEntry=currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558finalTarArchiveEntrycurrEntry=currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558while(currEntry!=null){currEntry.setNextEntry(null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextTarEntry().getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextTarEntry().getKey());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNewTarEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextRecord());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getRawClass();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getMethod();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():currEntry.getRawParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getLastParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getRawValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)record.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.record.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)record.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getKey()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getValue()/1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getValue()*1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?currEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?this.currEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry!=null)?currEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.currEntry:getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.currEntry:getNextPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.currEntry:getNextPosition();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)this.currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)this.currEntry.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)this.urlEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getStartChild();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getLocalName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextEntry():currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getRawEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getLastEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRawSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getLength();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRowSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRawOffset();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextPathEntry():getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextPathEntry():getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextFile():getNextPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextFileEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextRecordEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextPathEntry():getNextRecordEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getNextKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getSimpleName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?firstEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?lastEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextFileEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextTarEntry().getParent());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:newArchiveEntry(getNextTarEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getMethod();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRawMethod();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?getNextEntry():currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry==null?getNextEntry():currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry>=null?null:currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextValueEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.entry.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.nextEntry.clone();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)entry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getAbsolutePath();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?null:currEntry.getName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextInternalEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextInternalEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry.getNextEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:rawEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558Return(currEntry==null)?null:currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returns(currEntry==null)?null:currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry==null)?null:currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?currEntry:getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getNumberOfLinks();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getHeaderSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextName():getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextFile():getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextTarEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNext().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextTarEntry().getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getNextFile();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextSizeEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextFileEntry().getParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextTarEntry().getName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getPosition();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getAbsolutePath();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():currEntry.getName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.entry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.key.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():getNextPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextValueEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():getNextUpperPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextRecordEntry().getParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)super.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRecordLimit();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():currEntry.getRecordSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.getNextValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.entry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextArchiveEntry():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?getNextTarEntry():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry!=null)?this.currEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?nextEntry:getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(ArchiveEntry)this.entry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.entry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.nextEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getFirstEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextArchiveEntry().getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getData();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry().getValue():currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getHeaderSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558Return(currEntry==null)?null:currEntry.getNextValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?currEntry.getNextEntry():null;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?currEntry.getNextEntry():newTarArchiveEntry(currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?currEntry.getNextEntry():newTarArchiveEntry(currEntry.getKey());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?newTarArchiveEntry(nextEntry):getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getNext();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry!=null)?getNextTarEntry():currEntry.getParent();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextEntry():currEntry.getSize();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?newArchiveEntry():getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this:getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.getNextTarEntry():currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.getNextEntry():currEntry.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextPadding();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newTarArchiveEntry(getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newTarArchiveEntry(getNextInternalEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:getNextInternalEntry().getName();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getValuePath();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry().getNextEntry():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?currEntry.getNextTarEntry():getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.getNextEntry():getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)record.get();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(this.currEntry==null)?this.currEntry:getNextArchiveEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)this.currEntry.getData();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:currEntry.getAstRootEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?newTarArchiveEntry(currEntry):getNextTarEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.getNextTarEntry():currEntry.next;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextTarEntry().getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(this,getNextTarEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?null:newArchiveEntry(getNextTarEntry(),currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558if(currEntry==null||currEntry.getNextEntry()!=null){returncurrEntry.getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558if(currEntry==null||currEntry.isNextEntry()){returncurrEntry.getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558if(currEntry==null||currEntry.getNextEntry()==null){returncurrEntry.getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558if(currEntry==null||currEntry.isArchive()){returncurrEntry.getNextEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?this.getNextTarEntry():getNextPathEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?currEntry.getNext():null;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?currEntry.getNext():newTarArchiveEntry(currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558returncurrEntry!=null?currEntry.getNext():newArchiveEntry(currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)record.getNextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(TarArchiveEntry)currEntry.nextEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java558return(currEntry==null)?getNextTarEntry():currEntry.getRecordSize()+1;
