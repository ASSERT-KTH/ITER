bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  ch  ==  ',')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  ',')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  ',')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    ',')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
2	[BUG]  [BUGGY]  ||  ch  ==  ',')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  ',')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  ',')  {  coll  =  new  ByteArrayOutputStream();	  if(ch    ==    '.'    ||    ch    ==    ',')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch!=  ',')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch!=  ',')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.'  ||  ch!=  ',')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    ',')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
4	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
7	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(3);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(3);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(3);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(2);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
10	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(4);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(4);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(4);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(2);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
11	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
12	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
13	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']')  {	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
14	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  break;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
15	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  return  coll;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']')  {  return  coll;  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
16	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
17	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']')  {  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']')  {  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
18	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
19	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
20	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
21	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
22	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
23	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
24	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
25	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
26	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
27	[BUG]  [BUGGY]  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
28	[BUG]  [BUGGY]  if(ch  ==  ']'  ||  ch  ==  '[')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']'  ||  ch  ==  '[')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ']'  ||  ch  ==  '[')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  if(ch!=  '['  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '['  ||  ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  '['  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  '['  &&  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  &&  ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '['  &&  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  if(ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  if(ch  >=  '['  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '['  ||  ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  '['  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  InputStream  i  =  headers.get(headers.size());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(headers.size());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(headers.size());	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
35	[BUG]  [BUGGY]  InputStream  i  =  headers.get(i.size());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(i.size());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(i.size());	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
36	[BUG]  [BUGGY]  InputStream  i  =  headers.get(i.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(i.size()  -  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(i.size()  -  1);	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
37	[BUG]  [BUGGY]  InputStream  i  =  headers.get(remainders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(remainders.size()  -  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(remainders.size()  -  1);	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
38	[BUG]  [BUGGY]  InputStream  i  =  headers.get(headers.size()  +  1);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(headers.size()  +  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(headers.size()  +  1);	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
39	[BUG]  [BUGGY]  InputStream  i  =  headers.get(headers.size()  *  1);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(headers.size()  *  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(headers.size()  *  1);	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
40	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
41	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
42	[BUG]  [BUGGY]  hilst((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  hilst((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	hilst((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  whilst((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
43	[BUG]  [BUGGY]  meanwhile((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  meanwhile((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	meanwhile((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  whilst((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
44	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
45	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
46	[BUG]  [BUGGY]  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
47	[BUG]  [BUGGY]  ||  ch  >=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  >=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  >=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
48	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll.close();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll.close();  }	  ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
49	[BUG]  [BUGGY]  i.setRead(headers);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setRead(headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setRead(headers);	  i.setRead(read);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
50	[BUG]  [BUGGY]  i.setRead(remainders);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setRead(remainders);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setRead(remainders);	  i.setRead(read);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
51	[BUG]  [BUGGY]  i.setRead(bodys);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setRead(bodys);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setRead(bodys);	  i.setRead(read);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
52	[BUG]  [BUGGY]  i.setRead(false);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setRead(false);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setRead(false);	  i.setRead(read);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
53	[BUG]  [BUGGY]  i.setRead(len);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setRead(len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setRead(len);	  i.setRead(read);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
54	[BUG]  [BUGGY]  i.setRead(read,  headers);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setRead(read,  headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setRead(read,  headers);	  i.setRead(read);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
55	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '-'  ||  ch  ==  '+')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  'e'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  if(ch  ==  '+'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '+'  ||  ch  ==  '+')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '+'  ||  ch  ==  '+')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  ||(ch  ==  ':'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  ':'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  ':'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
60	[BUG]  [BUGGY]  ||(ch  ==  ':'  &&  i.hasNext()))  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  ':'  &&  i.hasNext()))  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  ':'  &&  i.hasNext()))  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
61	[BUG]  [BUGGY]  if(ch!=  ':')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  ':')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  ':')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
62	[BUG]  [BUGGY]  ||(ch  ==  ':'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  ':'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  ':'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
63	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n')  {  break;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
64	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
65	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  read);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
66	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  ch);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  ch);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
67	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  headers);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  headers);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
68	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  coll);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  coll);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  coll);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
69	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  currEntry);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  currEntry);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
70	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  parsePaxHeaders(i));  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  parsePaxHeaders(i));  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  parsePaxHeaders(i));	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
71	[BUG]  [BUGGY]  (TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  read);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  (TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	(TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  read);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
72	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
73	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
74	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch!=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch!=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch!=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
75	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
76	[BUG]  [BUGGY]  ||(ch  ==  '.'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  '.'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  '.'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
77	[BUG]  [BUGGY]  ||(ch  ==  '.'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  '.'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  '.'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();	  if(ch    ==    '.')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
78	[BUG]  [BUGGY]  InputStream  is  =  headers.readFully(i);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.readFully(i);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.readFully(i);	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
79	[BUG]  [BUGGY]  InputStream  is  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  i.readInt();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  i.readInt();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
80	[BUG]  [BUGGY]  InputStream  is  =  headers.readUTF();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.readUTF();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.readUTF();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
81	[BUG]  [BUGGY]  InputStream  is  =  headers.readFully();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.readFully();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.readFully();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
82	[BUG]  [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers!=  null?  headers.readInt()  :  i;	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
83	[BUG]  [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
84	[BUG]  [BUGGY]  ||  ch  ==  '@')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  '@')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  '@')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
85	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {  break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
86	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
87	[BUG]  [BUGGY]  ||  i.hasNext())  {  if(ch  ==  '>')  {  break;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  i.hasNext())  {  if(ch  ==  '>')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  i.hasNext())  {  if(ch  ==  '>')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
88	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  '>')  {  break;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  '>')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  '>')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
89	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  ']')  {  break;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  ']')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  ']')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
90	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  'n')  {  break;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  'n')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  'n')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
91	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
92	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  ch);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  ch);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  ch);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
93	[BUG]  [BUGGY]  (TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  (TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	(TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
94	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  headers);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
95	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  len);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  len);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
96	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
97	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
98	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
99	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')break;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
100	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
101	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
102	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  ':')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  ':')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  ':')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
103	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'n')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'n')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'n')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
104	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '>')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '>')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '>')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
105	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
106	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '-')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '-')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '-')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
107	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '#')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '#')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '#')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
108	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(read);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
109	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(0);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
110	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(len);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
111	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(ch);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(ch);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(ch);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
112	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(1);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
113	[BUG]  [BUGGY]  While((  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  while((    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
114	[BUG]  [BUGGY]  while(i.hasNext()!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while(i.hasNext()!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while(i.hasNext()!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  while((    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
115	[BUG]  [BUGGY]  while((  i.read())!=  -1)  {  read  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  i.read())!=  -1)  {  read  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  i.read())!=  -1)  {  read  =  new  ByteArrayOutputStream();	  while((    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
116	[BUG]  [BUGGY]  while((  ch  =  i.getValue())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.getValue())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.getValue())!=  -1)  {  read++;	  while((    ch    =    i.next())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
117	[BUG]  [BUGGY]  while((  ch  =  i.next())  ==  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.next())  ==  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.next())  ==  -1)  {  read++;	  while((    ch    =    i.next())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
118	[BUG]  [BUGGY]  whil((  ch  =  i.next())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  whil((  ch  =  i.next())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	whil((  ch  =  i.next())!=  -1)  {  read++;	  while((    ch    =    i.next())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
119	[BUG]  [BUGGY]  While((  ch  =  i.next())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  ch  =  i.next())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  ch  =  i.next())!=  -1)  {  read++;	  while((    ch    =    i.next())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
120	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
121	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
122	[BUG]  [BUGGY]  if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
123	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
124	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
125	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
126	[BUG]  [BUGGY]  int  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  int  len  =  headers.size()  -  1;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	int  len  =  headers.size()  -  1;	  int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
127	[BUG]  [BUGGY]  int  len  =  headers.size()  -  read;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  int  len  =  headers.size()  -  read;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	int  len  =  headers.size()  -  read;	  int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
128	[BUG]  [BUGGY]  int  len  =  headers.size()  +  read;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  int  len  =  headers.size()  +  read;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	int  len  =  headers.size()  +  read;	  int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
129	[BUG]  [BUGGY]  int  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  int  len  =  headers.size()  -  2;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	int  len  =  headers.size()  -  2;	  int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
130	[BUG]  [BUGGY]  int  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  int  len  =  headers.size()  +  1;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	int  len  =  headers.size()  +  1;	  int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
131	[BUG]  [BUGGY]  int  len  =  headers.size()  *  read;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  int  len  =  headers.size()  *  read;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	int  len  =  headers.size()  *  read;	  int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
132	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
133	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
134	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
135	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
136	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(i.hasMoreElements())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  if(i.hasMoreElements())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  if(i.hasMoreElements())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
137	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
138	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
139	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
140	[BUG]  [BUGGY]  (Map.Entry  <  String,  String>)headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  (Map.Entry  <  String,  String>)headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	(Map.Entry  <  String,  String>)headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
141	[BUG]  [BUGGY]  (Map.Entry  <  String,  String>  entry  :  headers.entrySet()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  (Map.Entry  <  String,  String>  entry  :  headers.entrySet()))  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	(Map.Entry  <  String,  String>  entry  :  headers.entrySet()))  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
142	[BUG]  [BUGGY]  while((  read  =  i.read(ch))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  read  =  i.read(ch))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  read  =  i.read(ch))!=  -1)  {  read++;	  while((    read    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
143	[BUG]  [BUGGY]  while((  i  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  i  =  i.read())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  i  =  i.read())!=  -1)  {  read++;	  while((    read    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
144	[BUG]  [BUGGY]  while((  read  =  i.readFully())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  read  =  i.readFully())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  read  =  i.readFully())!=  -1)  {  read++;	  while((    read    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
145	[BUG]  [BUGGY]  if(ch  ==  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
146	[BUG]  [BUGGY]  if(ch!=  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
147	[BUG]  [BUGGY]  if(ch  >=  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
148	[BUG]  [BUGGY]  if(ch  <  '0'  ||  ch  >  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  '0'  ||  ch  >  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  '0'  ||  ch  >  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
149	[BUG]  [BUGGY]  if(ch  <  '0'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  '0'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  '0'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
150	[BUG]  [BUGGY]  if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
151	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
152	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
153	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
154	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
155	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
156	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
157	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
158	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
159	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
160	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
161	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
163	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
164	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
165	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
166	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
167	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
168	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
169	[BUG]  [BUGGY]  while((  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
170	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
171	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
173	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
174	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
175	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
176	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
177	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
178	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream();	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
179	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(0);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(0);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
180	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(len);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
181	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(ch);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(ch);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(ch);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
182	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
183	[BUG]  [BUGGY]  parsePaxHeaders(i,  headers,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i,  headers,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i,  headers,  read);	  parsePaxHeaders(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
184	[BUG]  [BUGGY]  parsePaxHeaders(i,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i,  read);	  parsePaxHeaders(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
185	[BUG]  [BUGGY]  parsePaxHeaders(i,  headers,  ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i,  headers,  ch);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i,  headers,  ch);	  parsePaxHeaders(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
186	[BUG]  [BUGGY]  parsePaxHeaders(i,  headers,  len);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i,  headers,  len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i,  headers,  len);	  parsePaxHeaders(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
187	[BUG]  [BUGGY]  parsePaxHeaders(i,  headers,  got);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i,  headers,  got);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i,  headers,  got);	  parsePaxHeaders(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
188	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')continue;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
189	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
190	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
191	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
192	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
193	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
194	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
195	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
196	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
197	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
198	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
199	[BUG]  [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())  >=  -1)  {  read++;	  while((    ch    =    i.read())    ==    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
200	[BUG]  [BUGGY]  while((  read  =  i.seek())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  read  =  i.seek())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  read  =  i.seek())!=  -1)  {  read++;	  while((    ch    =    i.seek())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
201	[BUG]  [BUGGY]  while((  ch  =  i.seek())  ==  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.seek())  ==  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.seek())  ==  -1)  {  read++;	  while((    ch    =    i.seek())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
202	[BUG]  [BUGGY]  whil((  ch  =  i.seek())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  whil((  ch  =  i.seek())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	whil((  ch  =  i.seek())!=  -1)  {  read++;	  while((    ch    =    i.seek())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
203	[BUG]  [BUGGY]  ||(ch  ==  ']'  &&  i.hasNext()))  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  ']'  &&  i.hasNext()))  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  ']'  &&  i.hasNext()))  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
204	[BUG]  [BUGGY]  ||(ch  ==  ']'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  ']'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  ']'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
205	[BUG]  [BUGGY]  if(ch!=  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  ']')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
206	[BUG]  [BUGGY]  ||(ch  ==  ']'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  ']'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  ']'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
207	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
208	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
209	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
210	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
211	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.size());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.size());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.size());	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
212	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.next());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.next());	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
213	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.headers.size());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.headers.size());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.headers.size());	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
214	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.recordSize());  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.recordSize());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.recordSize());	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
215	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.read);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.read);	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
216	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.nextInput());  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.nextInput());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.nextInput());	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
217	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.inputStream());  [CE]  illegal  start  of  type  [FE]                                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.inputStream());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.inputStream());	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
218	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
219	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
220	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
221	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
222	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
223	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')continue;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
224	[BUG]  [BUGGY]  while((  ch  =  i.getCurrentToken())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.getCurrentToken())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.getCurrentToken())!=  -1)  {  read++;	  While((    ch    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
225	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
226	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
227	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
228	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
229	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
230	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
231	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
232	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'A')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'A')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'A')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
233	[BUG]  [BUGGY]  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
234	[BUG]  [BUGGY]  ||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
235	[BUG]  [BUGGY]  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
236	[BUG]  [BUGGY]  ||  ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
237	[BUG]  [BUGGY]  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
238	[BUG]  [BUGGY]  if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
239	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
240	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
241	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
242	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
243	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
244	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  coll;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  coll;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
245	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  col;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  col;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  col;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
246	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  return  coll;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(i.hasNext())  {  return  coll;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
247	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
248	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  null;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  null;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  null;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
249	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  col;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  col;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  col;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
250	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
251	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
252	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
253	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
254	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
255	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
256	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='<  ')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='<  ')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='<  ')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
257	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='}  ')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='}  ')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='}  ')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
258	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
259	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
260	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
262	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
263	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
264	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
265	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
266	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
267	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  IOUtils.readFully(i))!=  -1)  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  IOUtils.readFully(i))!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
268	[BUG]  [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())  ==  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
269	[BUG]  [BUGGY]  whil((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  whil((  ch  =  i.read())!=  -1)  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	whil((  ch  =  i.read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
270	[BUG]  [BUGGY]  while((  read  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  read  =  i.read())!=  -1)  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  read  =  i.read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
271	[BUG]  [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())  >=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
272	[BUG]  [BUGGY]  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
273	[BUG]  [BUGGY]  ||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch!=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
274	[BUG]  [BUGGY]  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
275	[BUG]  [BUGGY]  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
276	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll.close();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll.close();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r'  ||  ch  ==  't')  {  coll.close();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
277	[BUG]  [BUGGY]  ||  ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
278	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.size()  -  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.size()  -  1);	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
279	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.headers.size()  -  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.headers.size()  -  1);	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
280	[BUG]  [BUGGY]  ParsePaxHeaders(i,  headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ParsePaxHeaders(i,  headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ParsePaxHeaders(i,  headers);	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
281	[BUG]  [BUGGY]  parseHeaders(i);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parseHeaders(i);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parseHeaders(i);	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
282	[BUG]  [BUGGY]  parsePaxHeaders(i.getMessage());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i.getMessage());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i.getMessage());	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
283	[BUG]  [BUGGY]  i.set(len,  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.set(len,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.set(len,  read);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
284	[BUG]  [BUGGY]  i.remove();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.remove();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.remove();	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
285	[BUG]  [BUGGY]  i.set(read,  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.set(read,  len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.set(read,  len);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
286	[BUG]  [BUGGY]  i.setLength(0);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setLength(0);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setLength(0);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
287	[BUG]  [BUGGY]  i.setIndex(read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setIndex(read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setIndex(read);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
288	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
289	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
290	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  Byte  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  Byte  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  Byte	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
291	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutput  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutput  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutput	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
292	[BUG]  [BUGGY]  if(i.isEmpty())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEmpty())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.isEmpty())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
293	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
294	[BUG]  [BUGGY]  while((  read  =  i.read())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  read  =  i.read())!=  -1)  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  read  =  i.read())!=  -1)  {  read++;  }	  while((    ch    =    i.read())!=    -1)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
295	[BUG]  [BUGGY]  While((  ch  =  i.read())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  ch  =  i.read())!=  -1)  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  ch  =  i.read())!=  -1)  {  read++;  }	  while((    ch    =    i.read())!=    -1)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
296	[BUG]  [BUGGY]  read  =  i.read();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  read  =  i.read();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	read  =  i.read();	  while((    ch    =    i.read())!=    -1)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
297	[BUG]  [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())  ==  -1)  {  read++;  }	  while((    ch    =    i.read())!=    -1)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
298	[BUG]  [BUGGY]  ||(ch  ==  '@'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  '@'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  '@'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
299	[BUG]  [BUGGY]  ||(ch  ==  '@'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  '@'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  '@'  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  coll  =  new  ByteArrayOutputStream();	  if(ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
300	[BUG]  [BUGGY]  ||(ch  ==  '@'  &&  i.hasMoreElements()))  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||(ch  ==  '@'  &&  i.hasMoreElements()))  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||(ch  ==  '@'  &&  i.hasMoreElements()))  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
301	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
302	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
303	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
304	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
305	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  >=  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  >=  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  >=  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
306	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if  (ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if  (ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if  (ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if    (ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
307	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if    (ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
308	[BUG]  [BUGGY]  while((  ch  =  i.readFully(i))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.readFully(i))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.readFully(i))!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
309	[BUG]  [BUGGY]  while((  ch  =  i.readFully())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.readFully())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.readFully())!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
310	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  read))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  read))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  IOUtils.readFully(i,  read))!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
311	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  restLen))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  restLen))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  IOUtils.readFully(i,  restLen))!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
312	[BUG]  [BUGGY]  while((  ch  =  i.readFully(ch))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.readFully(ch))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.readFully(ch))!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
313	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i,  len))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  IOUtils.readFully(i,  len))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  IOUtils.readFully(i,  len))!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
314	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  ':')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  ==  ':')  {	  if(ch    ==    '.'    ||    ch    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
315	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    '.'    ||    ch    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
316	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  ':')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ','  ||  ch  ==  ':')  {	  if(ch    ==    '.'    ||    ch    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
317	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
318	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
319	[BUG]  [BUGGY]  while((  ch  =  i.recordSize())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.recordSize())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.recordSize())!=  -1)  {  read++;	  while((    ch    =    i.getCurrentSize())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
320	[BUG]  [BUGGY]  While((  ch  =  i.getCurrentSize())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  ch  =  i.getCurrentSize())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  ch  =  i.getCurrentSize())!=  -1)  {  read++;	  while((    ch    =    i.getCurrentSize())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
321	[BUG]  [BUGGY]  while((  ch  =  i.getCurrent())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.getCurrent())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.getCurrent())!=  -1)  {  read++;	  while((    ch    =    i.getCurrentSize())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
322	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  '@')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ','  ||  ch  ==  '@')  {	  if(ch    ==    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
323	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  '@')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  '.'  ||  ch  ==  '@')  {	  if(ch    ==    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
324	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '@')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  ==  '@')  {	  if(ch    ==    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
325	[BUG]  [BUGGY]  if(ch  ==  '@'  ||  ch  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@'  ||  ch  ==  '.')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '@'  ||  ch  ==  '.')  {	  if(ch    ==    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
326	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
327	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
328	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
329	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.')  {  if(i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.')  {  if(i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
330	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
331	[BUG]  [BUGGY]  While((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  while((    i    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
333	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
334	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  heads[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  heads[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  heads[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
335	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  new  String(headers[i.nextElement().getCharset());  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  new  String(headers[i.nextElement().getCharset());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  new  String(headers[i.nextElement().getCharset());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
337	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[j.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[j.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[j.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
338	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'T'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
339	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
340	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
342	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
343	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(!i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
344	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch!=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
345	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(headers.size());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
346	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  +  read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  +  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(headers.size());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
347	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(headers.size());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
348	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  +  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(headers.size());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
349	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  2);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  2);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  2);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(headers.size());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
350	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  4);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  4);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size()  -  4);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(headers.size());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
351	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
352	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
353	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
354	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
355	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')break;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
356	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
357	[BUG]  [BUGGY]  if(i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
358	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  '>')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  '>')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
359	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext()  ||  ch  ==  '>')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext()  ||  ch  ==  '>')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
360	[BUG]  [BUGGY]  if(i.next())  {  if(ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.next())  {  if(ch  ==  '>')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.next())  {  if(ch  ==  '>')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
361	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(i.hasNext())  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(i.hasNext())  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
362	[BUG]  [BUGGY]  if(i.next())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.next())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.next())  {  if(ch  ==  '>'  ||  ch  =='<  ')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
363	[BUG]  [BUGGY]  if(i.next())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.next())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.next())  {  if(ch  ==  '>'  ||  ch  =='}  ')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
364	[BUG]  [BUGGY]  While((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
365	[BUG]  [BUGGY]  while((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
366	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
367	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
368	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.size());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
369	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
370	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
371	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
372	[BUG]  [BUGGY]  While(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
373	[BUG]  [BUGGY]  While(i.hasNext())  {  while((  ch  =  i.next())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While(i.hasNext())  {  while((  ch  =  i.next())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While(i.hasNext())  {  while((  ch  =  i.next())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
374	[BUG]  [BUGGY]  While(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  if(i.hasNext())    {    while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
375	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.next())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.next())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while((  ch  =  i.next())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
376	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
377	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
378	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
379	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  <  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  <  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  <  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
380	[BUG]  [BUGGY]  if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
381	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
382	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
383	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
384	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
385	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
386	[BUG]  [BUGGY]  while((  ch  =  i.getCurrentSize())  ==  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.getCurrentSize())  ==  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.getCurrentSize())  ==  -1)  {  read++;	  while((    ch    =    i.getCurrentSize())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
387	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
388	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
389	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
390	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
391	[BUG]  [BUGGY]  i.setRead(read  +  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setRead(read  +  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setRead(read  +  1);	  i.setRead(read);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
392	[BUG]  [BUGGY]  i.setRead(ch);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setRead(ch);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setRead(ch);	  i.setRead(read);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
393	[BUG]  [BUGGY]  while((  ch  =  i.getNext())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.getNext())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.getNext())!=  -1)  {  read++;	  while((    ch    =    i.next())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
394	[BUG]  [BUGGY]  while((  read  =  i.read(ch)!=  -1))  {  read++;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  read  =  i.read(ch)!=  -1))  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  read  =  i.read(ch)!=  -1))  {  read++;	  while((    read    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
395	[BUG]  [BUGGY]  InputStream  is  =  headers.readInt(read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.readInt(read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.readInt(read);	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
396	[BUG]  [BUGGY]  InputStream  is  =  headers.readObject();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.readObject();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.readObject();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
397	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(8);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(8);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(8);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
398	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(2);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(2);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(2);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
399	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(8);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(8);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(8);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
400	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(4);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(4);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(4);	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
401	[BUG]  [BUGGY]  InputStream  i  =  headers.get(headers.size()  -  1  +  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(headers.size()  -  1  +  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(headers.size()  -  1  +  read);	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
402	[BUG]  [BUGGY]  InputStream  i  =  headers.get(headers.size()  -  2);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(headers.size()  -  2);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(headers.size()  -  2);	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
403	[BUG]  [BUGGY]  InputStream  i  =  headers.get(headers.size()  -  1L);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(headers.size()  -  1L);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(headers.size()  -  1L);	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
404	[BUG]  [BUGGY]  while((  i  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  i  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  i  =  i.read())!=  -1)  {  if(i.hasNext())  {  if(ch  ==  '')  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
405	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
406	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  if(ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
407	[BUG]  [BUGGY]  parsePaxHeaders(i,  IOUtils.readFully(i,  headers));  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i,  IOUtils.readFully(i,  headers));  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i,  IOUtils.readFully(i,  headers));	  parsePaxHeaders(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
408	[BUG]  [BUGGY]  ParsePaxHeaders(i,  headers,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ParsePaxHeaders(i,  headers,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ParsePaxHeaders(i,  headers,  read);	  parsePaxHeaders(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
409	[BUG]  [BUGGY]  parseHeaders(i,  headers);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parseHeaders(i,  headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parseHeaders(i,  headers);	  parsePaxHeaders(i,    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
410	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
411	[BUG]  [BUGGY]  if(i.hasNext())  {  while(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
412	[BUG]  [BUGGY]  ||  ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
413	[BUG]  [BUGGY]  ||  ch  ==  'u')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'u')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'u')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
414	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
415	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
416	[BUG]  [BUGGY]  byte[]  coll  =  new  byte[read];  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  byte[]  coll  =  new  byte[read];  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	byte[]  coll  =  new  byte[read];	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
417	[BUG]  [BUGGY]  if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
418	[BUG]  [BUGGY]  if(read  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(read  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(read  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
419	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
420	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
421	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
422	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
423	[BUG]  [BUGGY]  while((  i.hasNext())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  i.hasNext())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  i.hasNext())!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  while((    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
424	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'A'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'A'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'a'  ||  ch  ==  'A'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
425	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
426	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
427	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  0x7F)  {  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
428	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
429	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
430	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
431	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
432	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
433	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
434	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
435	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
436	[BUG]  [BUGGY]  if(ch  ==  ']'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ']'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
437	[BUG]  [BUGGY]  if(ch  ==  ']'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ']'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
438	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(1);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
439	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(2);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(2);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(2);	  InputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
440	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.length);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.length);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(headers.size());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
441	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  'n')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
442	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
443	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
444	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
445	[BUG]  [BUGGY]  while((  ch  =  i.seek())  >=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.seek())  >=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.seek())  >=  -1)  {  read++;	  while((    ch    =    i.seek())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
446	[BUG]  [BUGGY]  While((  ch  =  i.seek())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  ch  =  i.seek())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  ch  =  i.seek())!=  -1)  {  read++;	  while((    ch    =    i.seek())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
447	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
448	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
449	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString()	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
450	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
451	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
452	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(remainders);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(remainders);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(remainders);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
453	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
454	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).addHeaders(headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).addHeaders(headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).addHeaders(headers);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
455	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  read  =  new  ByteArrayOutputStream();	  While((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
456	[BUG]  [BUGGY]  while((  ch  =  i.readFully(len))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.readFully(len))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.readFully(len))!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
457	[BUG]  [BUGGY]  while((  ch  =  headers.readFully(i))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  headers.readFully(i))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  headers.readFully(i))!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
458	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
459	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(!hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
460	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
461	[BUG]  [BUGGY]  if(ch!=  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '>')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
462	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '>')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  ==  '>')  {	  if(ch    ==    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
463	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
464	[BUG]  [BUGGY]  if(ch  <  =  'n'  ||  ch  >  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  'n'  ||  ch  >  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  'n'  ||  ch  >  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
465	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
466	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  >=  '@')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  >=  '@')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.'  ||  ch  >=  '@')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
467	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
468	[BUG]  [BUGGY]  whilst((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  whilst((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	whilst((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
469	[BUG]  [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
470	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '+')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if    (ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
471	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
472	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
473	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
474	[BUG]  [BUGGY]  if(ch  =='{  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  =='{  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  =='{  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '[')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
475	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  //  End  of  length  string  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  //  End  of  length  string  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  //  End  of  length  string	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
476	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  ']')  {	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
477	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  if(i.hasNext())  {  if(ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  if(i.hasNext())  {  if(ch  ==  ']')  {	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
478	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
479	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
480	[BUG]  [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
481	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
482	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  parsePaxHeaders(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  parsePaxHeaders(i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  parsePaxHeaders(i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
483	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
484	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  i.nextElement();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  i.nextElement();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  i.nextElement();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
485	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  '>')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  if(ch  ==  '>')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
486	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext()  ||  ch  ==  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext()  ||  ch  ==  'n')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
487	[BUG]  [BUGGY]  if(!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
488	[BUG]  [BUGGY]  if(!i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!i.hasNext())  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!i.hasNext())  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
489	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext()  ||  ch  ==  ']')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext()  ||  ch  ==  ']')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
490	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
491	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
492	[BUG]  [BUGGY]  InputStream  is  =  headers.get(headers.size()  -  1  +  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(headers.size()  -  1  +  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(headers.size()  -  1  +  read);	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
493	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
494	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>')break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>')break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '>')break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
495	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  =='<  ')  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  =='<  ')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  =='<  ')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
496	[BUG]  [BUGGY]  i.set(headers,  read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.set(headers,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.set(headers,  read);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
497	[BUG]  [BUGGY]  i.setValue(len);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.setValue(len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.setValue(len);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
498	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
499	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
500	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  headers.length);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
501	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
502	[BUG]  [BUGGY]  if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
503	[BUG]  [BUGGY]  if(read  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(read  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(read  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
504	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
505	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
506	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
507	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
508	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ','  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    ',')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
509	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.'  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    ',')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
510	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ','  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    ',')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
511	[BUG]  [BUGGY]  parsePaxHeaders(i,  headers.size());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i,  headers.size());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i,  headers.size());	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
512	[BUG]  [BUGGY]  parseTarHeaders(i);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parseTarHeaders(i);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parseTarHeaders(i);	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
513	[BUG]  [BUGGY]  parsePaxHeaders(headers,  i);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(headers,  i);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(headers,  i);	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
514	[BUG]  [BUGGY]  whilst((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  whilst((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	whilst((  i  =  i.read())!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  while((    i    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
515	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
516	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  parsePaxHeaders(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  parsePaxHeaders(i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  parsePaxHeaders(i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
517	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
518	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  IOUtils.readFully(i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
519	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  =='<  ')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  =='<  ')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  =='<  ')  {	  if(ch    ==    '.'    ||    ch    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
520	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
521	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
522	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
523	[BUG]  [BUGGY]  if(ch  <  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  '0'  &&  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
524	[BUG]  [BUGGY]  if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
525	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
526	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
527	[BUG]  [BUGGY]  if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  coll;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
528	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  return  coll;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  'r')  {  return  coll;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
529	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  return  coll;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  return  coll;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
530	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
531	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  >=  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
532	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
533	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
534	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
535	[BUG]  [BUGGY]  if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  i;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  i;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  i;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
536	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
537	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
538	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
539	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordPaxHeaders(headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordPaxHeaders(headers);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
540	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parseHeaders(headers);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parseHeaders(headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).parseHeaders(headers);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
541	[BUG]  [BUGGY]  whilst((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  whilst((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	whilst((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();	  whilst((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
542	[BUG]  [BUGGY]  if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
543	[BUG]  [BUGGY]  if(i!=  headers.length)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i!=  headers.length)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i!=  headers.length)  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
544	[BUG]  [BUGGY]  if(i  ==  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i  ==  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i  ==  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
545	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
546	[BUG]  [BUGGY]  if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(null  ==  ch  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(null  ==  ch  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(null  ==  ch  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
547	[BUG]  [BUGGY]  if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream()  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream()  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i!=  headers.size())  {  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream()	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
548	[BUG]  [BUGGY]  if(ch  ==  '0'  ||  ch  ==  '0')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '0'  ||  ch  ==  '0')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '0'  ||  ch  ==  '0')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
549	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
550	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
551	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
552	[BUG]  [BUGGY]  ||  ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'e'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
553	[BUG]  [BUGGY]  ||  ch  <  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  <  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  <  'r'  ||  ch  >  't')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
554	[BUG]  [BUGGY]  ||  ch  ==  'u')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'u')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'u')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
555	[BUG]  [BUGGY]  if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(read  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
556	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  ==  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
557	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  <  'n'  ||  ch  >  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
558	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
559	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  read  =  IOUtils.readFully(i,  headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	read  =  IOUtils.readFully(i,  headers);	  while((    ch    =    i.read())!=    -1)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
560	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
561	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  reader++;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  reader++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  reader++;	  while((    ch    =    i.read())    ==    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
562	[BUG]  [BUGGY]  While((  read  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  read  =  i.read())!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  read  =  i.read())!=  -1)  {  read++;	  While((    ch    =    i.read())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
563	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while((  ch  =  i.read())  ==  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
564	[BUG]  [BUGGY]  col  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  col  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	col  =  new  ByteArrayOutputStream();	  if(i.hasNext())    {    while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
565	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayInputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayInputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayInputStream();  }	  if(i.hasNext())    {    while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
566	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
567	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
568	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
569	[BUG]  [BUGGY]  InputStream  hasMoreElements  =  headers.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  hasMoreElements  =  headers.entrySet().iterator().next();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  hasMoreElements  =  headers.entrySet().iterator().next();	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
570	[BUG]  [BUGGY]  InputStream  hasMoreElements  =  headers.entrySet().iterator().hasNext();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  hasMoreElements  =  headers.entrySet().iterator().hasNext();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  hasMoreElements  =  headers.entrySet().iterator().hasNext();	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
571	[BUG]  [BUGGY]  InputStream  hasMoreElements  =  headers.get(i.getKey());  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  hasMoreElements  =  headers.get(i.getKey());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  hasMoreElements  =  headers.get(i.getKey());	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
572	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
573	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
574	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  ']')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
575	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ' "')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ' "')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ' "')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
576	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
577	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch!=  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch!=  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch!=  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
578	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  =='}  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
579	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
580	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset()  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset()  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset()	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
581	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.getElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
582	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  parsePaxHeaders(i.nextElement().getChar  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  parsePaxHeaders(i.nextElement().getChar  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  parsePaxHeaders(i.nextElement().getChar	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
583	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
584	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.read());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.read());	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
585	[BUG]  [BUGGY]  parsePaxHeaders(i.getAscii());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i.getAscii());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i.getAscii());	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
586	[BUG]  [BUGGY]  parsePaxHeaders(i.getResourceName());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parsePaxHeaders(i.getResourceName());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parsePaxHeaders(i.getResourceName());	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
587	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(i);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  parseAndIgnoreWhitespace(i);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	parseAndIgnoreWhitespace(i);	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
588	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
589	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
590	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
591	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
592	[BUG]  [BUGGY]  if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    i++)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
593	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '['  ||  ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
594	[BUG]  [BUGGY]  if(ch  ==  '@'  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@'  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '@'  ||  ch  ==  ':')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.'    ||    ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
595	[BUG]  [BUGGY]  int  len  =  headers.size()  +  i.read();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  int  len  =  headers.size()  +  i.read();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	int  len  =  headers.size()  +  i.read();	  int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
596	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
597	[BUG]  [BUGGY]  if(ch  ==  ']'  ||  ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']'  ||  ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ']'  ||  ch  ==  '[')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
598	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ' "')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ' "')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
599	[BUG]  [BUGGY]  if(ch  ==  ']'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ']'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ']')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
600	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
601	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
602	[BUG]  [BUGGY]  if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString());    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
603	[BUG]  [BUGGY]  byte[]  coll  =  new  byte[len];  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  byte[]  coll  =  new  byte[len];  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	byte[]  coll  =  new  byte[len];	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
604	[BUG]  [BUGGY]  if(ch  ==  '>'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '>'  ||  ch  =='<  ')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '>')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
605	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  0x7F)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
606	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
607	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '@')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '@')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '@')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if    (ch    ==    'n')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
608	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
609	[BUG]  [BUGGY]  while((  ch  =  i.readFully(i))!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.readFully(i))!=  -1)  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.readFully(i))!=  -1)  {  read++;  }	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
610	[BUG]  [BUGGY]  while((  ch  =  i.readFully(h))!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.readFully(h))!=  -1)  {  read++;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.readFully(h))!=  -1)  {  read++;	  while((    ch    =    IOUtils.readFully(i))!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
611	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
612	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
613	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
614	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().toString();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().toString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
615	[BUG]  [BUGGY]  InputStream  i  =  headers.get(ch.size()  -  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  i  =  headers.get(ch.size()  -  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  i  =  headers.get(ch.size()  -  1);	  InputStream    i    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
616	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
617	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
618	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
619	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  '.')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
620	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
621	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  1);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
622	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len);	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
623	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
624	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    ':')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
625	[BUG]  [BUGGY]  InputStream  is  =  headers.readIOF();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.readIOF();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.readIOF();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
626	[BUG]  [BUGGY]  InputStream  is  =  headers.readInt()  -  1;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.readInt()  -  1;  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.readInt()  -  1;	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
627	[BUG]  [BUGGY]  while((  ch  =  i.getCurrentSize())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.getCurrentSize())!=  -1)  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.getCurrentSize())!=  -1)  {  read++;  }	  while((    ch    =    i.getCurrentSize())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
628	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
629	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
630	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
631	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
632	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i));  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i));  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i));	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
633	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i.read()));  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i.read()));  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i.read()));	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
634	[BUG]  [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.seek())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
635	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  break;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
636	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
637	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  ']'  ||  ch  ==  '[')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    ']')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
638	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
639	[BUG]  [BUGGY]  if(headers.hasMoreElements())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.hasMoreElements())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.hasMoreElements())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
640	[BUG]  [BUGGY]  if(i.hasNext())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
641	[BUG]  [BUGGY]  if(headers.size()  <  =  len)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  <  =  len)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  <  =  len)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(i.hasMoreElements())    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
642	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
643	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
644	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayInputStream();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayInputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  coll  =  new  ByteArrayInputStream();	  while((    ch    =    i.read())    ==    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
645	[BUG]  [BUGGY]  read  =  IOUtils.readFully(i,  read);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  read  =  IOUtils.readFully(i,  read);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	read  =  IOUtils.readFully(i,  read);	  if(i.hasNext())    {    while((    ch    =    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
646	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
647	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
648	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(i.hasNext())    {    if(ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
649	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
650	[BUG]  [BUGGY]  if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
651	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
652	[BUG]  [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
653	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  if(i.hasMoreElements())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
654	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
655	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement().getCharset();  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement().getCharset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
656	[BUG]  [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  while((  ch  =  i.read())!=  -1)  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
657	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  '[')  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  '[')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '>'  ||  ch  ==  '[')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    '>')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
658	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
659	[BUG]  [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.get(ch));  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.get(ch));  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.get(ch));	  ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(headers.size());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
660	[BUG]  [BUGGY]  ||  ch  ==  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
661	[BUG]  [BUGGY]  &&  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  &&  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	&&  ch  ==  'r'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
662	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
663	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
664	[BUG]  [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length  ==  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
665	[BUG]  [BUGGY]  if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.length!=  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
666	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers[i]  =  headers[i.nextElement());  }	  if(i.hasMoreElements())    {    for(int    i    =    0;    i    <    headers.length;    ++i)    {    headers[i]    =    headers[i.nextElement());    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
667	[BUG]  [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.seek())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
668	[BUG]  [BUGGY]  While((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  While((  ch  =  i.read())!=  -1)  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	While((  ch  =  i.read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
669	[BUG]  [BUGGY]  if(ch  ==  '@'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '@'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
670	[BUG]  [BUGGY]  if(ch  ==  '@'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '@'  ||  ch  ==  'n')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '@')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
671	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.read  -  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.read  -  1);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.read  -  1);	  InputStream    is    =    headers.get(headers.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
672	[BUG]  [BUGGY]  if(ch  >  0x7F)  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >  0x7F)  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >  0x7F)  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
673	[BUG]  [BUGGY]  if(ch  <  =  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
674	[BUG]  [BUGGY]  if(ch  >  0x7FF)  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >  0x7FF)  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >  0x7FF)  {  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
675	[BUG]  [BUGGY]  if(ch  >  INT_9  ||  ch  <  INT_0)  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >  INT_9  ||  ch  <  INT_0)  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >  INT_9  ||  ch  <  INT_0)  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
676	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
677	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  continue;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
678	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.'  ||  ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
679	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    ==    '.')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
680	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.read());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.read());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.read());	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
681	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.references.size());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  InputStream  is  =  headers.get(i.references.size());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	InputStream  is  =  headers.get(i.references.size());	  InputStream    is    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
682	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
683	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext()  ||  ch  ==  'n'  ||  ch  ==  'r')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
684	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(i.read());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
685	[BUG]  [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(headers.size());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(headers.size());  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	IntegerArrayOutputStream  coll  =  new  IntegerArrayOutputStream(headers.size());	  IntegerArrayOutputStream    coll    =    new    IntegerArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
686	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  't'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
687	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  '0'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  '0'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  '0'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
688	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  len);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  len);	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
689	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  parsePaxHeaders(ch));  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  parsePaxHeaders(ch));  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	((  TarArchiveEntry  <  K,  V>)i).recordHeaders(headers,  parsePaxHeaders(ch));	  ((    TarArchiveEntry    <    K,    V>)i).recordHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
690	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  ':')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  '.'  ||  ch  ==  ':')  {	  if(ch    ==    '.'    ||    ch    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
691	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '[')  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '[')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '[')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
692	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ':')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ':')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
693	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
694	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  break;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
695	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
696	[BUG]  [BUGGY]  if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
697	[BUG]  [BUGGY]  ||  ch  ==  'u'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'u'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'u'  ||  ch  ==  't')  {  coll  =  new  ByteArrayOutputStream();  }	  ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
698	[BUG]  [BUGGY]  ||  ch  ==  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'a'  &&  ch  <  =  'z')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
699	[BUG]  [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  ||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	||  ch  ==  'n'  ||  ch  ==  'r')  {  coll  =  new  ByteArrayOutputStream();	  ||    ch    ==    'r'    ||    ch    ==    't')    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
700	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  if(ch  ==  '>')  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
701	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  if(ch  ==  ']')  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
702	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.read())!=  -1)  {  if(!i.hasNext())  {  coll  =  new  ByteArrayOutputStream();  }	  while((    ch    =    i.read())!=    -1)    {    if(i.hasNext())    {    if    (ch    ==    '')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
703	[BUG]  [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.seek())!=  -1)  {  read++;  }	  while((    ch    =    i.seek())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
704	[BUG]  [BUGGY]  while((  ch  =  i.next())!=  -1)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.next())!=  -1)  {  read++;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  ch  =  i.next())!=  -1)  {  read++;  }	  while((    ch    =    i.next())!=    -1)    {    read++;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
705	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    '')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
706	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(i.hasNext())    {    if(ch    ==    '')    {    //    End    of    length    string    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
707	[BUG]  [BUGGY]  i.set();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.set();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.set();	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
708	[BUG]  [BUGGY]  i.set(headers);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  i.set(headers);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	i.set(headers);	  i.reset();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
709	[BUG]  [BUGGY]  while((  i.isExported())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  i.isExported())!=  -1)  {  coll  =  new  ByteArrayOutputStream();  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	while((  i.isExported())!=  -1)  {  coll  =  new  ByteArrayOutputStream();	  while((    i.read())!=    -1)    {    coll    =    new    ByteArrayOutputStream();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
710	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  >=  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
711	[BUG]  [BUGGY]  if(ch  <  =  'n'  ||  ch  >=  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  'n'  ||  ch  >=  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  'n'  ||  ch  >=  'r'  ||  ch  >=  't')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    'n'    ||    ch    >    'r'    ||    ch    >=    't')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
712	[BUG]  [BUGGY]  read  =  parsePaxHeaders(i,  i);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  read  =  parsePaxHeaders(i,  i);  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	read  =  parsePaxHeaders(i,  i);	  while((    ch    =    i.read())!=    -1)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
713	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  >  0)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
714	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(!hasHitEOF)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
715	[BUG]  [BUGGY]  if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(headers.size()  ==  len)  {  if(ch  ==  'n'  ||  ch  ==  't')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n'    ||    ch    ==    't')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
716	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
717	[BUG]  [BUGGY]  if(ch  <  =  '0'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  '0'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  '0'  ||  ch  <  =  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
718	[BUG]  [BUGGY]  if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  >  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  >  '9')  {  coll  =  new  ByteArrayOutputStream();  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(ch  <  =  '0'  &&  ch  <  =  '9'  ||  ch  >  '9')  {  coll  =  new  ByteArrayOutputStream();  }	  if(ch    <    =    '0'    &&    ch    <    =    '9')    {    coll    =    new    ByteArrayOutputStream();    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
719	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '@')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '@')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  '@')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
720	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  ']')  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  ']')  {  return  headers;  }  [BUGGY]        ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  byte[]  rest  =  new  byte[restLen];  int  got  =  IOUtils.readFully(i,  rest);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	443	445	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  ']')  {  return  headers;  }	  if(i.hasNext())    {    if(ch    ==    'n')    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
