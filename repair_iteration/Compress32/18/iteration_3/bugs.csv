bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  hasHitEOF)  {	  while(i.hasMoreElements()    &&    isHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
2	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||  isHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||  isHitEOF)  {	  while(i.hasMoreElements()    &&    isHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
3	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.hasMoreElements()  &&  isHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.hasMoreElements()  &&  isHitEOF)  {	  while(i.hasMoreElements()    &&    isHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
4	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  containsHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  containsHitEOF)  {	  while(i.hasMoreElements()    &&    isHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
5	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  read  <  =  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  read  <  =  isHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  read  <  =  isHitEOF)  {	  while(i.hasMoreElements()    &&    isHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
6	[BUG]  [BUGGY]  while(i.hasNext()  &&  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isHitEOF)  {	  while(i.hasMoreElements()    &&    isHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
7	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  >>  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  >>  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  >>	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  >>  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  >>  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  >>	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  while(!i.read()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  ==  -1)  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
14	[BUG]  [BUGGY]  while(!i.read()  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  >=  -1)  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
15	[BUG]  [BUGGY]  while(!i.read()  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  >>  -1)  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
16	[BUG]  [BUGGY]  while(!i.read()  [Delete]  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  [Delete]  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  [Delete]  -1)  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
17	[BUG]  [BUGGY]  whil((  ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  whil((  ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whil((  ch  =  i.read())  ==  -1)  {	  whil((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  whil((  ch  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  whil((  ch  =  i.read())  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whil((  ch  =  i.read())  >=  -1)  {	  whil((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  while((  ch  =  i.nextToken())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.nextToken())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.nextToken())  ==  -1)  {	  while((    ch    =    i.nextToken())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
20	[BUG]  [BUGGY]  while(i.isEmpty()  ||!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||!headers.contains(ch))  {	  while(i.isEmpty()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
21	[BUG]  [BUGGY]  while(!headers.contains(ch)&&  i.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!headers.contains(ch)&&  i.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!headers.contains(ch)&&  i.isEmpty())  {	  while(i.isEmpty()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
22	[BUG]  [BUGGY]  while(!headers.isEmpty()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!headers.isEmpty()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!headers.isEmpty()  &&!headers.contains(ch))  {	  while(i.isEmpty()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
23	[BUG]  [BUGGY]  while(i.isEmpty()  &&!headers.contains(ch)||  headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&!headers.contains(ch)||  headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!headers.contains(ch)||  headers.contains(ch))  {	  while(i.isEmpty()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
24	[BUG]  [BUGGY]  whilst(i.isEmpty()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  whilst(i.isEmpty()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whilst(i.isEmpty()  &&!headers.contains(ch))  {	  while(i.isEmpty()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
25	[BUG]  [BUGGY]  while((  i  =  i.next())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i  =  i.next())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.next())!=  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
26	[BUG]  [BUGGY]  while((  i.next())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.next())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.next())!=  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
27	[BUG]  [BUGGY]  while((  i.hasNext())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.hasNext())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.hasNext())  ==  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
28	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(keyword,  restLen))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(keyword,  restLen))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.containsKey(keyword,  restLen))  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
29	[BUG]  [BUGGY]  while(i.isEmpty()  ||  headers.containsKey(keyword))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  headers.containsKey(keyword))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  headers.containsKey(keyword))  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
30	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.containsKey(ch))  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
31	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(keyword,  read))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(keyword,  read))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.containsKey(keyword,  read))  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
32	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  headers.containsKey(keyword))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  headers.containsKey(keyword))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  headers.containsKey(keyword))  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
33	[BUG]  [BUGGY]  while(i.hasNext()  &&  headers.containsKey(keyword))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  headers.containsKey(keyword))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  headers.containsKey(keyword))  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
34	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  0))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  ==  0))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
35	[BUG]  [BUGGY]  while(i.hasNext()  &&(i.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(i.read()  ==  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(i.read()  ==  -1))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
36	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()!=  0))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()!=  0))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()!=  0))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
37	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  >  -1))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  >  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  >  -1))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
38	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  while(i.hasNext()  ||!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||!remainders.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||!remainders.isEmpty())  {	  while(i.hasNext()    &&!remainders.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
44	[BUG]  [BUGGY]  while(i.hasNext()  ==  restLen  &&!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ==  restLen  &&!remainders.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ==  restLen  &&!remainders.isEmpty())  {	  while(i.hasNext()    &&!remainders.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
45	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
46	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
47	[BUG]  [BUGGY]  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
48	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
49	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( "  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( "  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( "	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
50	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKeyword()))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKeyword()))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.containsKey(i.getKeyword()))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
51	[BUG]  [BUGGY]  while(i.isEmpty()  &&!headers.containsKey(keyword))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&!headers.containsKey(keyword))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!headers.containsKey(keyword))  {	  while(i.isEmpty()    &&!headers.containsKey(ch))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
52	[BUG]  [BUGGY]  while(i.isEmpty()  ||!headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||!headers.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||!headers.containsKey(ch))  {	  while(i.isEmpty()    &&!headers.containsKey(ch))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
53	[BUG]  [BUGGY]  while(!headers.containsKey(ch)&&  i.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!headers.containsKey(ch)&&  i.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!headers.containsKey(ch)&&  i.isEmpty())  {	  while(i.isEmpty()    &&!headers.containsKey(ch))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
54	[BUG]  [BUGGY]  while(!headers.isEmpty()  &&!headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!headers.isEmpty()  &&!headers.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!headers.isEmpty()  &&!headers.containsKey(ch))  {	  while(i.isEmpty()    &&!headers.containsKey(ch))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
55	[BUG]  [BUGGY]  whilst(i.isEmpty()  &&!headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  whilst(i.isEmpty()  &&!headers.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whilst(i.isEmpty()  &&!headers.containsKey(ch))  {	  while(i.isEmpty()    &&!headers.containsKey(ch))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
56	[BUG]  [BUGGY]  while(i.hasNext()  ||!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||!headers.contains(ch))  {	  while(i.hasNext()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  whilst(i.hasNext()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  whilst(i.hasNext()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whilst(i.hasNext()  &&!headers.contains(ch))  {	  while(i.hasNext()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
58	[BUG]  [BUGGY]  while(i.hasNext()  &&!headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&!headers.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&!headers.containsKey(ch))  {	  while(i.hasNext()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
59	[BUG]  [BUGGY]  while((  ch  =  i.getCurrentSize())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getCurrentSize())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getCurrentSize())!=  -1)  {	  while((    ch    =    i.getCharacterEncoding())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
60	[BUG]  [BUGGY]  while((  ch  =  i.getCharacterEncoding())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getCharacterEncoding())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getCharacterEncoding())  ==  -1)  {	  while((    ch    =    i.getCharacterEncoding())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
61	[BUG]  [BUGGY]  while(i.isEmpty()  ||  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  i.hasMoreElements())  {	  while(i.isEmpty()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
62	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  i.hasMoreElements())  {	  while(i.isEmpty()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
63	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.hasMoreElements())  {	  while(i.isEmpty()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
64	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  coll.hasMoreElements())  {	  while(i.isEmpty()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
65	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  i.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  i.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  i.isEmpty())  {	  while(i.isEmpty()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
66	[BUG]  [BUGGY]  while(i.isEmpty()  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  i.hasNext())  {	  while(i.isEmpty()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
67	[BUG]  [BUGGY]  while(i.next()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.next()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.next()  ==  -1)  {	  while(i.read()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
68	[BUG]  [BUGGY]  while(i.read()!=  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.read()!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.read()!=  0)  {	  while(i.read()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
69	[BUG]  [BUGGY]  while(!i.read()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
70	[BUG]  [BUGGY]  while(!i.read()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  &&!headers.isEmpty())  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
71	[BUG]  [BUGGY]  while(!i.read()  &&!remainders.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  &&!remainders.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  &&!remainders.contains(ch))  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
72	[BUG]  [BUGGY]  while(!i.read()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
73	[BUG]  [BUGGY]  while(!i.read()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  &&!headers.contains(ch))  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
74	[BUG]  [BUGGY]  while(!i.read()  &&  restLen  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  &&  restLen  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  &&  restLen  >  0)  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
75	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
76	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
77	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
78	[BUG]  [BUGGY]  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
79	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
80	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
81	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||!headers.isEmpty())  {	  while(i.hasMoreElements()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
82	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&!remainders.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&!remainders.isEmpty())  {	  while(i.hasMoreElements()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
83	[BUG]  [BUGGY]  While(i.hasMoreElements()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  While(i.hasMoreElements()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	While(i.hasMoreElements()  &&!headers.isEmpty())  {	  while(i.hasMoreElements()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
84	[BUG]  [BUGGY]  while(headers.hasMoreElements()  &&!i.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  &&!i.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  &&!i.isEmpty())  {	  while(i.hasMoreElements()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
85	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.hasMoreElements()  &&  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.hasMoreElements()  &&  i.hasMoreElements())  {	  while(i.hasMoreElements()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
86	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  coll.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  coll.hasMoreElements())  {	  while(i.hasMoreElements()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
87	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  i.nextElement())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  i.nextElement())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  i.nextElement())  {	  while(i.hasMoreElements()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
88	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&!i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&!i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&!i.hasMoreElements())  {	  while(i.hasMoreElements()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
89	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  headers.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  headers.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  headers.hasMoreElements())  {	  while(i.hasMoreElements()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
90	[BUG]  [BUGGY]  while(i.hasNext()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
91	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
92	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
93	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.length))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.length))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.length))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
94	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
95	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.size()))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.size()))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.size()))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
97	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
98	[BUG]  [BUGGY]  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
99	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.contains(ch))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
100	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
101	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
102	[BUG]  [BUGGY]  while(i.isEmpty()  ||!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||!headers.isEmpty())  {	  while(i.isEmpty()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
103	[BUG]  [BUGGY]  while(!headers.isEmpty()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!headers.isEmpty()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!headers.isEmpty()  &&!headers.isEmpty())  {	  while(i.isEmpty()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
104	[BUG]  [BUGGY]  while(i.isEmpty()  &&!headers.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&!headers.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!headers.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isEmpty()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
105	[BUG]  [BUGGY]  while(i.isEmpty()  &&!headers.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&!headers.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!headers.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.isEmpty()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
106	[BUG]  [BUGGY]  while(i.isEmpty()  &&!headers.isEmpty()  &&!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&!headers.isEmpty()  &&!remainders.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!headers.isEmpty()  &&!remainders.isEmpty())  {	  while(i.isEmpty()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
107	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(ch  <  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  <  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
108	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  ==  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(ch  ==  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  ==  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
109	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(ch  <  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  <  =  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
110	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE))  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
111	[BUG]  [BUGGY]  while(i.hasNext()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
112	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
113	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
114	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
115	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
116	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
117	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
118	[BUG]  [BUGGY]  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
119	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
120	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
121	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
122	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
123	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  while(i.hasMoreElements()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
124	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasMoreElements()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
125	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  while(i.hasMoreElements()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
126	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {	  while(i.hasMoreElements()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
127	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {	  while(i.hasMoreElements()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
128	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers.size()))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers.size()))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers.size()))  {	  while(i.hasMoreElements()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
129	[BUG]  [BUGGY]  while((  ch  =  i.recordSize())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.recordSize())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.recordSize())!=  -1)  {	  while((    ch    =    i.getKey())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
130	[BUG]  [BUGGY]  while((  ch  =  i.getKey())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getKey())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getKey())  ==  -1)  {	  while((    ch    =    i.getKey())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
131	[BUG]  [BUGGY]  while((  restLen  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  restLen  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  restLen  =  i.read())!=  -1)  {	  while((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
132	[BUG]  [BUGGY]  while((  len  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  len  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  len  =  i.read())!=  -1)  {	  while((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
133	[BUG]  [BUGGY]  while(i.isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
134	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
135	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers))  {	  while(i.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
136	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  restLen))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  restLen))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  restLen))  {	  while(i.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
137	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {	  while(i.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
138	[BUG]  [BUGGY]  while((  i  =  i.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i  =  i.get())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.get())!=  -1)  {	  while((    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
139	[BUG]  [BUGGY]  while((  i.get())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.get())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.get())  ==  -1)  {	  while((    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
140	[BUG]  [BUGGY]  while((  ch  =  i.seek())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.seek())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.seek())  ==  -1)  {	  while((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
141	[BUG]  [BUGGY]  while((  ch  =  i.seek())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.seek())  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.seek())  >=  -1)  {	  while((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
142	[BUG]  [BUGGY]  whil((  ch  =  i.seek())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  whil((  ch  =  i.seek())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whil((  ch  =  i.seek())!=  -1)  {	  while((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
143	[BUG]  [BUGGY]  while((  ch  =  i.read())  >>  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.read())  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.read())  >>  -1)  {	  while((    ch    =    i.read())    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
144	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
145	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
146	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
147	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
148	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  1)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  1)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  1)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
149	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
150	[BUG]  [BUGGY]  while(i.hasNext()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ==  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
151	[BUG]  [BUGGY]  while(i.next()!=  null  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.next()!=  null  &&  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.next()!=  null  &&  i.hasNext())  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
152	[BUG]  [BUGGY]  while(i.next()!=  null  &&  restLen!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.next()!=  null  &&  restLen!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.next()!=  null  &&  restLen!=  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
153	[BUG]  [BUGGY]  while(i.hasNext()  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  >=  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
154	[BUG]  [BUGGY]  while((  ch  =  i.in())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.in())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.in())!=  -1)  {	  while((    i.in())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
155	[BUG]  [BUGGY]  while((  i  =  i.in())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i  =  i.in())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.in())!=  -1)  {	  while((    i.in())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
156	[BUG]  [BUGGY]  while((  i.in())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.in())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.in())  ==  -1)  {	  while((    i.in())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
157	[BUG]  [BUGGY]  while((  i.in())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.in())  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.in())  >=  -1)  {	  while((    i.in())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
158	[BUG]  [BUGGY]  while(i.hasNext()  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
159	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
160	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  true))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  true))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  true))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
161	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  restLen))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  restLen))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  restLen))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
162	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.CLUSH_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.CLUSH_PASSED_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.CLUSH_PASSED_TO_STREAM))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
163	[BUG]  [BUGGY]  while((  ch  =  i.available())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.available())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.available())!=  -1)  {	  while((    i.available())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
164	[BUG]  [BUGGY]  while((  i  =  i.available())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i  =  i.available())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.available())!=  -1)  {	  while((    i.available())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
165	[BUG]  [BUGGY]  while((  i.available())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.available())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.available())  ==  -1)  {	  while((    i.available())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
166	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||!i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||!i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||!i.hasMoreElements())  {	  while(i.hasMoreElements()    ||    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
167	[BUG]  [BUGGY]  while(!i.hasMoreElements()  ||  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.hasMoreElements()  ||  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.hasMoreElements()  ||  i.hasMoreElements())  {	  while(i.hasMoreElements()    ||    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
168	[BUG]  [BUGGY]  InputStream  is  =  headers.readFully(i);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers.readFully(i);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers.readFully(i);	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
169	[BUG]  [BUGGY]  InputStream  is  =  headers.readUTF();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers.readUTF();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers.readUTF();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
170	[BUG]  [BUGGY]  InputStream  is  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  i.readInt();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  i.readInt();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
171	[BUG]  [BUGGY]  InputStream  is  =  headers.readFully();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers.readFully();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers.readFully();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
172	[BUG]  [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers!=  null?  headers.readInt()  :  i;	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
173	[BUG]  [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers!=  null?  headers.readInt()  :  i.inputStream();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
174	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  i.size());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  i.size());  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  i.size());	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
175	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  coll.size());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  coll.size());  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  coll.size());	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
176	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  -  1);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  -  1);	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
177	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  0,  len.size());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  0,  len.size());  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  0,  len.size());	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
178	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  col.size());  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  col.size());  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  col.size());	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
179	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  parsePaxHeaders(i.read()));  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  parsePaxHeaders(i.read()));  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  parsePaxHeaders(i.read()));	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
180	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  parsePaxHeaders(i));  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  parsePaxHeaders(i));  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers,  parsePaxHeaders(i));	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
181	[BUG]  [BUGGY]  while((  ch  =  i.remaining())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.remaining())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.remaining())  ==  -1)  {	  while((    ch    =    i.remaining())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
182	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i!=  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i!=  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i!=  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch!=    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
183	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  ch)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  ch)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  ch)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
184	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  =  ch)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  =  ch)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  =  ch)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
185	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  <  ch.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i  <  ch.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i  <  ch.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
186	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
187	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
188	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
189	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
190	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
191	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
192	[BUG]  [BUGGY]  while(!i.isEmpty()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&!headers.isEmpty())  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
193	[BUG]  [BUGGY]  while(!i.isEmpty()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&!headers.contains(ch))  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
194	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  headers.contains(ch))  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
195	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
196	[BUG]  [BUGGY]  while(!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!headers.isEmpty())  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
197	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
198	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
199	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
200	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
201	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
202	[BUG]  [BUGGY]  while(i.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
203	[BUG]  [BUGGY]  while(i.isClosed()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&!headers.contains(ch))  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
204	[BUG]  [BUGGY]  while(!i.isClosed())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isClosed())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isClosed())  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
205	[BUG]  [BUGGY]  while(i.isClosed()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  i.hasMoreElements())  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
206	[BUG]  [BUGGY]  while(i.isClosed()  &&  restLen!=  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  restLen!=  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  restLen!=  0)  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
207	[BUG]  [BUGGY]  while(i.isClosed()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&!headers.isEmpty())  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
208	[BUG]  [BUGGY]  while(i.isClosed()  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  i.hasNext())  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
209	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  ==  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(ch  ==  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(ch  ==  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
210	[BUG]  [BUGGY]  while(i!=  null  &&  hasHitEOF  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&  hasHitEOF  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&  hasHitEOF  &&(ch  =  i.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
211	[BUG]  [BUGGY]  while(i  ==  null  &&!hasHitEOF  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i  ==  null  &&!hasHitEOF  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i  ==  null  &&!hasHitEOF  &&(ch  =  i.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
212	[BUG]  [BUGGY]  while(i!=  null  &&  isEOF  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&  isEOF  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&  isEOF  &&(ch  =  i.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
213	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
214	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
215	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
216	[BUG]  [BUGGY]  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
217	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
218	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  header  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  header  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  header	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
219	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  headers.size()  >  1)  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
220	[BUG]  [BUGGY]  while(headers.hasMoreElements()  &&  i.hasMoreElements()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  &&  i.hasMoreElements()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  &&  i.hasMoreElements()  >  0)  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
221	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  headers.size()  ==  0)  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
222	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  headers.size()  <  =  0)  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
223	[BUG]  [BUGGY]  while(!i.hasMoreElements()  &&  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.hasMoreElements()  &&  headers.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.hasMoreElements()  &&  headers.size()  >  0)  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
224	[BUG]  [BUGGY]  int  restLen  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  restLen  =  headers.size()  -  1;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.size()  -  1;	  int    restLen    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
225	[BUG]  [BUGGY]  int  restLen  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  restLen  =  headers.size()  -  2;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.size()  -  2;	  int    restLen    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
226	[BUG]  [BUGGY]  int  restLen  =  headers.size()  +  read;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  restLen  =  headers.size()  +  read;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.size()  +  read;	  int    restLen    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
227	[BUG]  [BUGGY]  int  restLen  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  restLen  =  headers.size()  -  4;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.size()  -  4;	  int    restLen    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
228	[BUG]  [BUGGY]  int  restLen  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  restLen  =  headers.size()  +  1;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.size()  +  1;	  int    restLen    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
229	[BUG]  [BUGGY]  int  restLen  =  headers.size()  -  read;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  restLen  =  headers.size()  -  read;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.size()  -  read;	  int    restLen    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
230	[BUG]  [BUGGY]  while((  ch  =  i.getLength())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getLength())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getLength())!=  -1)  {	  while((    ch    =    i.getSize())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
231	[BUG]  [BUGGY]  while(i.isEmpty()  ||  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  coll.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
232	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  coll.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
233	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
234	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
235	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  coll.isEmpty()  &&  hasHitEOF)  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
236	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  coll.isEmpty()  >  0)  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
237	[BUG]  [BUGGY]  while((  i.isExtern())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.isExtern())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.isExtern())!=  -1)  {	  while((    i.isExported())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
238	[BUG]  [BUGGY]  while((  i  =  i.isExported())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i  =  i.isExported())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.isExported())!=  -1)  {	  while((    i.isExported())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
239	[BUG]  [BUGGY]  while((  i.isExported())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.isExported())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.isExported())  ==  -1)  {	  while((    i.isExported())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
240	[BUG]  [BUGGY]  while((  i.isAssigned())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.isAssigned())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.isAssigned())!=  -1)  {	  while((    i.isExported())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
241	[BUG]  [BUGGY]  while((  ch  =  i.cfg())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.cfg())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.cfg())!=  -1)  {	  while((    ch    =    i.currentToken())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
242	[BUG]  [BUGGY]  while(i.hasNext()!=  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
243	[BUG]  [BUGGY]  while(i.hasNext()!=  len  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  len  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  len  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
244	[BUG]  [BUGGY]  while(i.hasNext()!=  restLen  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  restLen  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  restLen  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
245	[BUG]  [BUGGY]  while(i.hasNext()  [Delete]  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  [Delete]  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  [Delete]  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
246	[BUG]  [BUGGY]  while(i.hasNext()!=  ch  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  ch  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  ch  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
247	[BUG]  [BUGGY]  while(i.hasNext()!=  ch  &&(i.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  ch  &&(i.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  ch  &&(i.read()!=  -1))  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
248	[BUG]  [BUGGY]  while(i.hasNext()!=  ch  &&(i.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  ch  &&(i.read()  ==  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  ch  &&(i.read()  ==  -1))  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
249	[BUG]  [BUGGY]  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
250	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
251	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.get  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.get  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
252	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
253	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
254	[BUG]  [BUGGY]  while(i.isEmpty()  ||  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  headers.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  headers.size()  >  0)  {	  while(i.isEmpty()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
255	[BUG]  [BUGGY]  while(headers.isEmpty()  &&  i.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.isEmpty()  &&  i.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.isEmpty()  &&  i.size()  >  0)  {	  while(i.isEmpty()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
256	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  headers.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  headers.size()  >  0)  {	  while(i.isEmpty()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
257	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.size()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.size()  >  1)  {	  while(i.isEmpty()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
258	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.size()  ==  0)  {	  while(i.isEmpty()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
259	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.size()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.size()  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.size()  <  =  0)  {	  while(i.isEmpty()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
260	[BUG]  [BUGGY]  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
261	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
262	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
263	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
264	[BUG]  [BUGGY]  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
265	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
266	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  read);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
267	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  ch);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  ch);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  ch);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
268	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  len);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  len);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  len);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
269	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i));  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i));  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  parsePaxHeaders(i));	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
270	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  restLen);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  restLen);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  restLen);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
271	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  length);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  length);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  length);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
272	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  currEntry);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  currEntry);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
273	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  read);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  read);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
274	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  ch);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  ch);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  ch);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
275	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i));  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i));  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  parsePaxHeaders(i));	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
276	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  restLen);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  restLen);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  restLen);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
277	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  len);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  len);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  len);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
278	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  length);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  length);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  length);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
279	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  currEntry);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  currEntry);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
280	[BUG]  [BUGGY]  while(i.isEmpty()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  isEnabled(TarArchiveEntry.class))  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
281	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers))  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
282	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers.length))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers.length))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers.length))  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
283	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  isEnabled(TarArchiveEntry.class))  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
284	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers.size()))  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers.size()))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  headers.size()))  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
285	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class,  true))  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
286	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.SOURCE))  {  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.SOURCE))  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
287	[BUG]  [BUGGY]  while(headers.hasMoreElements()  ||  i.hasMoreElements()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  ||  i.hasMoreElements()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  ||  i.hasMoreElements()  >  0)  {	  while(i.hasMoreElements()    ||    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
288	[BUG]  [BUGGY]  while(headers.size()  >  0  ||  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.size()  >  0  ||  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.size()  >  0  ||  i.hasMoreElements())  {	  while(i.hasMoreElements()    ||    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
289	[BUG]  [BUGGY]  while(headers.hasMoreElements()  ||  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  ||  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  ||  i.hasMoreElements())  {	  while(i.hasMoreElements()    ||    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
290	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  headers.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||  headers.size()  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||  headers.size()  ==  0)  {	  while(i.hasMoreElements()    ||    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
291	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  headers.size()  >  1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||  headers.size()  >  1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||  headers.size()  >  1)  {	  while(i.hasMoreElements()    ||    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
292	[BUG]  [BUGGY]  while(i.hasNext()  ||  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||  i.hasNext())  {	  while(i.hasNext()    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
293	[BUG]  [BUGGY]  while(i.hasNext()  &&  i.next())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  i.next())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  i.next())  {	  while(i.hasNext()    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
294	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
295	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
296	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
297	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
298	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
299	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  }  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
300	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
301	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
302	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
303	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
304	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
305	[BUG]  [BUGGY]  while((  ch  =  i.getValue())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getValue())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getValue())  ==  -1)  {	  while((    ch    =    i.getValue())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
306	[BUG]  [BUGGY]  while(i.isEmpty()  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  while(i.isEmpty()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
307	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers))  {	  while(i.isEmpty()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
308	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  while(i.isEmpty()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
309	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  true))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  true))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  true))  {	  while(i.isEmpty()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
310	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers.length))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers.length))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM,  headers.length))  {	  while(i.isEmpty()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
311	[BUG]  [BUGGY]  while(!hasHitEOF  &&(remainders.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(remainders.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(remainders.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
312	[BUG]  [BUGGY]  while(i.hasNext()  &&(i.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(i.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(i.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
313	[BUG]  [BUGGY]  while(!hasHitEOF  &&(remainingLen!=  -1))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(remainingLen!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(remainingLen!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
314	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(i);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(i);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(i);	  ((    TarArchiveEntry    <    K,    V>)i).reset();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
315	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).headers.reset();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).headers.reset();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).headers.reset();	  ((    TarArchiveEntry    <    K,    V>)i).reset();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
316	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers);	  ((    TarArchiveEntry    <    K,    V>)i).reset();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
317	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers);	  ((    TarArchiveEntry    <    K,    V>)i).reset();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
318	[BUG]  [BUGGY]  while((  ch  =  i.getInput())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getInput())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getInput())!=  -1)  {	  while((    ch    =    i.getOpen())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
319	[BUG]  [BUGGY]  while((  ch  =  i.getExtern())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getExtern())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getExtern())!=  -1)  {	  while((    ch    =    i.getOpen())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
320	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
321	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  restLen)!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  restLen)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  restLen)!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
322	[BUG]  [BUGGY]  while(!hasHitEOF  &&(remainingLen  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(remainingLen  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(remainingLen  <  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
323	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  ==  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
324	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  SMALL_BUFFER_SIZE)  >>  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
325	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(ch  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(ch  <  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
326	[BUG]  [BUGGY]  while(i.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
327	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
328	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
329	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
330	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
331	[BUG]  [BUGGY]  While((  ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  While((  ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	While((  ch  =  i.read())  ==  -1)  {	  While((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
332	[BUG]  [BUGGY]  while(i.get()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.get()  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.get()  ==  -1)  {	  while(i.get()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
333	[BUG]  [BUGGY]  while(i.get()  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.get()  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.get()  >=  -1)  {	  while(i.get()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
334	[BUG]  [BUGGY]  while(i.get()!=  -1  &&  restLen!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.get()!=  -1  &&  restLen!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.get()!=  -1  &&  restLen!=  -1)  {	  while(i.get()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
335	[BUG]  [BUGGY]  while(i.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
336	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.length))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.length))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.length))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
337	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
338	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
339	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
340	[BUG]  [BUGGY]  while(i.hasNext()  ||!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||!headers.isEmpty())  {	  while(i.hasNext()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
341	[BUG]  [BUGGY]  whilst(i.hasNext()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  whilst(i.hasNext()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whilst(i.hasNext()  &&!headers.isEmpty())  {	  while(i.hasNext()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
342	[BUG]  [BUGGY]  while(i.hasNext()  ==  headers.size()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ==  headers.size()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ==  headers.size()  &&!headers.isEmpty())  {	  while(i.hasNext()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
343	[BUG]  [BUGGY]  while((  ch  =  i.getChronology())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getChronology())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getChronology())!=  -1)  {	  while((    ch    =    i.getRead())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
344	[BUG]  [BUGGY]  while(i.read()  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.read()  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.read()  >>  -1)  {	  while(i.read()    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
345	[BUG]  [BUGGY]  while(i.read()  >  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.read()  >  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.read()  >  -1)  {	  while(i.read()    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
346	[BUG]  [BUGGY]  while((  ch  =  i.getCurrent())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getCurrent())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getCurrent())  ==  -1)  {	  while((    ch    =    i.getCurrent())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
347	[BUG]  [BUGGY]  while((  ch  =  i.get())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.get())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.get())  ==  -1)  {	  while((    ch    =    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
348	[BUG]  [BUGGY]  while((  ch  =  i.record())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.record())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.record())!=  -1)  {	  while((    ch    =    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
349	[BUG]  [BUGGY]  whil((  ch  =  i.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  whil((  ch  =  i.get())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whil((  ch  =  i.get())!=  -1)  {	  while((    ch    =    i.get())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
350	[BUG]  [BUGGY]  while(i.hasNext()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.hasNext()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
351	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  restLen))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  restLen))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  restLen))  {	  while(i.hasNext()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
352	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.hasNext()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
353	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers))  {	  while(i.hasNext()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
354	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.hasNext()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
355	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  read))  {	  while(i.hasNext()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
356	[BUG]  [BUGGY]  while(i.hasNext()  ||!remainders.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||!remainders.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||!remainders.contains(ch))  {	  while(i.hasNext()    &&!remainders.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
357	[BUG]  [BUGGY]  while(i.hasNext()  <  len  &&!remainders.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  <  len  &&!remainders.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  <  len  &&!remainders.contains(ch))  {	  while(i.hasNext()    &&!remainders.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
358	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&!headers.contains(ch)||  headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&!headers.contains(ch)||  headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&!headers.contains(ch)||  headers.contains(ch))  {	  while(i.hasMoreElements()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
359	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&!headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&!headers.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&!headers.containsKey(ch))  {	  while(i.hasMoreElements()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
360	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||!headers.contains(ch))  {	  while(i.hasMoreElements()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
361	[BUG]  [BUGGY]  while(!headers.contains(ch)&&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!headers.contains(ch)&&  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!headers.contains(ch)&&  i.hasMoreElements())  {	  while(i.hasMoreElements()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
362	[BUG]  [BUGGY]  int  n  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  n  =  headers.size()  -  1;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  n  =  headers.size()  -  1;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
363	[BUG]  [BUGGY]  int  n  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  n  =  headers.size()  +  1;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  n  =  headers.size()  +  1;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
364	[BUG]  [BUGGY]  int  n  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  n  =  headers.size()  -  2;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  n  =  headers.size()  -  2;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
365	[BUG]  [BUGGY]  int  n  =  headers.size()  +  read;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  n  =  headers.size()  +  read;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  n  =  headers.size()  +  read;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
366	[BUG]  [BUGGY]  int  n  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  n  =  headers.size()  -  4;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  n  =  headers.size()  -  4;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
367	[BUG]  [BUGGY]  while((  i  =  i.getClosed())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i  =  i.getClosed())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.getClosed())!=  -1)  {	  while((    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
368	[BUG]  [BUGGY]  while((  i.getSize())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.getSize())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.getSize())!=  -1)  {	  while((    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
369	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  >>  -1))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  >>  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  >>  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
370	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  [Delete]  -1))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  [Delete]  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  [Delete]  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
371	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  >=  0))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  >=  0))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  >=  0))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
372	[BUG]  [BUGGY]  while(i.hasNext()!=  null  &&  i.hasNext()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  null  &&  i.hasNext()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  null  &&  i.hasNext()!=  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
373	[BUG]  [BUGGY]  while(i.hasNext()!=  null  &&  i.next()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  null  &&  i.next()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  null  &&  i.next()!=  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
374	[BUG]  [BUGGY]  while(i.hasNext()  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  >>  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
375	[BUG]  [BUGGY]  while((  ch  =  i.getUpperClosed())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getUpperClosed())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getUpperClosed())!=  -1)  {	  while((    ch    =    i.getLowerClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
376	[BUG]  [BUGGY]  while((  ch  =  i.getLastClosed())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getLastClosed())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getLastClosed())!=  -1)  {	  while((    ch    =    i.getLowerClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
377	[BUG]  [BUGGY]  while((  ch  =  i.getBlockSize())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getBlockSize())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getBlockSize())!=  -1)  {	  while((    ch    =    i.getLowerClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
378	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  =  coll.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i  =  coll.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i  =  coll.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
379	[BUG]  [BUGGY]  while(!hasHitEOF  &&(remainingLen  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(remainingLen  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(remainingLen  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
380	[BUG]  [BUGGY]  while(i.hasNext()  &&(i  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(i  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(i  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
381	[BUG]  [BUGGY]  while(i  ==  null  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i  ==  null  &&  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i  ==  null  &&  i.hasNext())  {	  while(i!=    null    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
382	[BUG]  [BUGGY]  while(i!=  null  &&  i.next())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&  i.next())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&  i.next())  {	  while(i!=    null    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
383	[BUG]  [BUGGY]  while(i  >=  null  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i  >=  null  &&  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i  >=  null  &&  i.hasNext())  {	  while(i!=    null    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
384	[BUG]  [BUGGY]  while(i!=  null  &&!i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!i.hasNext())  {	  while(i!=    null    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
385	[BUG]  [BUGGY]  while(i!=  null  ||  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  ||  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  ||  i.hasNext())  {	  while(i!=    null    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
386	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
387	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
388	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
389	[BUG]  [BUGGY]  while((  ch  =  i.getCurrentName())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getCurrentName())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getCurrentName())!=  -1)  {	  while((    ch    =    i.getCharacterEncoding())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
390	[BUG]  [BUGGY]  while((  ch  =  i.getTarEncoding())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getTarEncoding())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getTarEncoding())!=  -1)  {	  while((    ch    =    i.getCharacterEncoding())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
391	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {	  while(i.hasNext()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
392	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasHitEOF)  {	  while(i.hasNext()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
393	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!hasHitEOF  &&(i  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
394	[BUG]  [BUGGY]  while(i!=  hasHitEOF  &&(i  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  hasHitEOF  &&(i  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  hasHitEOF  &&(i  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
395	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i  =  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
396	[BUG]  [BUGGY]  while(!hasHitEOF  &&(read  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(read  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(read  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
397	[BUG]  [BUGGY]  while(!readEOF  &&(i  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!readEOF  &&(i  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!readEOF  &&(i  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
398	[BUG]  [BUGGY]  while(!isEOF  &&(i  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!isEOF  &&(i  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!isEOF  &&(i  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
399	[BUG]  [BUGGY]  InputStream  is  =  headers.readObject();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers.readObject();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers.readObject();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
400	[BUG]  [BUGGY]  InputStream  is  =  headers.readInt()  -  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers.readInt()  -  1;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers.readInt()  -  1;	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
401	[BUG]  [BUGGY]  while(remainders.hasNext()  &&!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(remainders.hasNext()  &&!remainders.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(remainders.hasNext()  &&!remainders.isEmpty())  {	  while(i.hasNext()    &&!remainders.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
402	[BUG]  [BUGGY]  While(i.hasNext()  &&!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  While(i.hasNext()  &&!remainders.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	While(i.hasNext()  &&!remainders.isEmpty())  {	  while(i.hasNext()    &&!remainders.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
403	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
404	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(keyword))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(keyword))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.containsKey(keyword))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
405	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
406	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  0)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  0)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  0)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
407	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
408	[BUG]  [BUGGY]  while(!i.read().isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read().isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read().isEmpty())  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
409	[BUG]  [BUGGY]  while(!i.read().endsWith( ".java "))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read().endsWith( ".java "))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read().endsWith( ".java "))  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
410	[BUG]  [BUGGY]  while(!i.read().equals(headers.length))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read().equals(headers.length))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read().equals(headers.length))  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
411	[BUG]  [BUGGY]  while(!i.read().endsWith(headers.size()))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read().endsWith(headers.size()))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read().endsWith(headers.size()))  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
412	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers,  i);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers,  i);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).parsePaxHeaders(headers,  i);	  ((    TarArchiveEntry    <    K,    V>)i).reset();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
413	[BUG]  [BUGGY]  while((  read  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  read  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  read  =  i.read())  ==  -1)  {	  while((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
414	[BUG]  [BUGGY]  while((  read  =  i.read(ch))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  read  =  i.read(ch))!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  read  =  i.read(ch))!=  -1)  {	  while((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
415	[BUG]  [BUGGY]  while((  read  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  read  =  i.read())  >=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  read  =  i.read())  >=  -1)  {	  while((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
416	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {	  while(i.isEmpty()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
417	[BUG]  [BUGGY]  while((  i.isRead())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.isRead())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.isRead())!=  -1)  {	  while((    i.isExported())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
418	[BUG]  [BUGGY]  while((  i.isDirectory())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.isDirectory())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.isDirectory())!=  -1)  {	  while((    i.isExported())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
419	[BUG]  [BUGGY]  while(i.next()!=  null)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.next()!=  null)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.next()!=  null)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
420	[BUG]  [BUGGY]  while(i.getNext()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.getNext()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.getNext()!=  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
421	[BUG]  [BUGGY]  while(headers.isEmpty()  &&!headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.isEmpty()  &&!headers.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.isEmpty()  &&!headers.containsKey(ch))  {	  while(i.isEmpty()    &&!headers.containsKey(ch))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
422	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.WRITE_PASSED_TO_STREAM))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
423	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  read!=  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  read!=  isHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  read!=  isHitEOF)  {	  while(i.hasMoreElements()    &&    isHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
424	[BUG]  [BUGGY]  while(headers.isEmpty()  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.isEmpty()  &&  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.isEmpty()  &&  i.hasNext())  {	  while(i.isEmpty()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
425	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
426	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(TarArchiveEntry.class))  {	  while(i.isEmpty()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
427	[BUG]  [BUGGY]  while((  ch  =  i.getClose())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getClose())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getClose())!=  -1)  {	  while((    ch    =    i.getOpen())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
428	[BUG]  [BUGGY]  while(i!=  headers.size()  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  headers.size()  &&  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  headers.size()  &&  i.hasNext())  {	  while(i!=    null    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
429	[BUG]  [BUGGY]  while(headers.hasNext()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasNext()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasNext()  &&!headers.isEmpty())  {	  while(i.hasNext()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
430	[BUG]  [BUGGY]  While(i.hasNext()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  While(i.hasNext()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	While(i.hasNext()  &&!headers.isEmpty())  {	  while(i.hasNext()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
431	[BUG]  [BUGGY]  while(headers.isEmpty()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.isEmpty()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.isEmpty()  &&!headers.contains(ch))  {	  while(i.isEmpty()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
432	[BUG]  [BUGGY]  while(headers.hasNext()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasNext()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasNext()  &&!headers.contains(ch))  {	  while(i.hasNext()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
433	[BUG]  [BUGGY]  while(i.isClosed()  &&  restLen  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  restLen  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  restLen  >  0)  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
434	[BUG]  [BUGGY]  while(i.isClosed()  &&  restLen  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  restLen  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  restLen  >=  0)  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
435	[BUG]  [BUGGY]  while(i.isClosed()  &&  restLen  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  restLen  ==  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  restLen  ==  0)  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
436	[BUG]  [BUGGY]  while(i.isClosed()  &&  restLen  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  restLen  <  =  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  restLen  <  =  0)  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
437	[BUG]  [BUGGY]  while(headers.isEmpty()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.isEmpty()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.isEmpty()  &&!headers.isEmpty())  {	  while(i.isEmpty()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
438	[BUG]  [BUGGY]  while(i.isEmpty()  &&!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&!remainders.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!remainders.isEmpty())  {	  while(i.isEmpty()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
439	[BUG]  [BUGGY]  while(headers.isEmpty()  &&!i.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.isEmpty()  &&!i.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.isEmpty()  &&!i.isEmpty())  {	  while(i.isEmpty()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
440	[BUG]  [BUGGY]  while(i.hasNext()  [Delete]  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  [Delete]  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  [Delete]  -1)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
441	[BUG]  [BUGGY]  while(i.hasNext()!=  null)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()!=  null)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  null)  {	  while(i.hasNext()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
442	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  coll.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  coll.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
443	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.isEmpty())  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
444	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  coll.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
445	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders,  len);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders,  len);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(remainders,  len);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
446	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(remainders);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
447	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).parsePaxHeaders(headers);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).parsePaxHeaders(headers);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
448	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders,  read);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(remainders,  read);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(remainders,  read);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
449	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i  <  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
450	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  <  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(ch  <  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(ch  <  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
451	[BUG]  [BUGGY]  while(i!=  null  &&!isEOF  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!isEOF  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!isEOF  &&(ch  =  i.read())!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
452	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()  >=  -1))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()  >=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!hasHitEOF  &&(i.read()  >=  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
453	[BUG]  [BUGGY]  while(!hasHitEOF  &&(headers.read()  >=  -1))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(headers.read()  >=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(headers.read()  >=  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
454	[BUG]  [BUGGY]  while(i.hasNext()  &&(i.read()  >=  -1))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(i.read()  >=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(i.read()  >=  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
455	[BUG]  [BUGGY]  while(i!=  null  &&  i.hasMoreElements()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&  i.hasMoreElements()  &&  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&  i.hasMoreElements()  &&  i.hasMoreElements())  {	  while(i.hasMoreElements()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
456	[BUG]  [BUGGY]  while(i.hasNext()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  i.hasMoreElements())  {	  while(i.hasMoreElements()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
457	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
458	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
459	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
460	[BUG]  [BUGGY]  while(!i.read()  &&!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  &&!remainders.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  &&!remainders.isEmpty())  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
461	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  <  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!hasHitEOF  &&(ch  <  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
462	[BUG]  [BUGGY]  while((  ch  =  i.getRead())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getRead())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getRead())  ==  -1)  {	  while((    ch    =    i.getRead())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
463	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()  ==  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!hasHitEOF  &&(i.read()  ==  -1))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
464	[BUG]  [BUGGY]  while(!hasHitEOF  &&(headers.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(headers.read()  ==  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(headers.read()  ==  -1))  {	  while(!hasHitEOF    &&(i.read()    ==    -1))    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
465	[BUG]  [BUGGY]  while(i.hasNext()  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasNext()    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
466	[BUG]  [BUGGY]  while(i.hasNext()  &&!remainders.hasNext())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&!remainders.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&!remainders.hasNext())  {	  while(i.hasNext()    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
467	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [Delete]  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [Delete]  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [Delete]	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
468	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [Delete]  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [Delete]  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [Delete]	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
469	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >>  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >>  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >>	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
470	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
471	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( "  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( "  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( "	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
472	[BUG]  [BUGGY]  if(headers.containsKey(keyword))  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers.containsKey(keyword))  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers.containsKey(keyword))  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  Il	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
473	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
474	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES),  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES),  hasHitEOF)  {	  while(i.hasMoreElements()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
475	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
476	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
477	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  hasHitEOF)  {	  while(i.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
478	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers.length))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers.length))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE,  headers.length))  {	  while(i.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
479	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  i.isEnabled(Feature.QUOTE_FIELD_NAME))  {  throw  new  IllegalArgumentException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
480	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
481	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
482	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    >=    0;    ch    <    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
483	[BUG]  [BUGGY]  while(i.hasNext()  ||(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
484	[BUG]  [BUGGY]  while(i.hasNext()  }  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  }  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  }  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
485	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  <  i.next())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(ch  <  i.next())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(ch  <  i.next())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
486	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
487	[BUG]  [BUGGY]  while(headers.hasMoreElements()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  &&  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  &&  i.hasMoreElements())  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
488	[BUG]  [BUGGY]  while(i.hasNext()  &&  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  headers.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  headers.size()  >  0)  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
489	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  headers.size()  >=  0)  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
490	[BUG]  [BUGGY]  while(headers.isEmpty()  &&  i.containsKey(keyword))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.isEmpty()  &&  i.containsKey(keyword))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.isEmpty()  &&  i.containsKey(keyword))  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
491	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(keyword),  read)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(keyword),  read)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.containsKey(keyword),  read)  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
492	[BUG]  [BUGGY]  while(i!=  null  &&  i.isEmpty()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&  i.isEmpty()  &&  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&  i.isEmpty()  &&  i.hasMoreElements())  {	  while(i.isEmpty()    &&    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
493	[BUG]  [BUGGY]  while(i.get()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.get()!=  null)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.get()!=  null)  {	  while(i.get()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
494	[BUG]  [BUGGY]  while(headers.hasMoreElements()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  &&!headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  &&!headers.contains(ch))  {	  while(i.hasMoreElements()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
495	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
496	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword()  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword()  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
497	[BUG]  [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
498	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
499	[BUG]  [BUGGY]  while(i.hasNext()  &&!remainders.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&!remainders.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&!remainders.containsKey(ch))  {	  while(i.hasNext()    &&!remainders.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
500	[BUG]  [BUGGY]  while((  ch  =  i.current())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.current())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.current())!=  -1)  {	  while((    ch    =    i.getCurrent())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
501	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(i.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!hasHitEOF  &&(i.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
502	[BUG]  [BUGGY]  while(!hasHitEOF  &&(headers.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(headers.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(headers.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
503	[BUG]  [BUGGY]  while(!isEOF  &&(i.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!isEOF  &&(i.read()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!isEOF  &&(i.read()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
504	[BUG]  [BUGGY]  while((  i.getRead())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.getRead())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.getRead())!=  -1)  {	  while((    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
505	[BUG]  [BUGGY]  while((  i.isClosed())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.isClosed())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.isClosed())!=  -1)  {	  while((    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
506	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
507	[BUG]  [BUGGY]  if(headers.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(headers.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(headers.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
508	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
509	[BUG]  [BUGGY]  while((  ch  =  i.getNext())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getNext())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getNext())  ==  -1)  {	  while((    ch    =    i.getNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
510	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(ch));  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(ch));  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(ch));	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
511	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  read);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  read);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  read);	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
512	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.toArray(new  String[headers.size()  ]));  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.toArray(new  String[headers.size()  ]));  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.toArray(new  String[headers.size()  ]));	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
513	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(len  -  read));  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(len  -  read));  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(len  -  read));	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
514	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(remainders.size());  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(remainders.size());  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(remainders.size());	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
515	[BUG]  [BUGGY]  while(headers.hasMoreElements()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  &&!headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  &&!headers.isEmpty())  {	  while(i.hasMoreElements()    &&!headers.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
516	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
517	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
518	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  restLen!=  0)  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
519	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
520	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
521	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(remainders);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(remainders);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(remainders);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
522	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).addHeaders(headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).addHeaders(headers);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).addHeaders(headers);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
523	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
524	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
525	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword)  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword)  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword)	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
526	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
527	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
528	[BUG]  [BUGGY]  while((  ch  =  i.getHeaderSize())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getHeaderSize())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getHeaderSize())!=  -1)  {	  while((    ch    =    i.getSize())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
529	[BUG]  [BUGGY]  while(i!=  null  &&  i.hasMoreElements()  ||  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&  i.hasMoreElements()  ||  i.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&  i.hasMoreElements()  ||  i.hasMoreElements())  {	  while(i.hasMoreElements()    ||    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
530	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  headers.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||  headers.hasMoreElements())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||  headers.hasMoreElements())  {	  while(i.hasMoreElements()    ||    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
531	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&(ch  =  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(ch  =  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
532	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  ==  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i  ==  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i  ==  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    ==    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
533	[BUG]  [BUGGY]  while(headers.hasMoreElements()  &&  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  &&  headers.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  &&  headers.size()  >  0)  {	  while(i.hasMoreElements()    ||    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
534	[BUG]  [BUGGY]  while(headers.hasMoreElements()  ||  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(headers.hasMoreElements()  ||  headers.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(headers.hasMoreElements()  ||  headers.size()  >  0)  {	  while(i.hasMoreElements()    ||    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
535	[BUG]  [BUGGY]  while((  i.seek())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i.seek())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.seek())!=  -1)  {	  while((    i.in())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
536	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  1);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  1);	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
537	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(i.getKey()));  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(i.getKey()));  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.get(i.getKey()));	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
538	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  len);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  len);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size()  +  len);	  ((    TarArchiveEntry    <    K,    V>)i).setRead(headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
539	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  headers.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  headers.isEmpty())  {	  while(i.hasMoreElements()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
540	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
541	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
542	[BUG]  [BUGGY]  if(i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
543	[BUG]  [BUGGY]  while(!i.read()  >  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  >  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  >  -1)  {	  while(!i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
544	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
545	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
546	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.seek()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.seek()!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.seek()!=  -1))  {	  while(!hasHitEOF    &&(i.read()!=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
547	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  -1))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
548	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  <  =  -1))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i.read()  <  =  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  <  =  -1))  {	  while(!hasHitEOF    &&(i.read()    >=    -1))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
549	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
550	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
551	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
552	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch++)    {    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
553	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
554	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
555	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
556	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ".);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
557	[BUG]  [BUGGY]  while((  ch  =  i.getWrite())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getWrite())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getWrite())!=  -1)  {	  while((    ch    =    i.getRead())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
558	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  SMALL_BUFFER_SIZE);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  SMALL_BUFFER_SIZE);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
559	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  0);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers,  0);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers,  0);	  ((    TarArchiveEntry)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
560	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.contains(ch))  {	  while(i.isEmpty()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
561	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch!=  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(ch!=  i.read())  ==  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch!=  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
562	[BUG]  [BUGGY]  while((  ch  =  i.remainder())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.remainder())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.remainder())!=  -1)  {	  while((    ch    =    i.getCurrent())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
563	[BUG]  [BUGGY]  while((  i  =  i.read())  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i  =  i.read())  >>  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.read())  >>  -1)  {	  while((    i.read())    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
564	[BUG]  [BUGGY]  while((  i  =  i.hasNext())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  i  =  i.hasNext())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.hasNext())!=  -1)  {	  while((    i.hasNext())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
565	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword()  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword()  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
566	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers.get(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
567	[BUG]  [BUGGY]  while(i.read()  <  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.read()  <  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.read()  <  -1)  {	  while(i.read()    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
568	[BUG]  [BUGGY]  while(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
569	[BUG]  [BUGGY]  while(!i.read()  &&!stringEncoding.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.read()  &&!stringEncoding.isEmpty())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()  &&!stringEncoding.isEmpty())  {	  while(!i.read())    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
570	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(header))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(header))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.containsKey(header))  {	  while(i.isEmpty()    &&    headers.containsKey(keyword))    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
571	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).start();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).start();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).start();	  ((    TarArchiveEntry    <    K,    V>)i).reset();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
572	[BUG]  [BUGGY]  int  restLen  =  headers.size()  +  i.read();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  restLen  =  headers.size()  +  i.read();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.size()  +  i.read();	  int    restLen    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
573	[BUG]  [BUGGY]  int  restLen  =  headers.length;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  restLen  =  headers.length;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.length;	  int    restLen    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
574	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  i.nextElement())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  ||  i.nextElement())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||  i.nextElement())  {	  while(i.hasMoreElements()    ||    i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
575	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {	  while(i.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
576	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
577	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
578	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
579	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
580	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(keyword,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
581	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.canBeEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.canBeEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.canBeEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
582	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.hasNext())  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
583	[BUG]  [BUGGY]  while(i.hasNext()  ||  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  ||  headers.size()  >  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  ||  headers.size()  >  0)  {	  while(i.hasMoreElements()    ||    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
584	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  >=  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(ch  >=  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  >=  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
585	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  {  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(ch  {  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  {  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    <    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
586	[BUG]  [BUGGY]  while(i!=  null  &&  i.canRead())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&  i.canRead())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&  i.canRead())  {	  while(i!=    null    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
587	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >=	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
588	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >>  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >>  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  >>	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
589	[BUG]  [BUGGY]  while((  ch  =  i.skip())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.skip())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.skip())!=  -1)  {	  while((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
590	[BUG]  [BUGGY]  while(i.isClosed()  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
591	[BUG]  [BUGGY]  while(i.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.isClosed())    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
592	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read()  +  1)!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read()  +  1)!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read()  +  1)!=  -1)  {	  while(i!=    null    &&!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
593	[BUG]  [BUGGY]  while(i.hasNext()  <  len  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  <  len  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  <  len  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
594	[BUG]  [BUGGY]  while(i.hasNext()  <  restLen  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  <  restLen  &&(ch  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  <  restLen  &&(ch  =  i.read())!=  -1)  {	  while(i.hasNext()    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
595	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  while(i.hasMoreElements()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
596	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
597	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  headers))  {	  while(i.hasNext()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
598	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.size()))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.size()))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  headers.size()))  {	  while(i.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
599	[BUG]  [BUGGY]  if(i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
600	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKeyword())!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKeyword())!=  null)  {  return  headers;  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKeyword())!=  null)  {  return  headers;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
601	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKeyword()).length  >  0)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKeyword()).length  >  0)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  headers.get(i.getKeyword()).length  >  0)  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    keyword    =    headers.get(i.getKeyword());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
602	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0  ||  headers.get(keyword)!=  null)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0  ||  headers.get(keyword)!=  null)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0  ||  headers.get(keyword)!=  null)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
603	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(headers.size()    >    0)    {    headers.put(keyword,    headers.get(keyword));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
604	[BUG]  [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	i.setEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
605	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_ENCODING_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_ENCODING_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_ENCODING_TO_STREAM))  {	  while(i.isEmpty()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
606	[BUG]  [BUGGY]  while(!hasHitEOF  &&(remainderLen  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(remainderLen  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(remainderLen  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
607	[BUG]  [BUGGY]  while(!hasHitEOF  &&(len  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(len  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(len  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
608	[BUG]  [BUGGY]  while(!hasHitEOF  &&(height  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(height  =  i.read())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(height  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
609	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  =  i.read()  ||  restLen!=  -1))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!hasHitEOF  &&(i  =  i.read()  ||  restLen!=  -1))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i  =  i.read()  ||  restLen!=  -1))  {	  while(!hasHitEOF    &&(i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
610	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_PASSED_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_PASSED_TO_STREAM))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
611	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_ENCODING_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_ENCODING_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_ENCODING_TO_STREAM))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
612	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_ENCODING))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_ENCODING))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_ENCODING))  {	  while(i.hasNext()    &&    isEnabled(Feature.FLUSH_PASSED_TO_STREAM))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
613	[BUG]  [BUGGY]  while((  ch  =  i.getData())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while((  ch  =  i.getData())!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getData())!=  -1)  {	  while((    ch    =    i.getSize())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
614	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  headers.size()  >=  0)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.size()  >=  0)  {	  while(i.isEmpty()    &&    headers.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
615	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  coll.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  while(i.isEmpty()    &&    coll.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
616	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
617	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    i.read();    ch    <    0;    ch    >    0;)    {    headers.put(ch,    headers[ch]);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
618	[BUG]  [BUGGY]  while(i.getCurrent()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.getCurrent()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.getCurrent()!=  -1)  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
619	[BUG]  [BUGGY]  while(i.isRecorded())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isRecorded())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isRecorded())  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
620	[BUG]  [BUGGY]  while(!i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.hasNext())  {	  while(i.next()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
621	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.hasMoreElements()  &&  headers.contains(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  headers.contains(ch))  {	  while(i.hasMoreElements()    &&!headers.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
622	[BUG]  [BUGGY]  while(!i.isEmpty()  &&  headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.isEmpty()  &&  headers.containsKey(ch))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty()  &&  headers.containsKey(ch))  {	  while(!i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
623	[BUG]  [BUGGY]  InputStream  is  =  headers.readLine();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers.readLine();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers.readLine();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
624	[BUG]  [BUGGY]  InputStream  is  =  headers.readIOF();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  InputStream  is  =  headers.readIOF();  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers.readIOF();	  InputStream    is    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
625	[BUG]  [BUGGY]  while(!i.hasNext()  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(!i.hasNext()  &&  i.hasNext())  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.hasNext()  &&  i.hasNext())  {	  while(i.hasNext()    &&    i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
626	[BUG]  [BUGGY]  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.get()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.get()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.get()!=  -1)  {	  while(i.get()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
627	[BUG]  [BUGGY]  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.get()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
628	[BUG]  [BUGGY]  while(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  i.get()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  while(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  i.get()!=  -1)  {  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  i.get()!=  -1)  {	  while(i.get()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
629	[BUG]  [BUGGY]  int  n  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  int  n  =  headers.size()  *  2;  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  n  =  headers.size()  *  2;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
630	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  p);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  p);  [BUGGY]      read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers,  p);	  ((    TarArchiveEntry    <    K,    V>)i).setHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
