bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  >=  0;  ch  <  	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  headers;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch++)  {  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  whil((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  whil((  ch  =  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	whil((  ch  =  i.read())!=  -1)  {	  while((    i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.read())  >=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.read())  >=  -1)  {	  while((    i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  while((  i  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i  =  i.read())  ==  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.read())  ==  -1)  {	  while((    i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  while((  ch  =  i.next())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.next())  ==  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.next())  ==  -1)  {	  while((    ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  while(i.hasNext()  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&  i.hasNext())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  i.hasNext())  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  while(i.hasNext()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&!headers.isEmpty())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&!headers.isEmpty())  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  while(i.hasNext()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&!headers.contains(ch))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&!headers.contains(ch))  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  while(i.hasNext()  &&!remainders.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&!remainders.contains(ch))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&!remainders.contains(ch))  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  while((  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i.read())  ==  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.read())  ==  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  while((  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i.read())  >=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.read())  >=  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  while((  i.in())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i.in())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.in())!=  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  while((  i  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i  =  i.read())  >=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i  =  i.read())  >=  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  while((  ch  =  i.nextToken())!=  -1)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.nextToken())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.nextToken())!=  -1)  {	  while((    ch    =    i.getCurrentToken())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  while((  ch  =  i.getCurrentToken())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getCurrentToken())  ==  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getCurrentToken())  ==  -1)  {	  while((    ch    =    i.getCurrentToken())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  while((  ch  =  i.remaining())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.remaining())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.remaining())!=  -1)  {	  while((    ch    =    i.getCurrentToken())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  while((  ch  =  i.getValue())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getValue())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getValue())!=  -1)  {	  while((    ch    =    i.next())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  while((  ch  =  i.next())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.next())  >=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.next())  >=  -1)  {	  while((    ch    =    i.next())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  while((  ch  =  i.getKey())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getKey())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getKey())!=  -1)  {	  while((    ch    =    i.next())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(ch  <  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  <  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  ==  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(ch  ==  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  ==  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch!=  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(ch!=  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch!=  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(i.read()  ==  -1))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  ==  -1))  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(i.read()!=  -1))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()!=  -1))  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i.read()  >=  -1))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(i.read()  >=  -1))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i.read()  >=  -1))  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasMoreElements()  &&  i.hasMoreElements())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  i.hasMoreElements())  {	  while(i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasMoreElements()  &&!headers.isEmpty())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&!headers.isEmpty())  {	  while(i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasMoreElements()  &&!headers.contains(ch))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&!headers.contains(ch))  {	  while(i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasMoreElements()  ||  i.hasMoreElements())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||  i.hasMoreElements())  {	  while(i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  while((  ch  =  i.getRead())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getRead())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getRead())!=  -1)  {	  while((    ch    =    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
40	[BUG]  [BUGGY]  while((  ch  =  i.getSize())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getSize())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getSize())!=  -1)  {	  while((    ch    =    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
41	[BUG]  [BUGGY]  while((  ch  =  i.getLowerClosed())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getLowerClosed())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getLowerClosed())!=  -1)  {	  while((    ch    =    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
42	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  while(i.isEmpty()  &&!headers.contains(ch))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&!headers.contains(ch))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!headers.contains(ch))  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  while(!i.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!i.isEmpty())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.isEmpty())  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  while(i.isEmpty()  &&  i.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  i.hasMoreElements())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  i.hasMoreElements())  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
47	[BUG]  [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  coll.isEmpty())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  coll.isEmpty())  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(TarArchiveEntry.class))  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  while(i.read()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.read()  ==  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.read()  ==  -1)  {	  while(i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  while(!i.read()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!i.read()!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read()!=  -1)  {	  while(i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  while(i.read()  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.read()  >=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.read()  >=  -1)  {	  while(i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
52	[BUG]  [BUGGY]  while(i.hasNext()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()!=  -1)  {	  while(i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  while((  ch  =  i.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.get())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.get())!=  -1)  {	  while((    ch    =    i.next())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.seek())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.seek())!=  -1)  {	  while((    ch    =    i.next())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  while(i!=  null  &&  i.hasNext())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i!=  null  &&  i.hasNext())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&  i.hasNext())  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
56	[BUG]  [BUGGY]  while(i.hasNext()  &&!remainders.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&!remainders.isEmpty())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&!remainders.isEmpty())  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
57	[BUG]  [BUGGY]  while((  ch  =  i.getOpen())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getOpen())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getOpen())!=  -1)  {	  while((    ch    =    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  while((  ch  =  i.getCharacterEncoding())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getCharacterEncoding())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getCharacterEncoding())!=  -1)  {	  while((    ch    =    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i!=  null  &&!hasHitEOF  &&(ch  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  while(!hasHitEOF  &&(i  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(i  =  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(i  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  headers.size()  >  0)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.size()  >  0)  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  while(i.isEmpty()  &&!headers.containsKey(ch))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&!headers.containsKey(ch))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!headers.containsKey(ch))  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(keyword))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  headers.containsKey(keyword))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  headers.containsKey(keyword))  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  while((  i.hasNext())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i.hasNext())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.hasNext())!=  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
65	[BUG]  [BUGGY]  while((  i.get())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i.get())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.get())!=  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
66	[BUG]  [BUGGY]  while((  i.available())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i.available())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.available())!=  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
67	[BUG]  [BUGGY]  int  restLen  =  headers.size();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  int  restLen  =  headers.size();  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  restLen  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  InputStream  is  =  headers.readInt();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  InputStream  is  =  headers.readInt();  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	InputStream  is  =  headers.readInt();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  int  n  =  headers.size();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  int  n  =  headers.size();  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	int  n  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers);  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setHeaders(headers);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  ((  TarArchiveEntry)i).setHeaders(headers);  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry)i).setHeaders(headers);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size());  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRead(headers.size());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).reset();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).reset();  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	((  TarArchiveEntry  <  K,  V>)i).reset();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  while(i.next()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.next()!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.next()!=  -1)  {	  while(i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
75	[BUG]  [BUGGY]  while(i.get()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.get()!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.get()!=  -1)  {	  while(i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  while((  ch  =  i.currentToken())!=  -1)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.currentToken())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.currentToken())!=  -1)  {	  while((    ch    =    i.getCurrentToken())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  while((  read  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  read  =  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  read  =  i.read())!=  -1)  {	  while((    i    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
78	[BUG]  [BUGGY]  While((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  While((  ch  =  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	While((  ch  =  i.read())!=  -1)  {	  while((    ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
79	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasMoreElements()  &&  headers.size()  >  0)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  headers.size()  >  0)  {	  while(i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasMoreElements()  &&  isHitEOF)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  &&  isHitEOF)  {	  while(i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  =  i.read())  ==  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
82	[BUG]  [BUGGY]  while(!hasHitEOF  &&(ch  <  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!hasHitEOF  &&(ch  <  =  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!hasHitEOF  &&(ch  <  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
83	[BUG]  [BUGGY]  while(i.hasNext()  &&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&(ch  =  i.read())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&(ch  =  i.read())!=  -1)  {	  while(!hasHitEOF    &&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
84	[BUG]  [BUGGY]  while((  ch  =  i.getNext())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getNext())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getNext())!=  -1)  {	  while((    ch    =    i.getClosed())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
85	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  headers.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasMoreElements()  ||  headers.size()  >  0)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasMoreElements()  ||  headers.size()  >  0)  {	  while(i.hasMoreElements())    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  while((  ch  =  i.getCurrent())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  ch  =  i.getCurrent())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  ch  =  i.getCurrent())!=  -1)  {	  while((    ch    =    i.next())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  while((  i.getClosed())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i.getClosed())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.getClosed())!=  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
88	[BUG]  [BUGGY]  while((  i.isExported())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while((  i.isExported())!=  -1)  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while((  i.isExported())!=  -1)  {	  while((    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
89	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.hasNext()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  while(i.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
91	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(ch,  headers[ch]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
92	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(headers.size()  >  0)  {  headers.put(keyword,  headers.get(keyword));  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers.get(i.getKeyword());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers[ch]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  i.read();  ch  <  0;  ch  >  0;)  {  headers.put(keyword,  headers.get(ch));  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  keyword  =  headers.get(i.getKeyword());  if(keyword!=  null)  {  return  headers;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
98	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
100	[BUG]  [BUGGY]  while(i.isEmpty()  &&!headers.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isEmpty()  &&!headers.isEmpty())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isEmpty()  &&!headers.isEmpty())  {	  while(i.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
101	[BUG]  [BUGGY]  while(!i.read())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(!i.read())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(!i.read())  {	  while(i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
102	[BUG]  [BUGGY]  while(i.isClosed())  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  Map<String,  String>  headers  =  new  HashMap<String,  String>();  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;    [BUGGY]  while(i.isClosed())  {  [BUGGY]    read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	441	441	1	replace	while(i.isClosed())  {	  while(i.read()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
