bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
2	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]      NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset!=  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
5	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
6	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entryOffset  -  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  -  entrySize  >  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]    [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	  	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
8	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
9	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]      NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
10	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
11	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
12	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  <  =  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  >  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
13	[BUG]  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
14	[BUG]  [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]      NumberFormatException  [CONTEXT]  public  int  available()  throws  IOException  {  [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
