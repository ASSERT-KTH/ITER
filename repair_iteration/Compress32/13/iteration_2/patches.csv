bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
2	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
3	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
4	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  -  entrySize  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
5	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
6	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset().intValue()  +  1;	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  -  1;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset().intValue()  -  1;	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  *  2;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  *  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset().intValue()  *  2;	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().length();  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset().length();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset().length();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().longValue();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset().longValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset().longValue();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  +  2;  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  +  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset().intValue()  +  2;	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
13	[BUG]  [BUGGY]  if(entryOffset  ==  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
14	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
15	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
16	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
17	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
18	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MAX_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
19	[BUG]  [BUGGY]  if(entryOffset  >=  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    >=    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
20	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    >=    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
21	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    >=    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
22	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
28	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  &&  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
29	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
30	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
31	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
32	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
33	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
34	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
35	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
36	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
40	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
41	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  &&  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
42	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  if(entrySize  <  =  recordSize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  recordSize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  recordSize  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  this.blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  this.blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
46	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  <  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  ||  entryOffset  <  Integer.MIN_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
47	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
48	[BUG]  [BUGGY]  if(entryOffset  <  =  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
49	[BUG]  [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
50	[BUG]  [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
51	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  MAX_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
52	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  MAX_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
53	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.getKey();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  this.currEntry.getKey();	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  this.currEntry.getEntrySize();	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.available();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.available();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  this.currEntry.available();	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.getValue()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  this.currEntry.getValue()  +  1;	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.getValue()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  this.currEntry.getValue()  -  1;	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  Integer  entrySize  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  currEntry.getValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  currEntry.getValue();	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  if(entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    >=    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
60	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    >=    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
61	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    >=    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
62	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    >=    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
63	[BUG]  [BUGGY]  if(entryOffset  <  EntrySize.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  EntrySize.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  EntrySize.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
64	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
65	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  /  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  /  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    /    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
66	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  /  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  /  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    /    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
67	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  /  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  /  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    /    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
68	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  /  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  /  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    /    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
69	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  /  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  /  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    /    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
70	[BUG]  [BUGGY]  if(entryOffset  /  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  /  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  /  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    /    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
71	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
72	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
73	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  ||  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
74	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
75	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
76	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    ==    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
77	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    ==    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
78	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    ==    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
79	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    ==    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
80	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  entryOffset  ||  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    ==    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
81	[BUG]  [BUGGY]  if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
82	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
83	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
84	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
85	[BUG]  [BUGGY]  if(entrySize  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
86	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  this.blockSize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  this.blockSize)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
87	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  entrySize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  entrySize)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
88	[BUG]  [BUGGY]  if(entrySize  <  =  blockSize)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  blockSize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  blockSize)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
89	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
90	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  <  entrySize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  ||  entryOffset  <  entrySize)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
91	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
92	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
93	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
94	[BUG]  [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
95	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
96	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
97	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
98	[BUG]  [BUGGY]  if(entryOffset  <  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
99	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
100	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
101	[BUG]  [BUGGY]  if(entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
102	[BUG]  [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
103	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  SMALL_BUFFER_SIZE)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
104	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
105	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  0)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  0)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
106	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  1)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  -  entrySize  <  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  -  entrySize  <  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
107	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  1)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
108	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  1)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >=  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >=  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
109	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
110	[BUG]  [BUGGY]  if(entrySize  <  blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
111	[BUG]  [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
112	[BUG]  [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
113	[BUG]  [BUGGY]  if(entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
114	[BUG]  [BUGGY]  if(entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
115	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  -  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  -  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  -  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    -    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
116	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize  -  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  this.blockSize  -  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  this.blockSize  -  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    -    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
117	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  -  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  -  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  -  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    -    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
118	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  -  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  -  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  -  Integer.MIN_VALUE)  {	  if(entrySize    <    =    entryOffset    -    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
119	[BUG]  [BUGGY]  if(entrySize  <  =  blockSize  -  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  blockSize  -  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  blockSize  -  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    -    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
120	[BUG]  [BUGGY]  if(entrySize  <  =  recordSize  -  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  recordSize  -  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  recordSize  -  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    -    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
121	[BUG]  [BUGGY]  if(entrySize  *  length  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  length  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  length  <  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
122	[BUG]  [BUGGY]  if(entrySize  *  length  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  length  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  length  ==  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
123	[BUG]  [BUGGY]  if(entrySize  *  length  >  Integer.MAX_VALUE  ||  entryOffset  *  length  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  length  >  Integer.MAX_VALUE  ||  entryOffset  *  length  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  length  >  Integer.MAX_VALUE  ||  entryOffset  *  length  >  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
124	[BUG]  [BUGGY]  if(entryOffset  *  length  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  *  length  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  *  length  >  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
125	[BUG]  [BUGGY]  if(entrySize  *  length  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  length  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  length  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
126	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
127	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
128	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
129	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  -  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
130	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
131	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
132	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
133	[BUG]  [BUGGY]  if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
134	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
135	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
136	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
137	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
138	[BUG]  [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  if(entrySize  *  length  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  length  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  length  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
140	[BUG]  [BUGGY]  if(entrySize  *  EntryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  EntryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  EntryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
141	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  +  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  +  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  +  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
142	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  +  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  +  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  +  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
143	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +  length)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  +  length)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  +  length)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
144	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  +  length)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  +  length)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  +  length)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
145	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  +  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  +  Long.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
146	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  +  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  +  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  +  Long.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
147	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
148	[BUG]  [BUGGY]  if(entryOffset  +  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  +  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  +  entrySize  >=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
149	[BUG]  [BUGGY]  if(entryOffset  *  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  *  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  *  entrySize  >=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
150	[BUG]  [BUGGY]  if(entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    ==    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
151	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    ==    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
152	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
153	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
154	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
155	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
156	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
157	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
158	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
159	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  entryOffset  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  entryOffset  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
160	[BUG]  [BUGGY]  if(entryOffset  *  entrySize!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  *  entrySize!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  *  entrySize!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
161	[BUG]  [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset!=  Integer.MIN_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
162	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
163	[BUG]  [BUGGY]  if(entrySize  *  recordSize!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  recordSize!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  recordSize!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
164	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  EntrySize.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
165	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
166	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
167	[BUG]  [BUGGY]  if(entrySize!=  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize!=  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize!=  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
168	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
169	[BUG]  [BUGGY]  if(entryOffset  *  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  *  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  *  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
170	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
171	[BUG]  [BUGGY]  if(entryOffset  -  entrySize!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  -  entrySize!=  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  -  entrySize!=  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
172	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entrySize!=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
173	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  >>  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  >>  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entrySize  >>  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
174	[BUG]  [BUGGY]  if(entrySize  <  LAST_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  LAST_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  LAST_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    LAST_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
175	[BUG]  [BUGGY]  if(entryOffset  <  =  LAST_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  LAST_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  LAST_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    LAST_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
176	[BUG]  [BUGGY]  if(entrySize  <  LAST_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  LAST_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  LAST_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    LAST_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
177	[BUG]  [BUGGY]  if(entrySize  <  =  LAST_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  LAST_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  LAST_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    LAST_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
178	[BUG]  [BUGGY]  if(entrySize  <  =  LAST_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  LAST_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  LAST_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    LAST_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
179	[BUG]  [BUGGY]  if(entrySize  ==  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    LAST_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
180	[BUG]  [BUGGY]  if(entrySize  <  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    LAST_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
181	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
182	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
183	[BUG]  [BUGGY]  if(entrySize  ==  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
184	[BUG]  [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
185	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
186	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
187	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  getEntrySize()  +  1;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
188	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  getEntrySize()  -  1;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
189	[BUG]  [BUGGY]  Integer  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  getEntryOffset();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
190	[BUG]  [BUGGY]  Integer  entrySize  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getRecordSize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  getRecordSize();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
191	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize().length;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize().length;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  getEntrySize().length;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
192	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MAX_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
193	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
194	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
195	[BUG]  [BUGGY]  if(entryOffset  ==  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
196	[BUG]  [BUGGY]  if(entryOffset  >=  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
197	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
198	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  EntrySize.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  EntrySize.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
199	[BUG]  [BUGGY]  if(entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    >=    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
200	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    >=    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
201	[BUG]  [BUGGY]  if(entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
202	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
203	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
204	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  0  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
205	[BUG]  [BUGGY]  if(entrySize  <  this.blockSize  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  this.blockSize  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  this.blockSize  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
206	[BUG]  [BUGGY]  if(entrySize  <  =  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
207	[BUG]  [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
208	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
209	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
210	[BUG]  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
211	[BUG]  [BUGGY]  if(entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
212	[BUG]  [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
213	[BUG]  [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
214	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntrySize()  +  1;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
215	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntrySize()  -  1;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
216	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntrySize()  -  blockSize;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
217	[BUG]  [BUGGY]  int  entryOffset  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getRecordSize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getRecordSize();	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
218	[BUG]  [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
219	[BUG]  [BUGGY]  if(entrySize  <  Long.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Long.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Long.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
220	[BUG]  [BUGGY]  if(entryOffset  <  =  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
221	[BUG]  [BUGGY]  if(entrySize  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
222	[BUG]  [BUGGY]  if(entrySize  <  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
223	[BUG]  [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
224	[BUG]  [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  <  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  <  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  <  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
225	[BUG]  [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  this.blockSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
226	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  this.blockSize  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  this.blockSize  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
227	[BUG]  [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  this.blockSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
228	[BUG]  [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  this.blockSize  ||  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
229	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  this.blockSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  this.blockSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
230	[BUG]  [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  this.blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  this.blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
231	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MIN_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
232	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
233	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
234	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  &&  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
235	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
236	[BUG]  [BUGGY]  if(entrySize  <  =  recordSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  recordSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  recordSize  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
237	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset()  +  1;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
238	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset()  -  1;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
239	[BUG]  [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  this.currEntry.getEntryOffset();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
240	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Long  entryOffset  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Long  entryOffset  =  getEntryOffset();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
241	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset(0);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset(0);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryOffset(0);	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
242	[BUG]  [BUGGY]  if(entryOffset  *  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  *  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  *  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entryOffset    *    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
243	[BUG]  [BUGGY]  if(entryOffset  *  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  *  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  *  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    *    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
244	[BUG]  [BUGGY]  if(entrySize  *  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    *    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
245	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entryOffset  =  getEntrySize()  +  1;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
246	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entryOffset  =  getEntrySize()  -  1;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
247	[BUG]  [BUGGY]  long  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entryOffset  =  getEntryLength();	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
248	[BUG]  [BUGGY]  long  entryOffset  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getRecordSize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entryOffset  =  getRecordSize();	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
249	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entryOffset  =  getEntrySize()  -  blockSize;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
250	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
251	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
252	[BUG]  [BUGGY]  if(entryOffset  <  =  EntrySize.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  EntrySize.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  EntrySize.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
253	[BUG]  [BUGGY]  if(entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
254	[BUG]  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
255	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
256	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    >=    EntrySize.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
257	[BUG]  [BUGGY]  if(entrySize  <  =  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
258	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
259	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
260	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entryOffset  =  getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
261	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntryOffset()  +  1;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
262	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntryOffset()  -  1;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
263	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  this.currEntry.getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  this.currEntry.getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
264	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntryOffset()  -  2;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
265	[BUG]  [BUGGY]  if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
266	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
267	[BUG]  [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
268	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
269	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
270	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
271	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MIN_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
272	[BUG]  [BUGGY]  if(entryOffset  +  entrySize  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  +  entrySize  ==  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  +  entrySize  ==  Integer.MIN_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
273	[BUG]  [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
274	[BUG]  [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
275	[BUG]  [BUGGY]  if(entryOffset  <  Long.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Long.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Long.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
276	[BUG]  [BUGGY]  if(entrySize  ==  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
277	[BUG]  [BUGGY]  if(entrySize  <  Long.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Long.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Long.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
278	[BUG]  [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
279	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntrySize()  +  1;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
280	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntrySize()  -  1;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
281	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryLength();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
282	[BUG]  [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  this.currEntry.getEntrySize();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
283	[BUG]  [BUGGY]  Integer  entryOffset  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getRecordSize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getRecordSize();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
284	[BUG]  [BUGGY]  Long  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Long  entryOffset  =  getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Long  entryOffset  =  getEntrySize();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
285	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryStart();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryStart();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntryStart();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
286	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
287	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength()  +  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryLength()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntryLength()  +  1;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
288	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength()  -  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryLength()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntryLength()  -  1;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
289	[BUG]  [BUGGY]  int  entryOffset  =  getEntryCount();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryCount();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntryCount();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
290	[BUG]  [BUGGY]  int  entryOffset  =  getEntryStart();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryStart();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntryStart();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
291	[BUG]  [BUGGY]  int  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entrySize  =  getEntryOffset();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
292	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entrySize  =  getEntrySize()  +  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
293	[BUG]  [BUGGY]  int  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entrySize  =  this.currEntry.getEntrySize();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
294	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entrySize  =  getEntrySize()  -  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
295	[BUG]  [BUGGY]  int  entrySize  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entrySize  =  getEntryLength();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
296	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
297	[BUG]  [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
298	[BUG]  [BUGGY]  if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
299	[BUG]  [BUGGY]  long  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entrySize  =  getEntryOffset();	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
300	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entrySize  =  getEntrySize()  +  1;	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
301	[BUG]  [BUGGY]  long  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entrySize  =  this.currEntry.getEntrySize();	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
302	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entrySize  =  getEntrySize()  -  1;	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
303	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
304	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
305	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  {  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  {  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  {  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
306	[BUG]  [BUGGY]  if(entryOffset  <  =  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
307	[BUG]  [BUGGY]  if(entrySize  ==  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
308	[BUG]  [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  <  =  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  <  =  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  MAX_VALUE  ||  entryOffset  <  =  MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
309	[BUG]  [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  >  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  >  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  MAX_VALUE  ||  entryOffset  >  MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
310	[BUG]  [BUGGY]  if(entrySize  <  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
311	[BUG]  [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
312	[BUG]  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
313	[BUG]  [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
314	[BUG]  [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
315	[BUG]  [BUGGY]  if(entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
316	[BUG]  [BUGGY]  if(entrySize!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
317	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    >=    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
318	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    >=    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
319	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  entryOffset  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    >=    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
320	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    >=    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
321	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  entrySize  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    >=    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
322	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    &&    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
323	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  &&  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    &&    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
324	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
325	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
326	[BUG]  [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
327	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
328	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    >=    EntrySize.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
329	[BUG]  [BUGGY]  if(entryOffset  <  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
330	[BUG]  [BUGGY]  if(entrySize!=  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize!=  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize!=  Long.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
331	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  0  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
332	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  1)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset!=  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset!=  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
333	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  <  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  <  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
334	[BUG]  [BUGGY]  Integer  entrySize  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  getEntryLength();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
335	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    ==    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
336	[BUG]  [BUGGY]  if(entrySize  <  this.blockSize  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  this.blockSize  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  this.blockSize  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
337	[BUG]  [BUGGY]  if(entrySize  >=  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
338	[BUG]  [BUGGY]  if(entrySize  ==  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
339	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
340	[BUG]  [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
341	[BUG]  [BUGGY]  long  entrySize  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entrySize  =  getEntryLength();	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
342	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
343	[BUG]  [BUGGY]  if(entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
344	[BUG]  [BUGGY]  if(entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
345	[BUG]  [BUGGY]  if(entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset!=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
346	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  this.currEntry.getEntrySize();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
347	[BUG]  [BUGGY]  if(entrySize  *  length  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  length  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  length  <  =  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
348	[BUG]  [BUGGY]  if(entrySize  *  length  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  length  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  length  >=  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
349	[BUG]  [BUGGY]  if(length  *  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(length  *  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(length  *  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
350	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
351	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  0  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
352	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  0  ||  entrySize  <  Integer.MIN_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
353	[BUG]  [BUGGY]  long  entryOffset  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entryOffset  =  this.currEntry.getEntrySize();	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
354	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
355	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getEntryLength();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  this.currEntry.getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  this.currEntry.getEntryLength();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
356	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
357	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
358	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  this.blockSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  this.blockSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
359	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
360	[BUG]  [BUGGY]  if(entrySize  >  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
361	[BUG]  [BUGGY]  if(entrySize!=  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize!=  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize!=  EntrySize.MIN_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MIN_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
362	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  2;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntrySize()  -  2;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
363	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  getEntrySize()  -  blockSize;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
364	[BUG]  [BUGGY]  if(entrySize  >=  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
365	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  EntryOffset.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
366	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
367	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  <  =  entryOffset)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  MAX_VALUE  ||  entryOffset  <  =  entryOffset)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
368	[BUG]  [BUGGY]  if(entrySize  <  =  LAST_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  LAST_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  LAST_VALUE  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
369	[BUG]  [BUGGY]  if(entrySize  /  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  /  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  /  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
370	[BUG]  [BUGGY]  if(entrySize  *  this.blockSize!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  this.blockSize!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  this.blockSize!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
371	[BUG]  [BUGGY]  if(entrySize  *  length!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  length!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  length!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
372	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.getRecordSize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  this.currEntry.getRecordSize();	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
373	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getRowSize();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.getRowSize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  this.currEntry.getRowSize();	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
374	[BUG]  [BUGGY]  if(entrySize!=  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize!=  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize!=  EntrySize.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
375	[BUG]  [BUGGY]  if(entrySize  ==  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
376	[BUG]  [BUGGY]  if(entrySize  >=  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
377	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    >=    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
378	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
379	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
380	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
381	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
382	[BUG]  [BUGGY]  if(entrySize  *  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    *    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
383	[BUG]  [BUGGY]  if(entrySize  *  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entryOffset    *    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
384	[BUG]  [BUGGY]  if(entrySize  *  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entrySize  ==  Integer.MAX_VALUE)  {	  if(entryOffset    *    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
385	[BUG]  [BUGGY]  if(entrySize  *  entrySize  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entrySize  <  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entrySize  <  Integer.MIN_VALUE)  {	  if(entryOffset    *    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
386	[BUG]  [BUGGY]  if(entryOffset  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  ==  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  ==  Integer.MIN_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
387	[BUG]  [BUGGY]  if(entryOffset  >=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >=  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >=  Integer.MIN_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
388	[BUG]  [BUGGY]  if(entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
389	[BUG]  [BUGGY]  if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
390	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
391	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
392	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
393	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
394	[BUG]  [BUGGY]  if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  EntrySize.MAX_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MAX_VALUE    ||    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
395	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize  +  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  this.blockSize  +  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  this.blockSize  +  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
396	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  +  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  MAX_VALUE  +  entryOffset)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  MAX_VALUE  +  entryOffset)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
397	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  +  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  entryOffset  +  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  entryOffset  +  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
398	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  +  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  +  Integer.MIN_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
399	[BUG]  [BUGGY]  if(entrySize!=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize!=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize!=  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
400	[BUG]  [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
401	[BUG]  [BUGGY]  if(entrySize  >=  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  EntrySize.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
402	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >>  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >>  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >>  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
403	[BUG]  [BUGGY]  if(entrySize  >=  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
404	[BUG]  [BUGGY]  if(entrySize  >  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
405	[BUG]  [BUGGY]  if(entrySize  >  MAX_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  MAX_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  MAX_BUFFER_SIZE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
406	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  -  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  MAX_VALUE  -  entryOffset)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  MAX_VALUE  -  entryOffset)  {	  if(entrySize    <    =    entryOffset    -    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
407	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  -  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  ==  entryOffset  -  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  ==  entryOffset  -  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    -    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
408	[BUG]  [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
409	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  entryOffset  ||  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    >=    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
410	[BUG]  [BUGGY]  if(entrySize  <  =  EntryOffset.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  EntryOffset.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  EntryOffset.MAX_VALUE)  {	  if(entrySize    <    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
411	[BUG]  [BUGGY]  if(entrySize!=  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize!=  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize!=  EntrySize.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MAX_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
412	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
413	[BUG]  [BUGGY]  if(entrySize  *  this.blockSize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  this.blockSize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  this.blockSize  ==  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
414	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  ||  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
415	[BUG]  [BUGGY]  if(entrySize!=  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize!=  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize!=  MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
416	[BUG]  [BUGGY]  if(entrySize  >=  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
417	[BUG]  [BUGGY]  if(entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  0)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  0)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
418	[BUG]  [BUGGY]  Integer  entryOffset  =  currEntry.getEntryOffset().intValue();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  currEntry.getEntryOffset().intValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  currEntry.getEntryOffset().intValue();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
419	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryOffset().intValue();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Long  entryOffset  =  getEntryOffset().intValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Long  entryOffset  =  getEntryOffset().intValue();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
420	[BUG]  [BUGGY]  if(entrySize  *  this.blockSize  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  this.blockSize  <  =  entryOffset)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  this.blockSize  <  =  entryOffset)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
421	[BUG]  [BUGGY]  if(entrySize  >=  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  LAST_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    LAST_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
422	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryOffset().longValue();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Long  entryOffset  =  getEntryOffset().longValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Long  entryOffset  =  getEntryOffset().longValue();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
423	[BUG]  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  this.blockSize)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  this.blockSize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  this.blockSize)  {	  if(entrySize    <    =    this.blockSize    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
424	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  *  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  *  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  *  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
425	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  2)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  2)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  2)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
426	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  EntrySize.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
427	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entrySize  =  getEntrySize()  -  blockSize;	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
428	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
429	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
430	[BUG]  [BUGGY]  if(entrySize  /  length  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  /  length  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  /  length  >  Integer.MAX_VALUE)  {	  if(entrySize    *    length    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
431	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
432	[BUG]  [BUGGY]  if(entryOffset  >  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
433	[BUG]  [BUGGY]  if(entrySize  *  SMALL_BUFFER_SIZE!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  SMALL_BUFFER_SIZE!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  SMALL_BUFFER_SIZE!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
434	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  *  SMALL_BUFFER_SIZE!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  *  SMALL_BUFFER_SIZE!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  *  SMALL_BUFFER_SIZE!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
435	[BUG]  [BUGGY]  if(entrySize  *  blockSize!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  blockSize!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  blockSize!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
436	[BUG]  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {	  if(entrySize    ==    EntrySize.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
437	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entrySize  =  getEntrySize()  -  blockSize;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
438	[BUG]  [BUGGY]  if(entrySize  >  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
439	[BUG]  [BUGGY]  if(entrySize  >  entrySize  &&  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  entrySize  &&  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  entrySize  &&  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
440	[BUG]  [BUGGY]  if(entryOffset  >  entrySize  &&  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  >  entrySize  &&  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  >  entrySize  &&  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    >    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
441	[BUG]  [BUGGY]  if(entrySize  <  blockSize  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  blockSize  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  blockSize  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    entrySize    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
442	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntryOffset.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
443	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  -  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  -  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  -  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
444	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  -  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  -  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  -  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
445	[BUG]  [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntryLength();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entryOffset  =  this.currEntry.getEntryLength();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
446	[BUG]  [BUGGY]  if(entrySize  <  =  blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  blockSize  ||  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
447	[BUG]  [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Long.MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
448	[BUG]  [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
449	[BUG]  [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MAX_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    >    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
450	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE  ||  entrySize  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  EntrySize.MAX_VALUE  ||  entrySize  >  EntrySize.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  EntrySize.MAX_VALUE  ||  entrySize  >  EntrySize.MAX_VALUE)  {	  if(entryOffset    <    =    EntrySize.MAX_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
451	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
452	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  *  SMALL_BUFFER_SIZE  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  *  SMALL_BUFFER_SIZE  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  *  SMALL_BUFFER_SIZE  >=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
453	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >=  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >=  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    >=    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
454	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  ||  entryOffset  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
455	[BUG]  [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  <  =  entrySize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  MAX_VALUE  ||  entryOffset  <  =  entrySize)  {	  if(entrySize    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
456	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
457	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize!=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
458	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >>  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >>  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  >>  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
459	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  =  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  =  Long.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
460	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getEntryLength();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  this.currEntry.getEntryLength();	  Integer    entrySize    =    this.currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
461	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  /  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  /  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
462	[BUG]  [BUGGY]  if(entrySize  *  EntryOffset  <  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  EntryOffset  <  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  EntryOffset  <  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE    ||    entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
463	[BUG]  [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
464	[BUG]  [BUGGY]  if(entrySize  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
465	[BUG]  [BUGGY]  if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  >  EntrySize.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    EntrySize.MIN_VALUE    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
466	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	Integer  entrySize  =  getEntrySize()  -  blockSize;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
467	[BUG]  [BUGGY]  if(entrySize  <  =  recordSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  recordSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  recordSize  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
468	[BUG]  [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  EntrySize.MIN_VALUE  ||  entryOffset  >  EntrySize.MAX_VALUE)  {	  if(entrySize    <    EntrySize.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
469	[BUG]  [BUGGY]  if(entrySize  <  =  blockSize  +  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  blockSize  +  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  blockSize  +  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
470	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  +  1)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  entryOffset  +  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  entryOffset  +  1)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
471	[BUG]  [BUGGY]  if(entrySize  <  =  recordSize  +  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  recordSize  +  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  recordSize  +  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
472	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize  +  entryOffset  +  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  this.blockSize  +  entryOffset  +  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  this.blockSize  +  entryOffset  +  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    +    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
473	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
474	[BUG]  [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
475	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  <  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  entrySize  <  Integer.MIN_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
476	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
477	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
478	[BUG]  [BUGGY]  if(entrySize  <  =  recordSize)  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  recordSize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  recordSize)  {	  if(entrySize    <    =    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
479	[BUG]  [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Short.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Short.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Short.MAX_VALUE)  {	  if(entrySize    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
480	[BUG]  [BUGGY]  if(entrySize  *  blockSize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  blockSize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  blockSize  <  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
481	[BUG]  [BUGGY]  if(entrySize  *  this.blockSize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(entrySize  *  this.blockSize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	181	181	1	replace	if(entrySize  *  this.blockSize  <  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
