bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  val  =  key.substring(ent.length());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.length());	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  String  val  =  entry.substring(key.length());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.substring(key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.substring(key.length());	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  String  val  =  key.substring(ent.length()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.length()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.length()  +  1);	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  String  val  =  key.substring(ent.length())+  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.length())+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.length())+  1;	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  String  val  =  value.substring(ent.length()  -  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.length()  -  1);	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  String  val  =  str.substring(ent.length()  -  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  str.substring(ent.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  str.substring(ent.length()  -  1);	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  val  =  key.substring(ent.length());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  key.substring(ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  key.substring(ent.length());	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  entry.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  entry.getValue();	  Entry    <    String,    String>    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
9	[BUG]  [BUGGY]  Entry  <  String>  val  =  ent.getValue();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String>  val  =  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String>  val  =  ent.getValue();	  Entry    <    String,    String>    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
10	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  key.getKey();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  key.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  key.getKey();	  Entry    <    String,    String>    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
11	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  ent.getEntry();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  ent.getEntry();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  ent.getEntry();	  Entry    <    String,    String>    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
12	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  ent.getKey();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  ent.getKey();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
13	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  ent.getValue();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  ent.getValue();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
14	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  key.getValue();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  key.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  key.getValue();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
15	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  ent.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  ent.getValue()  +  1;	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
16	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  ent.getKey();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  ent.getKey();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
17	[BUG]  [BUGGY]  String  val  =  ent.toLowerCase(Locale.ENGLISH);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toLowerCase(Locale.ENGLISH);	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
18	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.getValue());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.getValue());	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
19	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(ent.getLocale());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(ent.getLocale());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(ent.getLocale());	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
20	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(Locale.US);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(Locale.US);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(Locale.US);	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
21	[BUG]  [BUGGY]  String  val  =  key.toUpperCase(Locale.ENGLISH);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toUpperCase(Locale.ENGLISH);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toUpperCase(Locale.ENGLISH);	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
22	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH)+  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH)+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(Locale.ENGLISH)+  1;	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
23	[BUG]  [BUGGY]  String  val  =  ent.getValue()  /  1;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  /  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  /  1;	  String    val    =    ent.getValue()    *    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
24	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  2;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  2;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  2;	  String    val    =    ent.getValue()    *    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
25	[BUG]  [BUGGY]  String  val  =  key.getValue()  *  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  *  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  *  1;	  String    val    =    ent.getValue()    *    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
26	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  4;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  4;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  4;	  String    val    =    ent.getValue()    *    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
27	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  3;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  3;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  3;	  String    val    =    ent.getValue()    *    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
28	[BUG]  [BUGGY]  String  val  =  key.toString()  + "/ ";  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + "/ ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + "/ ";	  String    val    =    key.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  String  val  =  key.toString()  + ": ";  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ": ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ": ";	  String    val    =    key.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  String  val  =  key.toString()  + ".null ";  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ".null ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ".null ";	  String    val    =    key.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  String  val  =  key.toString()  + "null ";  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + "null ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + "null ";	  String    val    =    key.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  String  val  =  key.toString()  + "_ ";  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + "_ ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + "_ ";	  String    val    =    key.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  String  val  =  key.toString()  + "   ";  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + "   ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + "   ";	  String    val    =    key.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  key  +  2;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  key  +  2;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  key  +  2;	  String    val    =    ent.getValue()    +    key    +    2;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
35	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getKey()  +  2;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getKey()  +  2;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getKey()  +  2;	  String    val    =    ent.getValue()    +    key    +    2;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
36	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  +  4;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  +  4;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  +  4;	  String    val    =    ent.getValue()    +    key    +    2;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
37	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  +  3;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  +  3;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  +  3;	  String    val    =    ent.getValue()    +    key    +    2;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
38	[BUG]  [BUGGY]  String  val  =  key.getKey()  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getKey()  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getKey()  +  ent.getValue();	  String    val    =    ent.getKey()    +    key;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
39	[BUG]  [BUGGY]  String  val  =  ent.getKey()  /  key;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getKey()  /  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getKey()  /  key;	  String    val    =    ent.getKey()    +    key;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
40	[BUG]  [BUGGY]  String  val  =  ent.getKey()  +  key  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getKey()  +  key  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getKey()  +  key  +  1;	  String    val    =    ent.getKey()    +    key;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
41	[BUG]  [BUGGY]  String  val  =  ent.getKey()  *  key;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getKey()  *  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getKey()  *  key;	  String    val    =    ent.getKey()    +    key;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
42	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getChars());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getChars());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getChars());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
43	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1,  ent.getValue());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1,  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey()  +  1,  ent.getValue());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
44	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.getChars());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.getChars());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  1,  ent.getChars());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
45	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1,  ent.getChars());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1,  ent.getChars());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey()  +  1,  ent.getChars());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
46	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getEncoding());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getEncoding());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.getEncoding());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
47	[BUG]  [BUGGY]  val  =  key.substring(ent.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  key.substring(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  key.substring(ent.getValue());	  String    val    =    value.substring(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
48	[BUG]  [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.getValue()  +  1);	  String    val    =    value.substring(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
49	[BUG]  [BUGGY]  String  val  =  value.substring(ent.getValue(),  key);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.getValue(),  key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.getValue(),  key);	  String    val    =    value.substring(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
50	[BUG]  [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  key.length());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.getValue()  +  1,  key.length());	  String    val    =    value.substring(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
51	[BUG]  [BUGGY]  String  val  =  entry.substring(value.getValue());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.substring(value.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.substring(value.getValue());	  String    val    =    value.substring(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
52	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getValue());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getValue());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
53	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getValue(),  ent.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getValue(),  ent.getCharset());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.getValue(),  ent.getCharset());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
54	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  1,  ent.getValue());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
55	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getCurrentEntry();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getCurrentEntry();	  Entry    <    String,    String>    currEntry    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
56	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getKey()  +  1;	  Entry    <    String,    String>    currEntry    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
57	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey()  +  1);	  String    val    =    key.substring(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey(),  ent.length());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey(),  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey(),  ent.length());	  String    val    =    key.substring(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
59	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey(),  ent.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey(),  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey(),  ent.getValue());	  String    val    =    key.substring(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
60	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1,  ent.length());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey()  +  1,  ent.length());	  String    val    =    key.substring(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
61	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key.getKey());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key.getKey());	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
62	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey(),  key);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey(),  key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey(),  key);	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
63	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key.getValue());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key.getValue());	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
64	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.getValue());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(ent.getValue());	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
65	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key.toLowerCase());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key.toLowerCase());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key.toLowerCase());	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
66	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key.toString());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key.toString());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key.toString());	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
67	[BUG]  [BUGGY]  String  val  =  key.trim()  +  ent.getKey();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  +  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  +  ent.getKey();	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
68	[BUG]  [BUGGY]  String  val  =  value.trim()  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.trim()  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.trim()  +  ent.getValue();	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
69	[BUG]  [BUGGY]  String  val  =  ent.trim()  +  key.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.trim()  +  key.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.trim()  +  key.getValue();	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
70	[BUG]  [BUGGY]  String  val  =  key.trim()  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  +  ent.toString();	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
71	[BUG]  [BUGGY]  String  val  =  key.trim()  +  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  +  ent.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  +  ent.getValue()  +  1;	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
72	[BUG]  [BUGGY]  String  val  =  key.trim()  *  ent.getValue();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  *  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  *  ent.getValue();	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
73	[BUG]  [BUGGY]  String  val  =  key.trim()  + ",: "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ",: "  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ",: "  +  ent.getValue();	  String    val    =    key.trim()    +   ":   "    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  String  val  =  key.trim()  + ".: "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ".: "  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ".: "  +  ent.getValue();	  String    val    =    key.trim()    +   ":   "    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  key,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  key,  hasHitEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  key,  hasHitEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
76	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key,  hasHitEOF  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key,  hasHitEOF  ||  hasHitEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key,  hasHitEOF  ||  hasHitEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
77	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key,  isEOF;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key,  isEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key,  isEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
78	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key,  hasHitEOF,  isEncoding;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key,  hasHitEOF,  isEncoding;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key,  hasHitEOF,  isEncoding;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
79	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getKey(),  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getKey(),  hasHitEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getKey(),  hasHitEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
80	[BUG]  [BUGGY]  String  val  =  ent.getKey()  +  key,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getKey()  +  key,  hasHitEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getKey()  +  key,  hasHitEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
81	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(ent.getKey());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(ent.getKey());	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
82	[BUG]  [BUGGY]  String  val  =  ent.toLowerCase(key.getValue());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toLowerCase(key.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toLowerCase(key.getValue());	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
83	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(ent.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(ent.getValue()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(ent.getValue()  +  1);	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
84	[BUG]  [BUGGY]  String  val  =  ent.getValue().toLowerCase(key);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue().toLowerCase(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue().toLowerCase(key);	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
85	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(ent.getValue()).trim();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(ent.getValue()).trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(ent.getValue()).trim();	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
86	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(ent.getValue())+  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(ent.getValue())+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(ent.getValue())+  1;	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
87	[BUG]  [BUGGY]  String  val  =  ent.substring(key.length()  -  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.length()  -  1);	  String    val    =    ent.substring(key.length());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
88	[BUG]  [BUGGY]  String  val  =  ent.substring(0,  ent.length());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(0,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(0,  ent.length());	  String    val    =    ent.substring(key.length());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
89	[BUG]  [BUGGY]  String  val  =  ent.substring(key.length()  -  2);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.length()  -  2);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.length()  -  2);	  String    val    =    ent.substring(key.length());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
90	[BUG]  [BUGGY]  String  val  =  ent.substring(key.length()  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.length()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.length()  +  1);	  String    val    =    ent.substring(key.length());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
91	[BUG]  [BUGGY]  String  val  =  ent.substring(key.length()  -  4);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.length()  -  4);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.length()  -  4);	  String    val    =    ent.substring(key.length());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
92	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.key);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(ent.key);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
93	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  +  1);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
94	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  -  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  -  1);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
95	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key)+  1;  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key)+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key)+  1;	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
96	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  val);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  val);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  +  val);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
97	[BUG]  [BUGGY]  String  val  =  key.toString()  + ",n "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ",n "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ",n "  +  ent.toString();	  String    val    =    key.toString()    +   ",   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
98	[BUG]  [BUGGY]  String  val  =  key.toString()  + "., "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + "., "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + "., "  +  ent.toString();	  String    val    =    key.toString()    +   ",   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
99	[BUG]  [BUGGY]  String  val  =  key.toString()  + ",' "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ",' "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ",' "  +  ent.toString();	  String    val    =    key.toString()    +   ",   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
100	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey().iterator().next();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey().iterator().next();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getKey().iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
101	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).iterator().next();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).iterator().next();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key).iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
102	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().iterator().next();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.keySet().iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
103	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next(),  key);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next(),  key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next(),  key);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
104	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue().iterator().next();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue().iterator().next();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue().iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
105	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.iterator().next();  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.iterator().next();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.iterator().next();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
106	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue())+  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue())+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue())+  1;	  String    val    =    key.substring(ent.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
107	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()).trim();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()).trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()).trim();	  String    val    =    key.substring(ent.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
108	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getValue()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getValue()  +  1);	  String    val    =    key.substring(ent.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
109	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  2);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  2);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  2);	  String    val    =    key.substring(ent.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
110	[BUG]  [BUGGY]  String  val  =  key.getValue()  /  ent.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  /  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  /  ent.getValue();	  String    val    =    ent.getValue()    /    key;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
111	[BUG]  [BUGGY]  String  val  =  key.getValue()  /  ent;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  /  ent;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  /  ent;	  String    val    =    ent.getValue()    /    key;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
112	[BUG]  [BUGGY]  String  val  =  key.getValue()  /  ent.getKey();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  /  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  /  ent.getKey();	  String    val    =    ent.getValue()    /    key;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
113	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  key  +  1;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  key  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  key  +  1;	  String    val    =    ent.getValue()    +    key    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
114	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getValue()  +  1;	  String    val    =    ent.getValue()    +    key    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
115	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getKey()  +  1;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getKey()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getKey()  +  1;	  String    val    =    ent.getValue()    +    key    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
116	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey(),  ent.getEncoding());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey(),  ent.getEncoding());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey(),  ent.getEncoding());	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
117	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getCharacterEncoding());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getCharacterEncoding());	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
118	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding()  +  1);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getEncoding()  +  1);	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
119	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  cache);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  cache);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  cache);	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
120	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getCharset());  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getCharset());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getCharset());	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
121	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  0);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  0);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  0);	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
122	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  *  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  *  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  *  1);	  String    val    =    key.substring(ent.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
123	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey()  -  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey()  -  1);	  String    val    =    key.substring(ent.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
124	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue())-  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue())-  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue())-  1;	  String    val    =    key.substring(ent.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
125	[BUG]  [BUGGY]  String  val  =  entry.toUpperCase(key);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toUpperCase(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toUpperCase(key);	  String    val    =    entry.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
126	[BUG]  [BUGGY]  String  val  =  entry.toUpperCase()  +  key;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toUpperCase()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toUpperCase()  +  key;	  String    val    =    entry.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
127	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  -  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.length()  -  1);	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
128	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.length()  +  1);	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
129	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getValue(),  ent.length());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getValue(),  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getValue(),  ent.length());	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
130	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  -  2);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  -  2);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.length()  -  2);	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
131	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  +  1,  ent.length());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  +  1,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.length()  +  1,  ent.length());	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
132	[BUG]  [BUGGY]  String  val  =  ent.substring(ent.getValue(),  key.length());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(ent.getValue(),  key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(ent.getValue(),  key.length());	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
133	[BUG]  [BUGGY]  String  val  =  key.toUpperCase(ent.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toUpperCase(ent.getValue()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toUpperCase(ent.getValue()  +  1);	  String    val    =    key.toUpperCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
134	[BUG]  [BUGGY]  String  val  =  ent.toUpperCase(key.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toUpperCase(key.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toUpperCase(key.getValue());	  String    val    =    key.toUpperCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
135	[BUG]  [BUGGY]  String  val  =  value.toUpperCase(ent.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.toUpperCase(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.toUpperCase(ent.getValue());	  String    val    =    key.toUpperCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
136	[BUG]  [BUGGY]  String  val  =  ent.getValue().toUpperCase(key);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue().toUpperCase(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue().toUpperCase(key);	  String    val    =    key.toUpperCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
137	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  1);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
138	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key).toLowerCase();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key).toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key).toLowerCase();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
139	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key)+  1;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key)+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key)+  1;	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
140	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().get(key);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().get(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.keySet().get(key);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
141	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  + ".000 ");  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  + ".000 ");  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  + ".000 ");	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
142	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key.getValue();	  String    val    =    key.getValue()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
143	[BUG]  [BUGGY]  String  val  =  key.getValue()  *  ent.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  *  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  *  ent.getValue();	  String    val    =    key.getValue()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
144	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getKey();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getKey();	  String    val    =    key.getValue()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
145	[BUG]  [BUGGY]  String  val  =  key.getString()  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getString()  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getString()  +  ent.getValue();	  String    val    =    key.getValue()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
146	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  key  +  length;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  key  +  length;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  key  +  length;	  String    val    =    ent.getValue()    +    key    +    length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
147	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getLength();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getLength();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getLength();	  String    val    =    ent.getValue()    +    key    +    length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
148	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  +  length  +  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  +  length  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  +  length  +  1;	  String    val    =    ent.getValue()    +    key    +    length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
149	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase()  +  1;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase()  +  1;	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
150	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase(Locale.ENGLISH);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase(Locale.ENGLISH);	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
151	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase(Locale.getDefault());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase(Locale.getDefault());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase(Locale.getDefault());	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
152	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase(ent.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase(ent.getValue());	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
153	[BUG]  [BUGGY]  String  val  =  key.trim().toUpperCase();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toUpperCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toUpperCase();	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
154	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase(Long.parseLong(ent.getKey()));  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase(Long.parseLong(ent.getKey()));  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase(Long.parseLong(ent.getKey()));	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
155	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(ent.getKey())+  1;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(ent.getKey())+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(ent.getKey())+  1;	  String    val    =    key.toLowerCase()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
156	[BUG]  [BUGGY]  String  val  =  ent.trim()  +  key;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.trim()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.trim()  +  key;	  String    val    =    ent.trim();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
157	[BUG]  [BUGGY]  char  val  =  ent.trim();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  char  val  =  ent.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	char  val  =  ent.trim();	  String    val    =    ent.trim();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
158	[BUG]  [BUGGY]  byte  val  =  ent.trim();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  byte  val  =  ent.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	byte  val  =  ent.trim();	  String    val    =    ent.trim();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
159	[BUG]  [BUGGY]  String  val  =  ent.trim()  +  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.trim()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.trim()  +  1;	  String    val    =    ent.trim();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
160	[BUG]  [BUGGY]  String  val  =  key.substring(0,  key.length());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  key.length());	  String    val    =    key.substring(0,    key.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
161	[BUG]  [BUGGY]  String  val  =  key.substring(0,  key.length()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  key.length()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  key.length()  +  1);	  String    val    =    key.substring(0,    key.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
162	[BUG]  [BUGGY]  val  =  key.substring(0,  key.length());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  key.substring(0,  key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  key.substring(0,  key.length());	  String    val    =    key.substring(0,    key.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
163	[BUG]  [BUGGY]  String  val  =  key.substring(0,  key.length()));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  key.length()));  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  key.length()));	  String    val    =    key.substring(0,    key.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
164	[BUG]  [BUGGY]  char  val  =  key.substring(0,  key.length()  -  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  char  val  =  key.substring(0,  key.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	char  val  =  key.substring(0,  key.length()  -  1);	  String    val    =    key.substring(0,    key.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
165	[BUG]  [BUGGY]  String  val  =  key.substring(0,  key.length())+  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  key.length())+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  key.length())+  1;	  String    val    =    key.substring(0,    key.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
166	[BUG]  [BUGGY]  String  val  =  value  ==  null?  null  :  value.trim();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value  ==  null?  null  :  value.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value  ==  null?  null  :  value.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
167	[BUG]  [BUGGY]  String  val  =  value!=  null?  null  :  value.trim();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  null  :  value.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  null  :  value.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
168	[BUG]  [BUGGY]  String  val  =  value.trim()  + ": "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.trim()  + ": "  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.trim()  + ": "  +  ent.getValue();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
169	[BUG]  [BUGGY]  String  val  =  value.trim()  + "( "+ent.getValue()  + ") ";  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.trim()  + "( "+ent.getValue()  + ") ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.trim()  + "( "+ent.getValue()  + ") ";	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
170	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.trim()  :  val.trim();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.trim()  :  val.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.trim()  :  val.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
171	[BUG]  [BUGGY]  Character  val  =  ent.getKey();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Character  val  =  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Character  val  =  ent.getKey();	  char    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
172	[BUG]  [BUGGY]  Key  val  =  ent.getKey();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Key  val  =  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Key  val  =  ent.getKey();	  char    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
173	[BUG]  [BUGGY]  Char  val  =  ent.getKey();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Char  val  =  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Char  val  =  ent.getKey();	  char    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
174	[BUG]  [BUGGY]  String  val  =  key.substring(ent.toString());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.toString());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.toString());	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
175	[BUG]  [BUGGY]  char  val  =  ent.toString();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  char  val  =  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	char  val  =  ent.toString();	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
176	[BUG]  [BUGGY]  String  val  =  ent.toString()  + ": "  +  key;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toString()  + ": "  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toString()  + ": "  +  key;	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
177	[BUG]  [BUGGY]  String  val  =  value.toString();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.toString();	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
178	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength()  -  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength()  -  1);	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
179	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getLength());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getLength());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getLength());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
180	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1,  ent.getLength());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey()  +  1,  ent.getLength());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey()  +  1,  ent.getLength());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
181	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.getLength());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.getLength());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  1,  ent.getLength());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
182	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength()  +  1);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength()  +  1);	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
183	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength(),  ent.getCharset());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength(),  ent.getCharset());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength(),  ent.getCharset());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
184	[BUG]  [BUGGY]  String  val  =  key.trim()  + ".: "  +  ent.getKey();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ".: "  +  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ".: "  +  ent.getKey();	  String    val    =    key.trim()    +   ":   "    +    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
185	[BUG]  [BUGGY]  String  val  =  key.trim()  + ",: "  +  ent.getKey();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ",: "  +  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ",: "  +  ent.getKey();	  String    val    =    key.trim()    +   ":   "    +    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
186	[BUG]  [BUGGY]  String  val  =  ent.trim()  + ": "  +  key.getKey();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.trim()  + ": "  +  key.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.trim()  + ": "  +  key.getKey();	  String    val    =    key.trim()    +   ":   "    +    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
187	[BUG]  [BUGGY]  val  =  key.getValue();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  key.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  key.getValue();	  val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
188	[BUG]  [BUGGY]  val  =  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  ent.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  ent.getValue()  +  1;	  val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
189	[BUG]  [BUGGY]  String  val  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.getValue();	  String    val    =    ent.getValue()    +    2;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
190	[BUG]  [BUGGY]  String  val  =  key.substring(0,  value.length());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  value.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  value.length());	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
191	[BUG]  [BUGGY]  char  val  =  key.substring(0,  key.length());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  char  val  =  key.substring(0,  key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	char  val  =  key.substring(0,  key.length());	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
192	[BUG]  [BUGGY]  String  val  =  key.substring(0,  key.length();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  key.length();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  key.length();	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
193	[BUG]  [BUGGY]  CharType  val  =  key.substring(0,  key.length());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  CharType  val  =  key.substring(0,  key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	CharType  val  =  key.substring(0,  key.length());	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
194	[BUG]  [BUGGY]  String  val  =  key.substring(0,  count.length());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  count.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  count.length());	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
195	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  + ",  hasHitEOF: ";  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  + ",  hasHitEOF: ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  + ",  hasHitEOF: ";	  String    val    =    ent.getValue()    +    key    +   ":   ";    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
196	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getName()  + ": ";  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getName()  + ": ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getName()  + ": ";	  String    val    =    ent.getValue()    +    key    +   ":   ";    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
197	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  + ".: ";  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  + ".: ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  + ".: ";	  String    val    =    ent.getValue()    +    key    +   ":   ";    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
198	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getName()  + ".: ";  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getName()  + ".: ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getName()  + ".: ";	  String    val    =    ent.getValue()    +    key    +   ":   ";    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
199	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getKey()  + ": ";  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getKey()  + ": ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getKey()  + ": ";	  String    val    =    ent.getValue()    +    key    +   ":   ";    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
200	[BUG]  [BUGGY]  String  val  =  ent.getKey()  +  key  + ": ";  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getKey()  +  key  + ": ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getKey()  +  key  + ": ";	  String    val    =    ent.getValue()    +    key    +   ":   ";    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
201	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getKey());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getKey());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
202	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.getKey());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  1,  ent.getKey());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
203	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.getKey());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getValue()  +  1,  ent.getKey());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
204	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLowerCase());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLowerCase());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.getLowerCase());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
205	[BUG]  [BUGGY]  String  val  =  key  ==  null?  key.trim()  :  val;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  key.trim()  :  val;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  key.trim()  :  val;	  String    val    =    key!=    null?    key.trim()    :    val;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
206	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.trim()  :  ent.getValue();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.trim()  :  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.trim()  :  ent.getValue();	  String    val    =    key!=    null?    key.trim()    :    val;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
207	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.trim()  :  val;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.trim()  :  val;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.trim()  :  val;	  String    val    =    key!=    null?    key.trim()    :    val;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
208	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.trim()  :  ent.getKey();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.trim()  :  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.trim()  :  ent.getKey();	  String    val    =    key!=    null?    key.trim()    :    val;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
209	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getKey(),  encoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getKey(),  encoding);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getKey(),  encoding);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
210	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  1);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
211	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  cache);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  cache);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  cache);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
212	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  0);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  0);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  0);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
213	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  2);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  2);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  2);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
214	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  encoding  +  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  encoding  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  encoding  +  1);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
215	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  4);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  4);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  4);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
216	[BUG]  [BUGGY]  String  val  =  key.getShortName();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getShortName();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getShortName();	  String    val    =    ent.getShortName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
217	[BUG]  [BUGGY]  String  val  =  ent.getShortName()  +  key;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getShortName()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getShortName()  +  key;	  String    val    =    ent.getShortName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
218	[BUG]  [BUGGY]  String  val  =  ent.getQualifiedName();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getQualifiedName();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getQualifiedName();	  String    val    =    ent.getShortName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
219	[BUG]  [BUGGY]  String  val  =  ent.getShortName()  +  1;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getShortName()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getShortName()  +  1;	  String    val    =    ent.getShortName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
220	[BUG]  [BUGGY]  String  val  =  ent.getShortName()  + ": "  +  key;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getShortName()  + ": "  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getShortName()  + ": "  +  key;	  String    val    =    ent.getShortName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
221	[BUG]  [BUGGY]  String  val  =  ent.getKey()  *  val;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getKey()  *  val;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getKey()  *  val;	  String    val    =    ent.getValue()    *    key;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
222	[BUG]  [BUGGY]  String  val  =  key.getValue()  *  ent;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  *  ent;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  *  ent;	  String    val    =    ent.getValue()    *    key;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
223	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  key.toLowerCase();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  key.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  key.toLowerCase();	  String    val    =    ent.getValue()    *    key;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
224	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toString()  :  encoding;  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toString()  :  encoding;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toString()  :  encoding;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
225	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.toString()  :  encoding;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.toString()  :  encoding;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.toString()  :  encoding;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
226	[BUG]  [BUGGY]  String  val  =  key  ==  null?  key.toString()  :  value;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  key.toString()  :  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  key.toString()  :  value;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
227	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.toString()  :  ent.toString();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.toString()  :  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.toString()  :  ent.toString();	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
228	[BUG]  [BUGGY]  String  val  =  key  ==  null?  key.toString()  :  encoding;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  key.toString()  :  encoding;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  key.toString()  :  encoding;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
229	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toString()  :  ent.toString();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toString()  :  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toString()  :  ent.toString();	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
230	[BUG]  [BUGGY]  String  val  =  key.trim()  + ",   "  +  ent.getKey();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ",   "  +  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ",   "  +  ent.getKey();	  String    val    =    key.trim()    +   ",   "    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
231	[BUG]  [BUGGY]  String  val  =  key.trim()  + ",n "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ",n "  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ",n "  +  ent.getValue();	  String    val    =    key.trim()    +   ",   "    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
232	[BUG]  [BUGGY]  String  val  =  key.trim()  + ".: "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ".: "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ".: "  +  ent.toString();	  String    val    =    key.trim()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
233	[BUG]  [BUGGY]  String  val  =  key.trim()  + ",: "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ",: "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ",: "  +  ent.toString();	  String    val    =    key.trim()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
234	[BUG]  [BUGGY]  String  val  =  key.trim()  + ",   "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ",   "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ",   "  +  ent.toString();	  String    val    =    key.trim()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
235	[BUG]  [BUGGY]  Value  val  =  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Value  val  =  ent.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Value  val  =  ent.getValue()  +  1;	  Value    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
236	[BUG]  [BUGGY]  Value  val  =  key.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Value  val  =  key.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Value  val  =  key.getValue();	  Value    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
237	[BUG]  [BUGGY]  Value  val  =  ent.getValue()  +  key;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Value  val  =  ent.getValue()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Value  val  =  ent.getValue()  +  key;	  Value    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
238	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  key.getKey();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  key.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  key.getKey();	  Entry    <    String,    String>    currEntry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
239	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey()  +  key;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getKey()  +  key;	  Entry    <    String,    String>    currEntry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
240	[BUG]  [BUGGY]  String  val  =  ent.substring(0,  ent.getValue());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(0,  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(0,  ent.getValue());	  String    val    =    ent.substring(key.getValue());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
241	[BUG]  [BUGGY]  String  val  =  ent.substring(key.lastIndexOf('.'));  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.lastIndexOf('.'));  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.lastIndexOf('.'));	  String    val    =    ent.substring(key.getValue());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
242	[BUG]  [BUGGY]  String  val  =  ent.substring(ent.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(ent.getValue()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(ent.getValue()  +  1);	  String    val    =    ent.substring(key.getValue());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
243	[BUG]  [BUGGY]  String  val  =  ent.substring(key.length(),  ent.length());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.length(),  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.length(),  ent.length());	  String    val    =    ent.substring(key.getValue());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
244	[BUG]  [BUGGY]  String  val  =  key.getKey()  +  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getKey()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getKey()  +  1;	  String    val    =    key.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
245	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  2;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  2;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  2;	  String    val    =    key.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
246	[BUG]  [BUGGY]  String  val  =  ent.toUpperCase(key.getKey());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toUpperCase(key.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toUpperCase(key.getKey());	  String    val    =    key.toUpperCase(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
247	[BUG]  [BUGGY]  String  val  =  ent.toUpperCase(key);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toUpperCase(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toUpperCase(key);	  String    val    =    key.toUpperCase(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
248	[BUG]  [BUGGY]  String  val  =  key.toUpperCase(ent.getKey()  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toUpperCase(ent.getKey()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toUpperCase(ent.getKey()  +  1);	  String    val    =    key.toUpperCase(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
249	[BUG]  [BUGGY]  String  val  =  key  ==  null?  key.toLowerCase()  :  value;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  key.toLowerCase()  :  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  key.toLowerCase()  :  value;	  String    val    =    key!=    null?    key.toLowerCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
250	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toLowerCase()  :  key;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toLowerCase()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toLowerCase()  :  key;	  String    val    =    key!=    null?    key.toLowerCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
251	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toLowerCase()  :  key.toLowerCase();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toLowerCase()  :  key.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toLowerCase()  :  key.toLowerCase();	  String    val    =    key!=    null?    key.toLowerCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
252	[BUG]  [BUGGY]  String  val  =  key.getShortKey();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getShortKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getShortKey();	  String    val    =    ent.getShortKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
253	[BUG]  [BUGGY]  String  val  =  ent.getShortKey()  +  key;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getShortKey()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getShortKey()  +  key;	  String    val    =    ent.getShortKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
254	[BUG]  [BUGGY]  String  val  =  ent.getShortValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getShortValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getShortValue();	  String    val    =    ent.getShortKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
255	[BUG]  [BUGGY]  String  val  =  ent.getRawValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getRawValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getRawValue();	  String    val    =    ent.getShortKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
256	[BUG]  [BUGGY]  String  val  =  ent.toLowerCase()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toLowerCase()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toLowerCase()  +  1;	  String    val    =    ent.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
257	[BUG]  [BUGGY]  String  val  =  key.toString()  + ".js "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ".js "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ".js "  +  ent.toString();	  String    val    =    key.toString()    +   ".   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
258	[BUG]  [BUGGY]  String  val  =  key.toString()  + ".html "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ".html "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ".html "  +  ent.toString();	  String    val    =    key.toString()    +   ".   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
259	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.length()  -  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.length()  -  1);	  String    val    =    key.substring(ent.getValue()    +    1,    ent.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
260	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.length()  -  2);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.length()  -  2);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.length()  -  2);	  String    val    =    key.substring(ent.getValue()    +    1,    ent.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
261	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.length());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  1,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  1,  ent.length());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
262	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.length());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getValue()  +  1,  ent.length());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
263	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toUpperCase()  :  key;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toUpperCase()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toUpperCase()  :  key;	  String    val    =    key!=    null?    key.toUpperCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
264	[BUG]  [BUGGY]  String  val  =  key  ==  null?  key.toUpperCase()  :  value;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  key.toUpperCase()  :  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  key.toUpperCase()  :  value;	  String    val    =    key!=    null?    key.toUpperCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
265	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.toUpperCase()  :  ent.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.toUpperCase()  :  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.toUpperCase()  :  ent.getValue();	  String    val    =    key!=    null?    key.toUpperCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
266	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toUpperCase()  :  key.toLowerCase();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toUpperCase()  :  key.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toUpperCase()  :  key.toLowerCase();	  String    val    =    key!=    null?    key.toUpperCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
267	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue()  +  1;	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
268	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  key;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue()  +  key;	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
269	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  key.getValue();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  key.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  key.getValue();	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
270	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue().trim();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue().trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue().trim();	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
271	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  ent.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  ent.getValue()  +  1;	  Entry    <    String,    String>    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
272	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  key.getValue();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  key.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  key.getValue();	  Entry    <    String,    String>    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
273	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  ent.getValue()  +  key;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  ent.getValue()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  ent.getValue()  +  key;	  Entry    <    String,    String>    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
274	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  ent.getValue().trim();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  ent.getValue().trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  ent.getValue().trim();	  Entry    <    String,    String>    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
275	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  entry.getValue()  +  1;	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
276	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  key;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  entry.getValue()  +  key;	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
277	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.trim()  :  encoding;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.trim()  :  encoding;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.trim()  :  encoding;	  String    val    =    key!=    null?    key.trim()    :    value;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
278	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.trim()  :  encoding;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.trim()  :  encoding;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.trim()  :  encoding;	  String    val    =    key!=    null?    key.trim()    :    value;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
279	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.trim()  :  key;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.trim()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.trim()  :  key;	  String    val    =    key!=    null?    key.trim()    :    value;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
280	[BUG]  [BUGGY]  String  val  =  key.toUpperCase(ent.getKey())+  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toUpperCase(ent.getKey())+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toUpperCase(ent.getKey())+  1;	  String    val    =    key.toUpperCase()    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
281	[BUG]  [BUGGY]  String  val  =  ent.getRawValue()  +  1;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getRawValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getRawValue()  +  1;	  String    val    =    ent.getKey()    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
282	[BUG]  [BUGGY]  String  val  =  ent.getRawKey();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getRawKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getRawKey();	  String    val    =    ent.getKey()    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
283	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getKey();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getKey();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
284	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  entry.getValue();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  entry.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  entry.getValue();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
285	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getValue()  +  1;	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
286	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getValue()  +  key;  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getValue()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entry.getValue()  +  key;	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
287	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.keySet().iterator();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.keySet().iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
288	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).iterator();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).iterator();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key).iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
289	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.iterator();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.iterator();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
290	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey().iterator();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getKey().iterator();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getKey().iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
291	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  key;  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  key;	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
292	[BUG]  [BUGGY]  String  val  =  key  ==  null?  key.trim()  :  encoding;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  key.trim()  :  encoding;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  key.trim()  :  encoding;	  String    val    =    key    ==    null?    key.trim()    :    value;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
293	[BUG]  [BUGGY]  String  val  =  key  ==  null?  value.trim()  :  key;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  value.trim()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  value.trim()  :  key;	  String    val    =    key    ==    null?    key.trim()    :    value;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
294	[BUG]  [BUGGY]  String  val  =  key  ==  null?  value.trim()  :  encoding;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  value.trim()  :  encoding;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  value.trim()  :  encoding;	  String    val    =    key    ==    null?    key.trim()    :    value;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
295	[BUG]  [BUGGY]  String  val  =  ent.toUpperCase()  +  key;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toUpperCase()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toUpperCase()  +  key;	  String    val    =    ent.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
296	[BUG]  [BUGGY]  String  val  =  entry.toLowerCase()  +  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toLowerCase()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toLowerCase()  +  1;	  String    val    =    entry.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
297	[BUG]  [BUGGY]  String  val  =  entry.toLowerCase(key);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toLowerCase(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toLowerCase(key);	  String    val    =    entry.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
298	[BUG]  [BUGGY]  String  val  =  key.toString()  + ".: "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ".: "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ".: "  +  ent.toString();	  String    val    =    key.toString()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
299	[BUG]  [BUGGY]  String  val  =  key.toString()  + ",: "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ",: "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ",: "  +  ent.toString();	  String    val    =    key.toString()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
300	[BUG]  [BUGGY]  String  val  =  key.toString()  + ",  val: "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ",  val: "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ",  val: "  +  ent.toString();	  String    val    =    key.toString()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
301	[BUG]  [BUGGY]  String  val  =  key.toString()  + ": "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ": "  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ": "  +  ent.getValue();	  String    val    =    key.toString()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
302	[BUG]  [BUGGY]  String  val  =  key.toString()  + ": "  +  en.toString();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ": "  +  en.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ": "  +  en.toString();	  String    val    =    key.toString()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
303	[BUG]  [BUGGY]  String  val  =  key.toLowerCase()  *  1;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase()  *  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase()  *  1;	  String    val    =    key.toLowerCase()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
304	[BUG]  [BUGGY]  String  val  =  value.toLowerCase();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.toLowerCase();	  String    val    =    key.toLowerCase()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
305	[BUG]  [BUGGY]  String  val  =  key.toLowerCase()  [0];  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase()  [0];  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase()  [0];	  String    val    =    key.toLowerCase()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
306	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  -  4);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.length()  -  4);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.length()  -  4);	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
307	[BUG]  [BUGGY]  String  val  =  key.trim()  + ".   "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ".   "  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ".   "  +  ent.getValue();	  String    val    =    key.trim()    +   ",   "    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
308	[BUG]  [BUGGY]  String  val  =  key.trim()  + "., "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + "., "  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + "., "  +  ent.getValue();	  String    val    =    key.trim()    +   ",   "    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
309	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.getChars());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.getChars());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getValue()  +  1,  ent.getChars());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
310	[BUG]  [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.getChars());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.getChars());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.getValue()  +  1,  ent.getChars());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
311	[BUG]  [BUGGY]  String  val  =  string.substring(ent.getValue()  +  1,  ent.getChars());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  string.substring(ent.getValue()  +  1,  ent.getChars());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  string.substring(ent.getValue()  +  1,  ent.getChars());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
312	[BUG]  [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.getKey());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.getValue()  +  1,  ent.getKey());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
313	[BUG]  [BUGGY]  String  val  =  ent.getShortKey()  +  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getShortKey()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getShortKey()  +  1;	  String    val    =    ent.getShortKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
314	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.trim()  :  value;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.trim()  :  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.trim()  :  value;	  String    val    =    key!=    null?    key.trim()    :    value;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
315	[BUG]  [BUGGY]  String  val  =  ent.toLowerCase(len);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toLowerCase(len);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toLowerCase(len);	  String    val    =    ent.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
316	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  hasHitEOF);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  hasHitEOF);	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
317	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getValue(),  ent.getEncoding());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getValue(),  ent.getEncoding());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getValue(),  ent.getEncoding());	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
318	[BUG]  [BUGGY]  String  val  =  entry.substring(key.getKey());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.substring(key.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.substring(key.getKey());	  String    val    =    key.substring(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
319	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  currEntry.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  currEntry.getValue();	  Entry    <    String,    String>    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
320	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  ent.getValue(key);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  ent.getValue(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  ent.getValue(key);	  Entry    <    String,    String>    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
321	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase(len);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase(len);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase(len);	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
322	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase(UTF_8);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase(UTF_8);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase(UTF_8);	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
323	[BUG]  [BUGGY]  String  val  =  key.substring(0,  key.length()  +  2);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  key.length()  +  2);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  key.length()  +  2);	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
324	[BUG]  [BUGGY]  String  val  =  value.substring(0,  key.length());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(0,  key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(0,  key.length());	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
325	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().first();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().first();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().first();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
326	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.trim()  :  key;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.trim()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.trim()  :  key;	  String    val    =    key!=    null?    key.trim()    :    val;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
327	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  entry.getKey();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  entry.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry!=  null)?  null  :  entry.getKey();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
328	[BUG]  [BUGGY]  String  val  =  headers.substring(ent.length()  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  headers.substring(ent.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  headers.substring(ent.length()  -  1);	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
329	[BUG]  [BUGGY]  String  val  =  string.substring(ent.length()  -  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  string.substring(ent.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  string.substring(ent.length()  -  1);	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
330	[BUG]  [BUGGY]  String  val  =  currEntry.substring(key.length()  -  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  currEntry.substring(key.length()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  currEntry.substring(key.length()  -  1);	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
331	[BUG]  [BUGGY]  String  val  =  currEntry.substring(key.length());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  currEntry.substring(key.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  currEntry.substring(key.length());	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
332	[BUG]  [BUGGY]  String  val  =  string.substring(ent.length());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  string.substring(ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  string.substring(ent.length());	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
333	[BUG]  [BUGGY]  String  val  =  key.substring(0,  key.length()).trim();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  key.length()).trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  key.length()).trim();	  String    val    =    key.substring(0,    key.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
334	[BUG]  [BUGGY]  val  =  key.toLowerCase();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  key.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  key.toLowerCase();	  val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
335	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  5;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  5;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  5;	  String    val    =    ent.getValue()    *    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
336	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  +  this.length;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  +  this.length;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  +  this.length;	  String    val    =    ent.getValue()    +    key    +    length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
337	[BUG]  [BUGGY]  String  val  =  key.toString()  + "$ ";  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + "$ ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + "$ ";	  String    val    =    key.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
338	[BUG]  [BUGGY]  String  val  =  key.toString()  + ".js ";  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ".js ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ".js ";	  String    val    =    key.toString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
339	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.toUpperCase()  :  key;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.toUpperCase()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.toUpperCase()  :  key;	  String    val    =    key!=    null?    key.toUpperCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
340	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.toUpperCase()  :  key;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.toUpperCase()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.toUpperCase()  :  key;	  String    val    =    key!=    null?    key.toUpperCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
341	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue(key);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue(key);	  Entry    <    String,    String>    currEntry    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
342	[BUG]  [BUGGY]  String  val  =  key.toString()  +  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  +  1;	  String    val    =    key.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
343	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  3;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  3;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  3;	  String    val    =    key.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
344	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toString()  :  val;  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toString()  :  val;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toString()  :  val;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
345	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.toString()  :  key;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.toString()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.toString()  :  key;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
346	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.toString()  :  key;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.toString()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.toString()  :  key;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
347	[BUG]  [BUGGY]  String  val  =  key  ==  null?  key.toString()  :  val;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  key.toString()  :  val;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  key.toString()  :  val;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
348	[BUG]  [BUGGY]  String  val  =  key  ==  null?  value.toString()  :  key;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key  ==  null?  value.toString()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key  ==  null?  value.toString()  :  key;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
349	[BUG]  [BUGGY]  String  val  =  value!=  null?  value.trim()  :  key.toLowerCase();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  value.trim()  :  key.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  value.trim()  :  key.toLowerCase();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
350	[BUG]  [BUGGY]  String  val  =  value  ==  null?  value.trim()  :  key.toLowerCase();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value  ==  null?  value.trim()  :  key.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value  ==  null?  value.trim()  :  key.toLowerCase();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
351	[BUG]  [BUGGY]  String  val  =  value!=  null?  value.trim()  :  key.trim();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  value.trim()  :  key.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  value.trim()  :  key.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
352	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.trim()  :  value.trim();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.trim()  :  value.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.trim()  :  value.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
353	[BUG]  [BUGGY]  String  val  =  value  ==  null?  key.trim()  :  value.trim();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value  ==  null?  key.trim()  :  value.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value  ==  null?  key.trim()  :  value.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
354	[BUG]  [BUGGY]  String  val  =  value  ==  null?  key  :  value.trim();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value  ==  null?  key  :  value.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value  ==  null?  key  :  value.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
355	[BUG]  [BUGGY]  String  val  =  entry.toUpperCase()  +  1;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toUpperCase()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toUpperCase()  +  1;	  String    val    =    entry.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
356	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.getLength());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.getLength());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getValue()  +  1,  ent.getLength());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
357	[BUG]  [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.getLength());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.getLength());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.getValue()  +  1,  ent.getLength());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
358	[BUG]  [BUGGY]  String  val  =  string.substring(ent.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  string.substring(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  string.substring(ent.getValue());	  String    val    =    value.substring(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
359	[BUG]  [BUGGY]  String  val  =  entry.substring(ent.getValue());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.substring(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.substring(ent.getValue());	  String    val    =    value.substring(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
360	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  val);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  val);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  val);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
361	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  -  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  -  1);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
362	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key).trim();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key).trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key).trim();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
363	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key,  val);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key,  val);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key,  val);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
364	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  '/');  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  '/');  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().get(key  +  '/');	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
365	[BUG]  [BUGGY]  String  val  =  entry.toUpperCase(key.getKey());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toUpperCase(key.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toUpperCase(key.getKey());	  String    val    =    key.toUpperCase(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
366	[BUG]  [BUGGY]  String  val  =  entry.toUpperCase(key.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toUpperCase(key.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toUpperCase(key.getValue());	  String    val    =    key.toUpperCase(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
367	[BUG]  [BUGGY]  String  val  =  value  ==  null?  key.trim()  :  value;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value  ==  null?  key.trim()  :  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value  ==  null?  key.trim()  :  value;	  String    val    =    key    ==    null?    key.trim()    :    value;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
368	[BUG]  [BUGGY]  String  val  =  ent.toString()  + "n ";  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toString()  + "n ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toString()  + "n ";	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
369	[BUG]  [BUGGY]  String  val  =  ent.toString()  +  key;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toString()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toString()  +  key;	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
370	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.getValue()  :  ent.getKey();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.getValue()  :  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.getValue()  :  ent.getKey();	  String    val    =    key.getKey();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
371	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.getValue()  :  ent.getValue();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.getValue()  :  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.getValue()  :  ent.getValue();	  String    val    =    key.getKey();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
372	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  -  ent.getKey());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  -  ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  -  ent.getKey());	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
373	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  ent.getKey());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key  +  ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key  +  ent.getKey());	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
374	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey()  +  key);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey()  +  key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(ent.getKey()  +  key);	  Entry    <    String,    String>    currEntry    =    headers.get(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
375	[BUG]  [BUGGY]  String  val  =  value.getValue()  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.getValue()  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.getValue()  +  ent.getValue();	  String    val    =    key.getValue()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
376	[BUG]  [BUGGY]  String  val  =  entry.substring(key.getValue()  -  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.substring(key.getValue()  -  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.substring(key.getValue()  -  1);	  String    val    =    key.substring(ent.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
377	[BUG]  [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.length());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.getValue()  +  1,  ent.length());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
378	[BUG]  [BUGGY]  String  val  =  string.substring(ent.getValue()  +  1,  ent.length());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  string.substring(ent.getValue()  +  1,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  string.substring(ent.getValue()  +  1,  ent.length());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
379	[BUG]  [BUGGY]  Value  val  =  ent.getValue(key);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Value  val  =  ent.getValue(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Value  val  =  ent.getValue(key);	  Value    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
380	[BUG]  [BUGGY]  Value  val  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Value  val  =  currEntry.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Value  val  =  currEntry.getValue();	  Value    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
381	[BUG]  [BUGGY]  String  val  =  encoding.substring(ent.getValue(),  key);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  encoding.substring(ent.getValue(),  key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  encoding.substring(ent.getValue(),  key);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
382	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  value);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  value);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  value);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
383	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  length);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  length);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  length);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
384	[BUG]  [BUGGY]  String  val  =  key.toString()  + ",, "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ",, "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ",, "  +  ent.toString();	  String    val    =    key.toString()    +   ",   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
385	[BUG]  [BUGGY]  String  val  =  key!=  null?  value.toLowerCase()  :  key;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  value.toLowerCase()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  value.toLowerCase()  :  key;	  String    val    =    key!=    null?    key.toLowerCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
386	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.toLowerCase()  :  value;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.toLowerCase()  :  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.toLowerCase()  :  value;	  String    val    =    key!=    null?    key.toLowerCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
387	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.toLowerCase()  :  key;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.toLowerCase()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.toLowerCase()  :  key;	  String    val    =    key!=    null?    key.toLowerCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
388	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.entrySet().iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
389	[BUG]  [BUGGY]  String  val  =  ent.trim(key);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.trim(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.trim(key);	  String    val    =    ent.trim();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
390	[BUG]  [BUGGY]  String  val  =  entry.substring(key.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.substring(key.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.substring(key.getValue());	  String    val    =    key.substring(ent.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
391	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  key  +  value;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  key  +  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  key  +  value;	  String    val    =    ent.getValue()    *    key;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
392	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(entry);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(entry);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(entry);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
393	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(ent);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(ent);	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
394	[BUG]  [BUGGY]  String  val  =  ent.getKey()  +  value;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getKey()  +  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getKey()  +  value;	  String    val    =    ent.getKey()    +    key;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
395	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key,  hasHitEOF  ||  isEOF;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key,  hasHitEOF  ||  isEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key,  hasHitEOF  ||  isEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
396	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key,  cachedHitEOF;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key,  cachedHitEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key,  cachedHitEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
397	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key,  hashCodeEOF;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key,  hashCodeEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key,  hashCodeEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
398	[BUG]  [BUGGY]  String  val  =  ENT.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ENT.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ENT.getValue();	  String    val    =    ent.getValue()    +    2;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
399	[BUG]  [BUGGY]  String  val  =  key.getValue()  +  ent.getValue()  +  2;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getValue()  +  ent.getValue()  +  2;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getValue()  +  ent.getValue()  +  2;	  String    val    =    ent.getValue()    +    key    +    2;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
400	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH).trim();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH).trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(Locale.ENGLISH).trim();	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
401	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(Locale.ENGLISH  +  1);	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
402	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH).toLowerCase();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH).toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(Locale.ENGLISH).toLowerCase();	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
403	[BUG]  [BUGGY]  String  val  =  key.toString()  + ".. "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ".. "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ".. "  +  ent.toString();	  String    val    =    key.toString()    +   ".   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
404	[BUG]  [BUGGY]  String  val  =  key.toString()  + ".n "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ".n "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ".n "  +  ent.toString();	  String    val    =    key.toString()    +   ".   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
405	[BUG]  [BUGGY]  String  val  =  ent.getRawName();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getRawName();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getRawName();	  String    val    =    ent.getShortName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
406	[BUG]  [BUGGY]  String  val  =  ent.toUpperCase()  +  1;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toUpperCase()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toUpperCase()  +  1;	  String    val    =    ent.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
407	[BUG]  [BUGGY]  String  val  =  ent.toUpperCase(null);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toUpperCase(null);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toUpperCase(null);	  String    val    =    ent.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
408	[BUG]  [BUGGY]  String  val  =  entry.toLowerCase(key.getValue());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toLowerCase(key.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toLowerCase(key.getValue());	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
409	[BUG]  [BUGGY]  String  val  =  value.toLowerCase(ent.getValue());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.toLowerCase(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.toLowerCase(ent.getValue());	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
410	[BUG]  [BUGGY]  String  val  =  ent.toLowerCase(key);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toLowerCase(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toLowerCase(key);	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
411	[BUG]  [BUGGY]  String  val  =  ent.getValue()  /  key.toLowerCase();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  /  key.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  /  key.toLowerCase();	  String    val    =    ent.getValue()    /    key;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
412	[BUG]  [BUGGY]  String  val  =  ent.getValue()  /  key  +  1;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  /  key  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  /  key  +  1;	  String    val    =    ent.getValue()    /    key;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
413	[BUG]  [BUGGY]  String  val  =  ent.substring(value.getValue());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(value.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(value.getValue());	  String    val    =    ent.substring(key.getValue());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
414	[BUG]  [BUGGY]  String  val  =  key.trim()  +  entry.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  +  entry.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  +  entry.getValue();	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
415	[BUG]  [BUGGY]  String  val  =  string.trim()  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  string.trim()  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  string.trim()  +  ent.getValue();	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
416	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.getValue());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1,  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getValue()  +  1,  ent.getValue());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
417	[BUG]  [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.substring(ent.getValue()  +  1,  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.substring(ent.getValue()  +  1,  ent.getValue());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
418	[BUG]  [BUGGY]  String  val  =  key.toUpperCase(ent.getLowerCase());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toUpperCase(ent.getLowerCase());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toUpperCase(ent.getLowerCase());	  String    val    =    key.toUpperCase()    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
419	[BUG]  [BUGGY]  String  val  =  value.toUpperCase();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value.toUpperCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value.toUpperCase();	  String    val    =    key.toUpperCase()    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
420	[BUG]  [BUGGY]  String  val  =  ent.substring(key.length()  -  3);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.length()  -  3);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.length()  -  3);	  String    val    =    ent.substring(key.length());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
421	[BUG]  [BUGGY]  String  val  =  entity.getKey();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entity.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entity.getKey();	  char    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
422	[BUG]  [BUGGY]  String  val  =  encoding.substring(ent.getValue(),  key.getEncoding());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  encoding.substring(ent.getValue(),  key.getEncoding());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  encoding.substring(ent.getValue(),  key.getEncoding());	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
423	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getCharacterIndex());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getCharacterIndex());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getCharacterIndex());	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
424	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  ent.getCharset());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  ent.getCharset());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  ent.getEncoding(),  ent.getCharset());	  String    val    =    key.substring(ent.getValue(),    ent.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
425	[BUG]  [BUGGY]  String  val  =  key.substring(entry.getValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(entry.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(entry.getValue());	  String    val    =    key.substring(ent.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
426	[BUG]  [BUGGY]  String  val  =  key.toUpperCase()  *  1;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toUpperCase()  *  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toUpperCase()  *  1;	  String    val    =    key.toUpperCase()    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
427	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getKey();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getKey();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
428	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getValue();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator()  :  ent.getValue();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
429	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getHeaders().iterator();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getHeaders().iterator();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.getHeaders().iterator();	  Entry    <    String,    String>    currEntry    =    headers.entrySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
430	[BUG]  [BUGGY]  String  val  =  key.toString()  + ",  hasHitEOF: "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + ",  hasHitEOF: "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + ",  hasHitEOF: "  +  ent.toString();	  String    val    =    key.toString()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
431	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.substring(0,  key.length()  -  1):  val;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.substring(0,  key.length()  -  1):  val;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.substring(0,  key.length()  -  1):  val;	  String    val    =    key!=    null?    key.trim()    :    val;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
432	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.substring(0,  key.length()  -  2):  val;  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.substring(0,  key.length()  -  2):  val;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.substring(0,  key.length()  -  2):  val;	  String    val    =    key!=    null?    key.trim()    :    val;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
433	[BUG]  [BUGGY]  String  val  =  ent.substring(key.length()  -  1,  ent.length());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.length()  -  1,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.length()  -  1,  ent.length());	  String    val    =    ent.substring(key.length());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
434	[BUG]  [BUGGY]  char  val  =  key.getKey();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  char  val  =  key.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	char  val  =  key.getKey();	  String    val    =    key.getKey();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
435	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue()  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  entry.getValue()  +  ent.getValue();	  Entry    <    String,    String>    currEntry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
436	[BUG]  [BUGGY]  String  val  =  value!=  null?  value.trim()  :  encoding.toLowerCase();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  value.trim()  :  encoding.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  value.trim()  :  encoding.toLowerCase();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
437	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.trim()  :  encoding.toLowerCase();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.trim()  :  encoding.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.trim()  :  encoding.toLowerCase();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
438	[BUG]  [BUGGY]  String  val  =  value  ==  null?  value.trim()  :  encoding.toLowerCase();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value  ==  null?  value.trim()  :  encoding.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value  ==  null?  value.trim()  :  encoding.toLowerCase();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
439	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.trim()  :  encoding.trim();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.trim()  :  encoding.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.trim()  :  encoding.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
440	[BUG]  [BUGGY]  val  =  key.trim();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  key.trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  key.trim();	  String    val    =    value.trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
441	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  ent.getShortKey();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  ent.getShortKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  ent.getShortKey();	  String    val    =    ent.getShortKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
442	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.removeFirst();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.removeFirst();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  ent.removeFirst();	  Entry    <    String,    String>    currEntry    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
443	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entity.getValue();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entity.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry  ==  null)?  null  :  entity.getValue();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
444	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toString()  :  key;  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toString()  :  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toString()  :  key;	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
445	[BUG]  [BUGGY]  String  val  =  key!=  null?  key.toString()  :(value  ==  null? "null "  :  value);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key!=  null?  key.toString()  :(value  ==  null? "null "  :  value);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key!=  null?  key.toString()  :(value  ==  null? "null "  :  value);	  String    val    =    key!=    null?    key.toString()    :    value;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
446	[BUG]  [BUGGY]  val  =  ent.getKey();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  ent.getKey();	  String    val    =    ent.getKey()    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
447	[BUG]  [BUGGY]  String  val  =  entry.toLowerCase(ent.getValue());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toLowerCase(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toLowerCase(ent.getValue());	  String    val    =    entry.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
448	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  >=  null)?  null  :  ent.getValue();  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =(entry  >=  null)?  null  :  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =(entry  >=  null)?  null  :  ent.getValue();	  Entry    <    String,    String>    currEntry    =(entry    ==    null)?    null    :    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
449	[BUG]  [BUGGY]  String  val  =  encoding.toUpperCase(ent.getKey());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  encoding.toUpperCase(ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  encoding.toUpperCase(ent.getKey());	  String    val    =    key.toUpperCase(ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
450	[BUG]  [BUGGY]  String  val  =  key,  ent.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key,  ent.getValue()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key,  ent.getValue()  +  1;	  String    val    =    key.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
451	[BUG]  [BUGGY]  String  val  =  key.getString()  +  1;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.getString()  +  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.getString()  +  1;	  String    val    =    key.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
452	[BUG]  [BUGGY]  Entry  val  =  ent.getKey();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  val  =  ent.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  val  =  ent.getKey();	  char    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
453	[BUG]  [BUGGY]  String  val  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.getKey();	  char    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
454	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).trim();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key).trim();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key).trim();	  Entry    <    String,    String>    currEntry    =    headers.get(key);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
455	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  key  + ": ";  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  key  + ": ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  key  + ": ";	  String    val    =    ent.getValue()    *    key;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
456	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().getValue(key);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().getValue(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().getValue(key);	  Entry    <    String,    String>    currEntry    =    headers.entrySet().get(key);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
457	[BUG]  [BUGGY]  String  val  =  ent.getShortName()  + "' ";  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getShortName()  + "' ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getShortName()  + "' ";	  String    val    =    ent.getShortName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
458	[BUG]  [BUGGY]  String  val  =  ent.getShortName()  + "/.* ";  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getShortName()  + "/.* ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getShortName()  + "/.* ";	  String    val    =    ent.getShortName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
459	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  +  5;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  +  5;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  +  5;	  String    val    =    ent.getValue()    +    key    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
460	[BUG]  [BUGGY]  val  =  ent.getValue()  +  key;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  val  =  ent.getValue()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	val  =  ent.getValue()  +  key;	  val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
461	[BUG]  [BUGGY]  Value  =  ent.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Value  =  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Value  =  ent.getValue();	  val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
462	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.getValue());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  2,  ent.getValue());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
463	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getKey());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getKey());	  String    val    =    ent.substring(key.getValue());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
464	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getValue()  +  1);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getValue()  +  1);	  String    val    =    ent.substring(key.getValue());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
465	[BUG]  [BUGGY]  String  val  =  ent.substring(key,  ent.getValue());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key,  ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key,  ent.getValue());	  String    val    =    ent.substring(key.getValue());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
466	[BUG]  [BUGGY]  char  val  =  key.substring(ent.getValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  char  val  =  key.substring(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	char  val  =  key.substring(ent.getValue());	  String    val    =    value.substring(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
467	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.getChars());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.getChars());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  2,  ent.getChars());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getChars());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
468	[BUG]  [BUGGY]  Value  val  =  ent.getValue()  }  ;  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Value  val  =  ent.getValue()  }  ;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Value  val  =  ent.getValue()  }  ;	  Value    val    =    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
469	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  *  2;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  *  2;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  *  2;	  String    val    =    ent.getValue()    +    key    +    2;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
470	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase(ent.getKey());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase(ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase(ent.getKey());	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
471	[BUG]  [BUGGY]  String  val  =  entry.trim().toLowerCase();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.trim().toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.trim().toLowerCase();	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
472	[BUG]  [BUGGY]  String  val  =  key.trim().toLowerCase(ent);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim().toLowerCase(ent);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim().toLowerCase(ent);	  String    val    =    key.trim().toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
473	[BUG]  [BUGGY]  String  val  =  key.substring(0,  entry.length());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  entry.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  entry.length());	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
474	[BUG]  [BUGGY]  String  val  =  key.substring(0,  button.length());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(0,  button.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(0,  button.length());	  String    val    =    key.substring(0,    key.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
475	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.removeFirst();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.removeFirst();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  currEntry  =  entry.removeFirst();	  Entry    <    String,    String>    currEntry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
476	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  ent.toLowerCase();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  ent.toLowerCase();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  ent.toLowerCase();	  String    val    =    ent.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
477	[BUG]  [BUGGY]  String  val  =  ent.toLowerCase()  +  key;  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toLowerCase()  +  key;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toLowerCase()  +  key;	  String    val    =    ent.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
478	[BUG]  [BUGGY]  String  val  =  ent.getValue()  /  2;  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  /  2;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  /  2;	  String    val    =    ent.getValue()    /    key;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
479	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.toUpperCase());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.toUpperCase());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.toUpperCase());	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
480	[BUG]  [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.toLowerCase());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.toLowerCase());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toLowerCase(Locale.ENGLISH,  ent.toLowerCase());	  String    val    =    key.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
481	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.getKey());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  2,  ent.getKey());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getKey());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
482	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  +  length  *  2;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  +  length  *  2;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  +  length  *  2;	  String    val    =    ent.getValue()    +    key    +    length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
483	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  *  length;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  *  length;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  *  length;	  String    val    =    ent.getValue()    +    key    +    length;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
484	[BUG]  [BUGGY]  String  val  =  ent.toLowerCase(key.getKey());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toLowerCase(key.getKey());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toLowerCase(key.getKey());	  String    val    =    key.toLowerCase(ent.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
485	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.getLength());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.getLength());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  2,  ent.getLength());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
486	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength())+  1;  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength())+  1;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  +  1,  ent.getLength())+  1;	  String    val    =    key.substring(ent.getValue()    +    1,    ent.getLength());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
487	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  6;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  6;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  6;	  String    val    =    ent.getValue()    *    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
488	[BUG]  [BUGGY]  String  val  =  entry.toUpperCase(ent.getValue());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.toUpperCase(ent.getValue());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.toUpperCase(ent.getValue());	  String    val    =    entry.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
489	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  + ".   ";  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  + ".   ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  + ".   ";	  String    val    =    ent.getValue()    +    key    +   ":   ";    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
490	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key  + ".js ";  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key  + ".js ";  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key  + ".js ";	  String    val    =    ent.getValue()    +    key    +   ":   ";    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
491	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.length());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue()  /  2,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue()  /  2,  ent.length());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
492	[BUG]  [BUGGY]  String  val  =  entry.substring(key.getValue()  +  1,  ent.length());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.substring(key.getValue()  +  1,  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.substring(key.getValue()  +  1,  ent.length());	  String    val    =    key.substring(ent.getValue()    +    1,    ent.length());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
493	[BUG]  [BUGGY]  String  val  =  entry.trim()  +  key.getValue();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  entry.trim()  +  key.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  entry.trim()  +  key.getValue();	  String    val    =    key.trim()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
494	[BUG]  [BUGGY]  String  val  =  value!=  null?  key.toUpperCase()  :  value;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  value!=  null?  key.toUpperCase()  :  value;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  value!=  null?  key.toUpperCase()  :  value;	  String    val    =    key!=    null?    key.toUpperCase()    :    value;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
495	[BUG]  [BUGGY]  String  val  =  key.trim()  + ",  hasHitEOF: "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ",  hasHitEOF: "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ",  hasHitEOF: "  +  ent.toString();	  String    val    =    key.trim()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
496	[BUG]  [BUGGY]  String  val  =  key.trim()  + ".   "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.trim()  + ".   "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.trim()  + ".   "  +  ent.toString();	  String    val    =    key.trim()    +   ":   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
497	[BUG]  [BUGGY]  String  val  =  key.substring(entry.length());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(entry.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(entry.length());	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
498	[BUG]  [BUGGY]  String  val  =  str.substring(ent.length());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  str.substring(ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  str.substring(ent.length());	  String    val    =    key.substring(ent.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
499	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key,  hashitEOF;  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key,  hashitEOF;  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key,  hashitEOF;	  String    val    =    ent.getValue()    +    key,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
500	[BUG]  [BUGGY]  String  val  =  ent.substring(key.getKey(),  ent.length());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.substring(key.getKey(),  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.substring(key.getKey(),  ent.length());	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
501	[BUG]  [BUGGY]  char  val  =  key.substring(ent.getValue(),  ent.length());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  char  val  =  key.substring(ent.getValue(),  ent.length());  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	char  val  =  key.substring(ent.getValue(),  ent.length());	  String    val    =    key.substring(ent.getValue(),    ent.length());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
502	[BUG]  [BUGGY]  String  val  =  ent.toString()  + ", "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toString()  + ", "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toString()  + ", "  +  ent.toString();	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
503	[BUG]  [BUGGY]  String  val  =  ent.toString()  + ": "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toString()  + ": "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toString()  + ": "  +  ent.toString();	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
504	[BUG]  [BUGGY]  String  val  =  ent.toString()  + ", "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.toString()  + ", "  +  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.toString()  + ", "  +  ent.getValue();	  String    val    =    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
505	[BUG]  [BUGGY]  Entry  <  String,  String>  val  =  ent.getEntry(key);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  Entry  <  String,  String>  val  =  ent.getEntry(key);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	Entry  <  String,  String>  val  =  ent.getEntry(key);	  Entry    <    String,    String>    val    =    ent.getKey();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
506	[BUG]  [BUGGY]  String  val  =  ent.getValue()  +  key.getKey();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  +  key.getKey();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  +  key.getKey();	  String    val    =    key.getValue()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
507	[BUG]  [BUGGY]  String  val  =  ent.getValue()  *  ent.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  ent.getValue()  *  ent.getValue();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  ent.getValue()  *  ent.getValue();	  String    val    =    key.getValue()    +    ent.getValue();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
508	[BUG]  [BUGGY]  String  val  =  key.toString()  + "./.   "  +  ent.toString();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.toString()  + "./.   "  +  ent.toString();  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.toString()  + "./.   "  +  ent.toString();	  String    val    =    key.toString()    +   ".   "    +    ent.toString();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
509	[BUG]  [BUGGY]  String  val  =  key.substring(entry.getKey(),  encoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(entry.getKey(),  encoding);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(entry.getKey(),  encoding);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
510	[BUG]  [BUGGY]  String  val  =  key.substring(entry.getValue(),  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(entry.getValue(),  encoding);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(entry.getValue(),  encoding);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
511	[BUG]  [BUGGY]  String  val  =  key.substring(ent.getValue(),  cachedEncoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]              for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();      [BUGGY]  String  val  =  key.substring(ent.getValue(),  cachedEncoding);  [BUGGY]      if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	495	495	1	replace	String  val  =  key.substring(ent.getValue(),  cachedEncoding);	  String    val    =    key.substring(ent.getValue(),    encoding);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
