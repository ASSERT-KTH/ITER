projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif("gid".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif("group".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(")group".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif("groupId".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=entry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=ent.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500val=val.substring(0,val.length()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=val.substring(0,val.length()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif("groupIds".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val!=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val==Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)||val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MIN_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif("group_id".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif("groups".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val[Delete]Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>Short.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(key!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val==Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val>=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkName(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();val=currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)+1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val<=16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val>=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key).iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next(),val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.keySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=ent.getKey().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.size().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.parseInt(val)+1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)+2){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE||val>Integer.parseInt(val)+1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)+1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>Long.parseLong(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val==Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(value!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=ent.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=ent.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=val.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(key)&&val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)&&val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Long.parseLong(val)&&val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&long.length()<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(ent.key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key+val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Long.parseLong(val)||val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Long.parseLong(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Long.parseLong(val)||val<=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE||val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE||val>=Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.MIN_VALUE||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE)
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE||val>Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.MIN_VALUE||val>Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getIntValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getRawValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getValue()*2;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getValue()*4;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)&&val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)||val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)&&val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)||val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.MIN_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<long.MIN_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Long.MIN_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MIN_VALUE||val>=Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.MIN_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MIN_VALUE||val>Long.MAX_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)&&val!=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)&&val>=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val<Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)/1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)+1||val!=Integer.parseInt(val)+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)+1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.MIN_VALUE||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE&&val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.MIN_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.MIN_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>=Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Integer.MIN_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.MIN_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE&&val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)&&val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>=Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val==Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val!=Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val<Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)&&val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)&&val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)||val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)&&val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val<=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500val=val.substring(0,val.length());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500val=val.substring(0,val.length()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500valval=val.substring(0,val.length());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500val=val.substring(0,val.length()));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)&&val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)&&val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)&&val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val<=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)&&val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)||val<=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)&&val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)&&val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();currEntry.setValue(currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();currEntry.setValue(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key).iterator().next();val=currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();val=currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Long.parseLong(val)&&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val<16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)&&val<=16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)||val<16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)||val<16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)&&val<=16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val>=16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.MAX_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.MAX_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE||val>Integer.MIN_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE||val>=Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.MAX_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)&&val==Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)&&val==Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)&&val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val<=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>=Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val==Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)&&val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(val)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(val)-1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(value);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(val+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=val.substring(0,val.length());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=val.substring(0,val.length()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=currEntry.substring(0,val.length()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=key.substring(0,val.length()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=val.substring(0,val.length())+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.keySet().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(val).iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=val.entrySet().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=ent.getKey().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.parseInt(val)||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)&&val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)&&val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=entry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=entry.getValue()+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=entry.getValue(),val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)&&val==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)||val==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)||val==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()==Long.parseLong(val)||val.longValue()==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()==Long.parseLong(val)||val.longValue()!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(key.longValue()==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MIN_VALUE||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)&&val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)||val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val<=Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val<Integer.MIN_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)&&val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif("group-id".equals(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)/&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<long.parseLong(val)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Long.parseLong(val)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)&&hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)||val==Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val<Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)&&val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkPath(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkpath(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500(TarArchiveEntry<String>)currEntry).setLinkName(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkName(val,val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkName(val+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkFileName(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.MAX_VALUE||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.MAX_VALUE||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)||val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val>Short.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>=Short.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val==Short.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val!=Short.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)&&val!=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)||val!=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(key==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Integer.MAX_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE&&val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.parseInt(key)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.MAX_VALUE+Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(key!=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)/1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)+1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)+1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val==16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val==Long.parseLong(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)||val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<long.parseLong(val)||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(val).intValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)&&val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().first();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().valueToString(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key).iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().trim();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE&&val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.MIN_VALUE||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.MIN_VALUE||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.MIN_VALUE||val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)&&val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)&&val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=currEntry.getKey();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkName(path);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkName(linkpath);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setlinkpath(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkId(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)+1){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Integer.parseInt(val)&&val>=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)&&val>=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val<=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)&&val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MIN_VALUE||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=key.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val>=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)&&val>=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Integer.parseInt(val)||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MAX_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MAX_VALUE||val>Long.MIN_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MIN_VALUE&&val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.MIN_VALUE||val<Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=val.substring(0,val.length()));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=val.substring(0,val.length()).trim();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)/Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();currEntry.setValue(currEntry.getValue(),val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();currEntry.setName(currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();currEntry.setPath(currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();currEntry.setURI(currEntry.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)&&val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&!isEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)/&!hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)&&val!=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.MIN_VALUE||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()!=Long.parseLong(val)||val.longValue()==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()==Long.parseLong(val)||val.longValue()>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()==Long.parseLong(val)||val.longValue()!=Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getValue()+2;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getValue()+4;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MIN_VALUE||val>Short.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<long.parseLong(val)||val>Short.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.MIN_VALUE||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.MIN_VALUE||val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&isEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE&&val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.MAX_VALUE||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Integer.parseInt(val)||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)||val>Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(entry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>=Long.parseLong(val)||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<long.parseLong(val)||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MAX_VALUE||val>=Integer.parseInt(val)||val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>=Integer.parseInt(val)||val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)/2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)||val==Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)&&val<Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500((TarArchiveEntry<String>)currEntry).setLinkName(key);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val==Long.parseLong(val)||val<=16){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=ent.getValue(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.get(key).trim();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val!=Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)/2||val>Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)/2||val<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.MIN_VALUE||val>Integer.parseInt(val));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(key!=Integer.parseInt(val)||key.equals(Integer.parseInt(val))){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(key!=Integer.parseInt(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)/hasHitEOF){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.trim().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.sentrySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)&&val<=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.trim().iterator();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)/2||val>=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Long.MIN_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Long.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)/2||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Short.parseLong(val)||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)/2||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.intValue()==Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()<Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val.longValue()==Long.parseLong(val)||val.longValue()<=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)||val!=Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.parseInt(val)&&val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)||val==Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Integer.MAX_VALUE||val<Integer.MAX_VALUE){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Long.parseLong(val)||val>Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getValue(val);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=currEntry.getRowValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Stringval=val.substring(0,val.length()*1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500val=val.substring(0,val.length())+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500val=val.substring(0,val.length()).trim();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500val=val.substring(0,val.length()*1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val!=Long.parseLong(val)||val<=Long.parseLong(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val>Integer.parseInt(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<=Integer.parseInt(val)||val<Integer.parseInt(val)){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Integerval=Integer.parseInt(val)/2;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Integer.MIN_VALUE||val>Integer.parseInt(val)+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next(),val=currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator().next();currEntry=currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500Entry<String,String>currEntry=headers.entrySet().iterator();val=currEntry.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java500}elseif(val<Long.parseLong(val)||val>Integer.MAX_VALUE){
