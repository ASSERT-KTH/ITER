bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  val  =  Integer.parseInt(val);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  Integer  val  =  Integer.parseInt(val);  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	Integer  val  =  Integer.parseInt(val);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  Entry  <  String,  String>  currEntry  =  entry.getValue();  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	Entry  <  String,  String>  currEntry  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  Entry  <  String,  String>  currEntry  =  ent.getValue();  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	Entry  <  String,  String>  currEntry  =  ent.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  val  =  val.substring(0,  val.length()  -  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  val  =  val.substring(0,  val.length()  -  1);  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	val  =  val.substring(0,  val.length()  -  1);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  String  val  =  val.substring(0,  val.length()  -  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  String  val  =  val.substring(0,  val.length()  -  1);  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	String  val  =  val.substring(0,  val.length()  -  1);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  }  else  if(val  >=  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  >=  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  >=  Long.parseLong(val))  {	  }    else    if(val!=    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  }  else  if(val!=  Long.parseLong(val)||  val  ==  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Long.parseLong(val)||  val  ==  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Long.parseLong(val)||  val  ==  Long.parseLong(val))  {	  }    else    if(val!=    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  }  else  if(val!=  Long.parseLong(val)||  val  >=  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Long.parseLong(val)||  val  >=  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Long.parseLong(val)||  val  >=  Long.parseLong(val))  {	  }    else    if(val!=    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  ==  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  ==  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Integer.parseInt(val)||  val  ==  Integer.parseInt(val))  {	  }    else    if(val!=    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  }  else  if(val  >=  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  >=  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  >=  Integer.parseInt(val))  {	  }    else    if(val!=    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {	  }    else    if(val!=    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  <  Integer.MAX_VALUE)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Integer.parseInt(val)||  val  <  Integer.MAX_VALUE)  {	  }    else    if(val!=    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  <  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  <  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Integer.parseInt(val)||  val  <  Integer.parseInt(val))  {	  }    else    if(val!=    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  }  else  if( "groupIds   ".equals(key))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if( "groupIds   ".equals(key))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if( "groupIds   ".equals(key))  {	  }    else    if(val.equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  }  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.MAX_VALUE)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.MAX_VALUE)  {	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)+  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)+  1);  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Integer.parseInt(val)+  1);	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val!=  Integer.parseInt(val));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val!=  Integer.parseInt(val));  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Integer.parseInt(val)||  val!=  Integer.parseInt(val));	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  }  else  if(val  <  Integer.parseInt(val));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.parseInt(val));  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.parseInt(val));	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  ==  Integer.parseInt(val));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  ==  Integer.parseInt(val));  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Integer.parseInt(val)||  val  ==  Integer.parseInt(val));	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  }  else  if(val  <  Integer.parseInt(val)||  val  >  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.parseInt(val)||  val  >  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.parseInt(val)||  val  >  Long.parseLong(val))  {	  }    else    if(val    <    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  }  else  if(val  <  Integer.parseInt(val)||  val  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.parseInt(val)||  val  >  Integer.MAX_VALUE)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.parseInt(val)||  val  >  Integer.MAX_VALUE)  {	  }    else    if(val    <    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  }  else  if(val  <  Integer.parseInt(val)||  val  >  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.parseInt(val)||  val  >  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.parseInt(val)||  val  >  Integer.parseInt(val))  {	  }    else    if(val    <    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  }  else  if(val  <  Integer.MAX_VALUE  ||  val  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.MAX_VALUE  ||  val  >  Integer.MAX_VALUE)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.MAX_VALUE  ||  val  >  Integer.MAX_VALUE)  {	  }    else    if(val    <    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  }  else  if(val  <  Integer.parseInt(key))  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.parseInt(key))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.parseInt(key))  {	  }    else    if(val    <    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  }  else  if(val  <  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {	  }    else    if(val    <    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  }  else  if(val.longValue()  ==  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val.longValue()  ==  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val.longValue()  ==  Long.parseLong(val))  {	  }    else    if(val    ==    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  }  else  if(val  ==  Long.parseLong(val)||  val!=  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Long.parseLong(val)||  val!=  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Long.parseLong(val)||  val!=  Long.parseLong(val))  {	  }    else    if(val    ==    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)||  val  >  Long.parseLong(val))  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  <  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  <  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)||  val  <  Long.parseLong(val))  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >  Long.MAX_VALUE)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)||  val  >  Long.MAX_VALUE)  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  }  else  if(val  <  Long.MIN_VALUE  ||  val  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.MIN_VALUE  ||  val  >  Long.MAX_VALUE)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.MIN_VALUE  ||  val  >  Long.MAX_VALUE)  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >=  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >=  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)||  val  >=  Long.parseLong(val))  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  }  else  if( "group_id   ".equals(key))  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if( "group_id   ".equals(key))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if( "group_id   ".equals(key))  {	  }    else    if(   "groupId   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  }  else  if( "groups   ".equals(key))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if( "groups   ".equals(key))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if( "groups   ".equals(key))  {	  }    else    if(   ")group   ".equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val!=  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val!=  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Integer.parseInt(val)||  val!=  Integer.parseInt(val))  {	  }    else    if(val    ==    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  ==  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  ==  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Integer.parseInt(val)||  val  ==  Integer.parseInt(val))  {	  }    else    if(val    ==    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Integer.parseInt(val)||  val  >=  Integer.parseInt(val))  {	  }    else    if(val    ==    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
38	[BUG]  [BUGGY]  }  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.parseInt(val))  {	  }    else    if(val    ==    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  <  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  <  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Integer.parseInt(val)||  val  <  Integer.parseInt(val))  {	  }    else    if(val    ==    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
40	[BUG]  [BUGGY]  }  else  if(val  >>  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  >>  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  >>  Long.parseLong(val))  {	  }    else    if(val!=    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  }  else  if(val  [Delete]  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  [Delete]  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  [Delete]  Long.parseLong(val))  {	  }    else    if(val!=    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >  Short.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >  Short.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)||  val  >  Short.parseLong(val))  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)&&  hasHitEOF)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)&&  hasHitEOF)  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  }  else  if(key!=  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(key!=  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(key!=  Integer.parseInt(val))  {	  }    else    if(val!=    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  }  else  if(val  <  Integer.MIN_VALUE  ||  val  >=  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.MIN_VALUE  ||  val  >=  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.MIN_VALUE  ||  val  >=  Integer.parseInt(val))  {	  }    else    if(val!=    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  }  else  if(val  >  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  >  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  >  Long.parseLong(val))  {	  }    else    if(val    ==    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  }  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.parseInt(val));  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.parseInt(val));  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.MIN_VALUE  ||  val  >  Integer.parseInt(val));	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  ==  Integer.parseInt(val));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Integer.parseInt(val)||  val  ==  Integer.parseInt(val));  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Integer.parseInt(val)||  val  ==  Integer.parseInt(val));	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  >=  Integer.parseInt(val));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Integer.parseInt(val)||  val  >=  Integer.parseInt(val));  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Integer.parseInt(val)||  val  >=  Integer.parseInt(val));	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator();  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  Integer  val  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  Integer  val  =  currEntry.getValue();  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	Integer  val  =  currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.get(key);  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	Entry  <  String,  String>  currEntry  =  headers.get(key);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  String>)currEntry).setLinkName(val);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  ((  TarArchiveEntry  <  String>)currEntry).setLinkName(val);  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	((  TarArchiveEntry  <  String>)currEntry).setLinkName(val);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  }  else  if(val  <  Integer.MAX_VALUE  ||  val  >  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.MAX_VALUE  ||  val  >  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.MAX_VALUE  ||  val  >  Integer.parseInt(val))  {	  }    else    if(val    <    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();  val  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();  val  =  currEntry.getValue();  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	Entry  <  String,  String>  currEntry  =  headers.entrySet().iterator().next();  val  =  currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
57	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)&&  val  <  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)&&  val  <  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)&&  val  <  Long.parseLong(val))  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)||  val  >  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)||  val  >  Integer.parseInt(val))  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  }  else  if(val  <  Long.parseLong(val)&&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Long.parseLong(val)&&!hasHitEOF)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Long.parseLong(val)&&!hasHitEOF)  {	  }    else    if(val    <    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  }  else  if(val  <  =  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  =  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  =  Integer.parseInt(val))  {	  }    else    if(val    ==    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  }  else  if(val  <  Integer.parseInt(val)+  1)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  Integer.parseInt(val)+  1)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  Integer.parseInt(val)+  1)  {	  }    else    if(val    <    Integer.parseInt(val))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  }  else  if(val!=  Long.parseLong(val)&&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Long.parseLong(val)&&!hasHitEOF)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Long.parseLong(val)&&!hasHitEOF)  {	  }    else    if(val!=    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  }  else  if(val!=  Long.parseLong(val)||  val  <  =  16)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Long.parseLong(val)||  val  <  =  16)  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Long.parseLong(val)||  val  <  =  16)  {	  }    else    if(val!=    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  }  else  if(val!=  Integer.parseInt(val));  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val!=  Integer.parseInt(val));  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val!=  Integer.parseInt(val));	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  }  else  if(val  <  =  Integer.parseInt(val));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  =  Integer.parseInt(val));  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  =  Integer.parseInt(val));	  }    else    if(val    ==    Integer.parseInt(val));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  }  else  if(val  <  =  Long.parseLong(val))  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  <  =  Long.parseLong(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  <  =  Long.parseLong(val))  {	  }    else    if(val    ==    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
67	[BUG]  [BUGGY]  }  else  if(val  ==  Long.parseLong(val)||  val  <  Integer.parseInt(val))  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);    [BUGGY]  }  else  if(val  ==  Long.parseLong(val)||  val  <  Integer.parseInt(val))  {  [BUGGY]    currEntry.setGroupId(Integer.parseInt(val));  }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	500	500	1	replace	}  else  if(val  ==  Long.parseLong(val)||  val  <  Integer.parseInt(val))  {	  }    else    if(val    ==    Long.parseLong(val))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
