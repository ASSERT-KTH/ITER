bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();	  Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>();  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>();	  Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  0);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  0);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion()  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset());  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot()  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot()  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  +  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  0);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset()  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.read);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.read);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  parsePaxHeaders(i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  parsePaxHeaders(i);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  InputStream  coll  =  i.inputStream();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  InputStream  coll  =  i.inputStream();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  i.inputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  InputStream  is  =  i.inputStream();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  InputStream  is  =  i.inputStream();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  i.inputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getVersion());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  parsePaxHeaders(i,  i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getVersion());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  parsePaxHeaders(i,  i);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  parsePaxHeaders(i,  i);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  parsePaxHeaders(i.getRecordSize());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  parsePaxHeaders(i.getRecordSize());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getRecordSize());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  ch  =  i.read();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  ch  =  i.read();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName());  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
61	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
71	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ");  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ");  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
76	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>();	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getEncoding());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getEncoding());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
82	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
83	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled( "UTF-8 "));  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMessage());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMessage());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
91	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
92	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( "UTF-8 "));  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass());  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
99	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
100	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding());  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
101	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass());  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
102	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
