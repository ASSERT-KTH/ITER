bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  coll);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remaining.getResourceName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remaining.getResourceName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remaining.getResourceName(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  LinkedList  <  String,  String>();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  LinkedList  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  LinkedList  <  String,  String>();	  Map    <    String,    String>    headers    =    new    ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>(i.read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>(i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>(i.read);	  Map    <    String,    String>    headers    =    new    ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeader());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
10	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader()  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeader());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
11	[BUG]  [BUGGY]  InputStream  is  =  new  BufferedInputStream(i.inputStream());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  new  BufferedInputStream(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  new  BufferedInputStream(i.inputStream());	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
12	[BUG]  [BUGGY]  InputStream  is  =  parsePaxHeaders(i);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  parsePaxHeaders(i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  parsePaxHeaders(i);	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
13	[BUG]  [BUGGY]  InputStream  is  =  parsePaxHeaders(i.inputStream());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  parsePaxHeaders(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  parsePaxHeaders(i.inputStream());	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
14	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(i.getPax());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  new  FileInputStream(i.getPax());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  new  FileInputStream(i.getPax());	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
15	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  new  FileInputStream(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  new  FileInputStream(i.getVersion());	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
16	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(i.getMillis());  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  new  FileInputStream(i.getMillis());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  new  FileInputStream(i.getMillis());	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
17	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters(),  coll);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
18	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacters(),  i.getMask());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacters(),  i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacters(),  i.getMask());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
19	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  coll.getCharacters());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  coll.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  coll.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
20	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
21	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMask(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMask(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMask(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
22	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
23	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    ch    =    i.read();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
24	[BUG]  [BUGGY]  CharTypes.checkState(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  CharTypes.checkState(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	CharTypes.checkState(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    ch    =    i.read();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
25	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    ch    =    i.read();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
26	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    ch    =    i.read();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
27	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    ch    =    i.read();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
28	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
29	[BUG]  [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
30	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
31	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
32	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
33	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
34	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
35	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
36	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
37	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
38	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + "/.js ");  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + "/.js ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + "/.js ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
39	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  parsePaxHeaders ");  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  parsePaxHeaders ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  parsePaxHeaders ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
40	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",/.js ");  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",/.js ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",/.js ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
41	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset()  + ".js ");  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset()  + ".js ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset()  + ".js ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
42	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  js ");  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  js ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  js ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
43	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
44	[BUG]  [BUGGY]  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
45	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
46	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
47	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!zipEncoding.equals(i.getText()))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!zipEncoding.equals(i.getText()))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!zipEncoding.equals(i.getText()))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
48	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask()  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask()  +  1);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
49	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
51	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
52	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getHeaderSize());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
53	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>();	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.length);	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getMask());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getMask());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getMessage());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getMessage());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.size());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.size());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.read);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.read);	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecord());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
60	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecord());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
61	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecord());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
62	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecord());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
63	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordBytes());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordBytes());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordBytes());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecord());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
64	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getRecord());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getRecord());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getRecord());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecord());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
65	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  cache);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  cache);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  cache);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
66	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule()  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
67	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
68	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  coll);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
69	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getRawClass());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getRawClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getRawClass());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
70	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
71	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding()  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
72	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
73	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
74	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  this.zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  this.zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
75	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getEncoding(),  i);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getEncoding(),  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getEncoding(),  i);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
76	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  cache);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  cache);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  cache);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
77	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding,  hasHitEOF);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
78	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
79	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  size);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  size);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  size);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
80	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.toString());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.toString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.toString());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
81	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.input);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.input);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
82	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.byteValue);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.byteValue);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.byteValue);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
83	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.input);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.input);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
84	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input,  coll);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input,  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
85	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.read);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
86	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
87	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  read);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  read);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
88	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  *  2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  *  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  *  2);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
89	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  size);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  size);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  size);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
90	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  width,  length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  width,  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  width,  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
91	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  +  2);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  +  2);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
92	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getRawClass());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getRawClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getRawClass());	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
93	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getAbsolutePath());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getAbsolutePath());	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
94	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getMask());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getMask());	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
95	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getVersion(),  TarArchiveEntry.DEFAULT_TEST);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getVersion(),  TarArchiveEntry.DEFAULT_TEST);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getVersion(),  TarArchiveEntry.DEFAULT_TEST);	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
96	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getVersion(),  TarArchiveEntry.SIZE);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getVersion(),  TarArchiveEntry.SIZE);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getVersion(),  TarArchiveEntry.SIZE);	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
97	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getEncoding());	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
98	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  + ", ");  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  + ", ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  + ", ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
99	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
100	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
101	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  + "n ");  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  + "n ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  + "n ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
102	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
103	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
104	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
105	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
106	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
107	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRawClass());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRawClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRawClass());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
108	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
109	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getAstRoot());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getAstRoot());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getAstRoot());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
110	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getName());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getName());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
111	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
112	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
113	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
114	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding()  + ", ");  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding()  + ", ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding()  + ", ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
115	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding()  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
116	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  encoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  encoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
117	[BUG]  [BUGGY]  parsePaxHeaders(i,  coll);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  coll);	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
118	[BUG]  [BUGGY]  parsePaxHeaders(i,  col);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  col);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  col);	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
119	[BUG]  [BUGGY]  parsePaxHeaders(i,  null);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  null);	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
120	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getCharset());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getCharset());	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
121	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getText());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
122	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getText());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
123	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getText());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
124	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getText());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
125	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
126	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
127	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
128	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
129	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
130	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
131	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
132	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
133	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion(),  length);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion(),  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
134	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
135	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.inputStream());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  new  BufferedInputStream(i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
136	[BUG]  [BUGGY]  InputStream  coll  =  parsePaxHeaders(i);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  parsePaxHeaders(i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  parsePaxHeaders(i);	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
137	[BUG]  [BUGGY]  InputStream  coll  =  parsePaxHeaders(i.inputStream());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  parsePaxHeaders(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  parsePaxHeaders(i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
138	[BUG]  [BUGGY]  InputStream  coll  =  i.getInputStream();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  i.getInputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  i.getInputStream();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.read());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  new  BufferedInputStream(i.read());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
140	[BUG]  [BUGGY]  InputStream  coll  =  is.inputStream();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  is.inputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  is.inputStream();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
141	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
142	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
143	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
144	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding()  + ", ");  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding()  + ", ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding()  + ", ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
145	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding()  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
146	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
147	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
148	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
149	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders()  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
150	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
151	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecords());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecords());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecords());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
152	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPaxHeaders());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPaxHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPaxHeaders());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
153	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
154	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
155	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
156	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
157	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
158	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
159	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
160	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
161	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
162	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
163	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  coll);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
164	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
165	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  this);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  this);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  this);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
166	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  cache);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  cache);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  cache);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
167	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
168	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  4);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  4);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
169	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  2);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  2);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
170	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  3);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  3);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  3);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
171	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  10);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  10);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  10);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
172	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  16);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  16);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  16);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
173	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  8);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  8);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  8);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
174	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getMessage());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
175	[BUG]  [BUGGY]  if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getMessage());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
176	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getMessage());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
177	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getMessage());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
178	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getMessage());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
179	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
180	[BUG]  [BUGGY]  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
181	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
182	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
183	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!zipEncoding.equals(i.getText()))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!zipEncoding.equals(i.getText()))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!zipEncoding.equals(i.getText()))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
184	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  LinkedMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  LinkedMap  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  LinkedMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
185	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.read);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.read);	  Map    <    String,    String>    headers    =    new    ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
186	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
187	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
188	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
189	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.byteValue());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.byteValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.byteValue());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
190	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  0);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  0);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
191	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.inputStream);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.inputStream);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset(),  i.inputStream);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
192	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRawClass());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
193	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRawClass());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
194	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawClass(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRawClass());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
195	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
196	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
197	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
198	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  + "n ");  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  + "n ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  + "n ");	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
199	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  +  1);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
200	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  0);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName(),  0);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
201	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.toString());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.toString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.toString());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
202	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charAt(i.input));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charAt(i.input));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charAt(i.input));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
203	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
204	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.record);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.record);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.record);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
205	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input,  coll);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input,  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
206	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input  +  1);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
207	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
208	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getMessage());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getMessage());	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
209	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getMask());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getMask());	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
210	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.read);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.read);	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
211	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getCharset());	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
212	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.length);	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
213	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
214	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
215	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMessage());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
216	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
217	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  coll);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
218	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
219	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMessage(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMessage(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMessage(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
220	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
221	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
222	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
223	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  coll);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
224	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  0);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset(),  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
225	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
226	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.next());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.next());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.next());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
227	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getAstRoot());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getAstRoot());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getAstRoot());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
228	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
229	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
230	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
231	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
232	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAbsolutePax());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
233	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax()  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAbsolutePax());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
234	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  read);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
235	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.in);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.in);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.in);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
236	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read(),  i.read);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read(),  i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read(),  i.read);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
237	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.read  +  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.read  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.read  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
238	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  File.separatorChar);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  File.separatorChar);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  File.separatorChar);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
239	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  /  File.separatorChar);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  /  File.separatorChar);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  /  File.separatorChar);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
240	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  0);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
241	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  *  File.separatorChar);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  *  File.separatorChar);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  *  File.separatorChar);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
242	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar)+  1;  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar)+  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar)+  1;	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
243	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  ch);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  ch);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  ch);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
244	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
245	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
246	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getName());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getName());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
247	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName()  +  1);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
248	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getModule());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getModule());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
249	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getSimpleName());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getSimpleName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getSimpleName());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
250	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getMessage());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
251	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getVersion());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
252	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
253	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getName());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getName());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
254	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getModule());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getModule());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
255	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName()  +  1);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
256	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getMask());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getMask());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
257	[BUG]  [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.class);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.class);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  TarArchiveEntry.class);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
258	[BUG]  [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.SIZE);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.SIZE);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  TarArchiveEntry.SIZE);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
259	[BUG]  [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.SOURCE);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.SOURCE);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  TarArchiveEntry.SOURCE);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
260	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
261	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getMask());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getMask());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
262	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion(),  length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion(),  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
263	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion()  *  2);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion()  *  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion()  *  2);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
264	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
265	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
266	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
267	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getVersion());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
268	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
269	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
270	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getMessage());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
271	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
272	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  *  2);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  *  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  *  2);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
273	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getValue(),  i.byteValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getValue(),  i.byteValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getValue(),  i.byteValue());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
274	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  +  2);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue()  +  2);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
275	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.byteValue());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.byteValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.byteValue());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
276	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
277	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecord());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
278	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
279	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
280	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
281	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
282	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
283	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
284	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayHashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayHashMap  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayHashMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    ArrayHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
285	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.Map  <  String,  String>();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.Map  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.Map  <  String,  String>();	  Map    <    String,    String>    headers    =    new    ArrayHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
286	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.read);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.read);	  Map    <    String,    String>    headers    =    new    ArrayHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
287	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getChars());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getChars());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getChars());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRead());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
288	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRead());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
289	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRead());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
290	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRead());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
291	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getShortName());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getShortName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getShortName());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getKey());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
292	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
293	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
294	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
295	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.read);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
296	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getBytes());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getBytes());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getBytes());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
297	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
298	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
299	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
300	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getVersion());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
301	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
302	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.inputStream);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.inputStream);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.inputStream);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
303	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  zipEncoding.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  zipEncoding.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  zipEncoding.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
304	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
305	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
306	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled( ".UTF-8 "));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled( ".UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled( ".UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
307	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_HEADER_SIZE));  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_HEADER_SIZE));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_HEADER_SIZE));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
308	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_CHAR_SEPARATOR));  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_CHAR_SEPARATOR));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_CHAR_SEPARATOR));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
309	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(cache.getClass(),  i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(cache.getClass(),  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(cache.getClass(),  i);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
310	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  error);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  error);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  error);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
311	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(cached.getClass(),  i);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(cached.getClass(),  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(cached.getClass(),  i);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
312	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getVersion());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
313	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  len);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  len);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  len);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
314	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  length);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
315	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getCharset());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
316	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
317	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
318	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecord());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecord());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecord());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
319	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.toString());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.toString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.toString());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
320	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
321	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
322	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
323	[BUG]  [BUGGY]  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
324	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  char  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  char  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  char  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
325	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.setText(i.getText());  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.setText(i.getText());  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.setText(i.getText());  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
326	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
327	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMask());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMask());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
328	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  coll);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
329	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMask(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMask(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getMask(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
330	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
331	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  length);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
332	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
333	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCurrentName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCurrentName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCurrentName(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
334	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
335	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getVersion(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
336	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize()  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
337	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
338	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize()  +  1);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
339	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
340	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
341	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
342	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
343	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
344	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
345	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
346	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getMask());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getMask());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
347	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
348	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMask());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMask());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
349	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getVersion(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
350	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize()  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
351	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
352	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
353	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
354	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  0);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordSize(),  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
355	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
356	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getAstRoot());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getAstRoot());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getAstRoot());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
357	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  coll);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
358	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getAstRoot(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getAstRoot(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getAstRoot(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
359	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
360	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  length);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
361	[BUG]  [BUGGY]  ch  =  i.getValue();  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.getValue();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.getValue();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
362	[BUG]  [BUGGY]  ch  =  i.read(this);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.read(this);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read(this);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
363	[BUG]  [BUGGY]  ch  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.readInt();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
364	[BUG]  [BUGGY]  ch  =  i.in.read();  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.in.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.in.read();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
365	[BUG]  [BUGGY]  ch  =  coll.read();  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  coll.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  coll.read();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
366	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.toString());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.toString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.toString());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
367	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
368	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
369	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.encode(i));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.encode(i));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.encode(i));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
370	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.toCharArray());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.toCharArray());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.toCharArray());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
371	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getMessage());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getMessage());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
372	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getText());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getText());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getText());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
373	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
374	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getHeaderSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
375	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getEnd());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getEnd());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getEnd());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
376	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getRecordSize());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getRecordSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getRecordSize());	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
377	[BUG]  [BUGGY]  parsePaxHeaders(i.getRecordSize(),  i);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i.getRecordSize(),  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getRecordSize(),  i);	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
378	[BUG]  [BUGGY]  parsePaxHeaders(i.getRecordSize(),  coll);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i.getRecordSize(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getRecordSize(),  coll);	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
379	[BUG]  [BUGGY]  parsePaxHeaders(i.getRecordLimit());  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i.getRecordLimit());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getRecordLimit());	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
380	[BUG]  [BUGGY]  parsePaxHeaders(i.getEntrySize());  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i.getEntrySize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getEntrySize());	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
381	[BUG]  [BUGGY]  parsePaxHeaders(i.getInputStream());  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i.getInputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getInputStream());	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
382	[BUG]  [BUGGY]  parsePaxHeaders(i.getRead());  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i.getRead());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getRead());	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
383	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i  +  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i  +  1);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
384	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.read);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
385	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
386	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
387	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCurrentName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCurrentName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCurrentName(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
388	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding()  + ", ");  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding()  + ", ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacterEncoding()  + ", ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
389	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
390	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
391	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
392	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterEncoding());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
393	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
394	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  0);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
395	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + "n ");  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + "n ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + "n ");	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
396	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
397	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
398	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.inputEnd);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.inputEnd);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.inputEnd);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
399	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>();	  final    Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
400	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  java.util.Map  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  java.util.Map  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  java.util.Map  <  String,  String>();	  final    Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
401	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>(i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>(i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>(i.getCharset());	  final    Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
402	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
403	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
404	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
405	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  TarArchiveEntry.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  TarArchiveEntry.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  TarArchiveEntry.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
406	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),   "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),   "UTF-8 ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),   "UTF-8 ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
407	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( ".UTF-8 "));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( ".UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( ".UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
408	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
409	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
410	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset(),  coll);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset(),  coll);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
411	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPax(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
412	[BUG]  [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
413	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
414	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
415	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
416	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  char  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  char  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  char  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
417	[BUG]  [BUGGY]  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
418	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.toString());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.toString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.toString());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.toString());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
419	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAsString());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAsString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAsString());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.toString());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
420	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.toString());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
421	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString(),  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString(),  i.getMessage());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.toString());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
422	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.next);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.next);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.next);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
423	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getReturnCode());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getReturnCode());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getReturnCode());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
424	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getHeaderSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
425	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCurrentName());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCurrentName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCurrentName());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
426	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    0);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
427	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  4);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  4);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    0);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
428	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  2);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  2);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    0);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
429	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  3);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  3);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  3);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    0);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
430	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  16);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  16);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  16);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    0);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
431	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  10);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  10);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  10);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    0);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
432	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName(),  i);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(record.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
433	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(record.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
434	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderName());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderName());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(record.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
435	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName()  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getResourceName()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(record.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
436	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaders());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaders());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(record.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
437	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
438	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remaining.getResourceName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remaining.getResourceName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remaining.getResourceName(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
439	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getVersion(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
440	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  i.getVersion());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ",  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
441	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
442	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
443	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding,  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding,  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding,  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
444	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  cache);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  cache);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  cache);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
445	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  this);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  this);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  this);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
446	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getCharset());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
447	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
448	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
449	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
450	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i);	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
451	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
452	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  + ", ");  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  + ", ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  + ", ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
453	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
454	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
455	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getMask());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  i.getMask());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
456	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  + "n ");  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  + "n ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterEncoding()  + "n ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
457	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
458	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
459	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getKey());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getKey());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getKey());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
460	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  length);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
461	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  8);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  8);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  8);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    0);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
462	[BUG]  [BUGGY]  parsePaxHeaders(i.getRecordLength());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i.getRecordLength());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getRecordLength());	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
463	[BUG]  [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_SIZE);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_SIZE);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
464	[BUG]  [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TEST_KEY);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TEST_KEY);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TEST_KEY);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
465	[BUG]  [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TEST_ERROR);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TEST_ERROR);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TEST_ERROR);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
466	[BUG]  [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TITLE_FONT);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TITLE_FONT);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  TarArchiveEntry.DEFAULT_TITLE_FONT);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
467	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  width);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  width);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  width);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
468	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length  -  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
469	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  +  1);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
470	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  +  2);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  +  2);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
471	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  -  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar  -  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
472	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getAstRoot(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getAstRoot(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getAstRoot(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
473	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  hasHitEOF);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
474	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.canBeEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.canBeEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.canBeEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
475	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
476	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLineno(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLineno(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLineno(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
477	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
478	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getResourceName());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getResourceName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getResourceName());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
479	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding!=  null)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding!=  null)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding!=  null)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
480	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
481	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding  ==  null)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding  ==  null)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding  ==  null)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
482	[BUG]  [BUGGY]  ||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
483	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
484	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRead());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRead());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRead());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
485	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.input);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.input);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
486	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getRawVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getRawVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getRawVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
487	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
488	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
489	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
490	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
491	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding  +  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding  +  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding  +  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
492	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getHeaderSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
493	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
494	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
495	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceSize());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
496	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.resourceName());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.resourceName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.resourceName());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
497	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getValue());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getValue());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getKey());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
498	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
499	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
500	[BUG]  [BUGGY]  if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
501	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
502	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterEncoding()  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
503	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
504	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPadding(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPadding(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getPadding(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
505	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding  +  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding  +  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding  +  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
506	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getHeaders());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getHeaders());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
507	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.encode(i.getEncoding()));  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.encode(i.getEncoding()));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.encode(i.getEncoding()));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
508	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLine());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLine());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLine());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
509	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
510	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLineno());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLineno());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getLineno());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
511	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_SIZE));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_SIZE));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.isEnabled(PRINT_SIZE));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
512	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getClass(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getClass(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getClass(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
513	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  hasHitEOF);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
514	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding!=  null)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding!=  null)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  zipEncoding!=  null)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
515	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
516	[BUG]  [BUGGY]  ||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	||  zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
517	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
518	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
519	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMethod(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMethod(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMethod(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
520	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ObjectMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ObjectMap  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ObjectMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
521	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
522	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
523	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.input);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.input);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
524	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
525	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getLineno());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getLineno());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getLineno());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
526	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
527	[BUG]  [BUGGY]  if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
528	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
529	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
530	[BUG]  [BUGGY]  ArrayList  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ArrayList  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ArrayList  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
531	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getVersion());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
532	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getResourceName());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getResourceName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getResourceName());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
533	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getCharset());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getCharset());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
534	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>();	  final    Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
535	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>();	  final    Map    <    String,    String>    headers    =    new    LinkedHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
536	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getMessage());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
537	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getMessage());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
538	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getMessage());  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getMessage());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
539	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getHeaders());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getHeaders());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
540	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.reset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.reset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.reset());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
541	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawHeader());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawHeader());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawHeader());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeader());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
542	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeader(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeader());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
543	[BUG]  [BUGGY]  InputStream  coll  =  parsePaxHeaders(i,  i.inputStream());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  parsePaxHeaders(i,  i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  parsePaxHeaders(i,  i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
544	[BUG]  [BUGGY]  InputStream  coll  =  i.inputStream(true);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  i.inputStream(true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  i.inputStream(true);	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
545	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
546	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getKey());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getKey());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getKey());  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
547	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
548	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  hasHitEOF);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
549	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
550	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
551	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getMask(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getMask(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getMask(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
552	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getHeaders());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getHeaders());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
553	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(i.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  new  FileInputStream(i.getAbsolutePath());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  new  FileInputStream(i.getAbsolutePath());	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
554	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(i.inputStream());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  new  FileInputStream(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  new  FileInputStream(i.inputStream());	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
555	[BUG]  [BUGGY]  InputStream  is  =  i.getInputStream();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  i.getInputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  i.getInputStream();	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
556	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
557	[BUG]  [BUGGY]  if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
558	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
559	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
560	[BUG]  [BUGGY]  ArrayMap  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ArrayMap  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ArrayMap  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>();	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
561	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getVersion());	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
562	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getResourceName());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getResourceName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getResourceName());	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
563	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(2);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(2);	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
564	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  hasHitEOF);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
565	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getSourceName(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
566	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  buffer,  i.getCharset());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  buffer,  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  buffer,  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
567	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
568	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getReturnChar());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getReturnChar());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getReturnChar());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
569	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charValue());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charValue());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
570	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read(),  i.byteValue());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read(),  i.byteValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.read(),  i.byteValue());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
571	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.intValue());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.intValue());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.intValue());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
572	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.input);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.input);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
573	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getModifiers());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getModifiers());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getModifiers());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
574	[BUG]  [BUGGY]  if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
575	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getByteBuffer());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getByteBuffer());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getByteBuffer());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRawClass());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
576	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  /   ".js ");  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  /   ".js ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  /   ".js ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
577	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js. ");  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js. ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js. ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
578	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ",  i.getVersion());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ",  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ",  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
579	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.bytes);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.bytes);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.bytes);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
580	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charAt(i.read));  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charAt(i.read));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.charAt(i.read));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
581	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getResourceName());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getResourceName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getResourceName());	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
582	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getRawParent());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getRawParent());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getRawParent());	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
583	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getMessage());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getMessage());	  parsePaxHeaders(i,    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
584	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawVersion(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawVersion(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawVersion(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
585	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
586	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.record());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.record());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.record());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecord());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
587	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getHeaderSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
588	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getRawVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getRawVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getRawVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
589	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.resourceName);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.resourceName);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.resourceName);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
590	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.bytes);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.bytes);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.bytes);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
591	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input  +  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
592	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  TarEncoding.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  TarEncoding.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  TarEncoding.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
593	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding  +  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding  +  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding  +  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
594	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  buffer,  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  buffer,  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  buffer,  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
595	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  ZipEncoding.UTF8);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  ZipEncoding.UTF8);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  ZipEncoding.UTF8);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
596	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  stringEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  stringEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  stringEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
597	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
598	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  -  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  -  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
599	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  /  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  /  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask()  /  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
600	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayList  <  String,  String>(i.getVersion());	  Map    <    String,    String>    headers    =    new    ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
601	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getMessage(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getMessage(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getMessage(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
602	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  this.zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  this.zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
603	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  stringEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  stringEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  stringEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
604	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ");  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ".js ");	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
605	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.input);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
606	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
607	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
608	[BUG]  [BUGGY]  ch  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.read(remainders);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read(remainders);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
609	[BUG]  [BUGGY]  ch  =  i.read(null);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.read(null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read(null);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
610	[BUG]  [BUGGY]  ch  =  i.getRead();  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.getRead();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.getRead();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
611	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
612	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
613	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  hasHitEOF);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
614	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
615	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
616	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
617	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawVersion());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion()    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
618	[BUG]  [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion()    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
619	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getAbsolutePosition());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getAbsolutePosition());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
620	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
621	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  +  File.separatorChar);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
622	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  + ".js ");  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  + ".js ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName()  + ".js ");	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
623	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getResourceName());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
624	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
625	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.getModule());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.getModule());	  parsePaxHeaders(i);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
626	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getString(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
627	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
628	[BUG]  [BUGGY]  if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.getClass()!=  getClass())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
629	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
630	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
631	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding  +  1);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  zipEncoding  +  1);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
632	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getClass(),  i.getModule());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getClass(),  i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.getClass(),  i.getModule());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
633	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
634	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordHeaders());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordHeaders());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
635	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordLength());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordLength());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordLength());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
636	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordLimit());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordLimit());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordLimit());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
637	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
638	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.toString());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
639	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharacterEncoding(),  zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
640	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordHeaders());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordHeaders());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
641	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordLimit());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordLimit());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRecordLimit());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
642	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRawCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
643	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.input);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.input);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getText());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
644	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getText(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getText());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
645	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.index);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.index);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.index);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
646	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMask(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
647	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
648	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharset(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
649	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.read());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.read());	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
650	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getClass());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayMap  <  String,  String>(i.getClass());	  Map    <    String,    String>    headers    =    new    java.util.ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
651	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getReadNow());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getReadNow());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getReadNow());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
652	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize()  +  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize()  +  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getRecordSize()  +  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
653	[BUG]  [BUGGY]  if(i!=  null  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
654	[BUG]  [BUGGY]  InputStream  is  =  i.isOpen()?  null  :  i.inputStream();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  i.isOpen()?  null  :  i.inputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  i.isOpen()?  null  :  i.inputStream();	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
655	[BUG]  [BUGGY]  InputStream  is  =  i.openStream();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  i.openStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  i.openStream();	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
656	[BUG]  [BUGGY]  InputStream  is  =  i.read();  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  is  =  i.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  is  =  i.read();	  InputStream    is    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
657	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAbsolutePax(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
658	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
659	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ". ");  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ". ");  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  + ". ");	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +   ".js   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
660	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getAverage());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getAverage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getAverage());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
661	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getCharset(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
662	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getAstRoot(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getAstRoot(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getAstRoot(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
663	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
664	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterIndex());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterIndex());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharacterIndex());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
665	[BUG]  [BUGGY]  parsePaxHeaders(i,  headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  headers);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  headers);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
666	[BUG]  [BUGGY]  parsePaxHeaders(i,  i.in);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i,  i.in);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i,  i.in);	  parsePaxHeaders(i,    i);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
667	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  this.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  this.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  this.length);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
668	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
669	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMethod(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMethod(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMethod(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
670	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getName(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getCharacters());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
671	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacters());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
672	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getEncoding());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
673	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCurrentToken());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCurrentToken());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCurrentToken());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
674	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
675	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getHeaderSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(zipEncoding.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
676	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.removeMask());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.removeMask());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.removeMask());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
677	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
678	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharacters());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharacters());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.getCharacters());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
679	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes(),  i.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getBytes());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
680	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    ch    =    i.read();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
681	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ch  =  i.read();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    ch    =    i.read();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
682	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRead(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRead());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
683	[BUG]  [BUGGY]  ch  =  i.read(ByteArrayOutputStream.TYPE_INT_ARRAY);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.read(ByteArrayOutputStream.TYPE_INT_ARRAY);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read(ByteArrayOutputStream.TYPE_INT_ARRAY);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
684	[BUG]  [BUGGY]  ch  =  i.read(ByteArrayOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.read(ByteArrayOutputStream.DEFAULT);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read(ByteArrayOutputStream.DEFAULT);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
685	[BUG]  [BUGGY]  ch  =  i.read(ByteArrayOutputStream.TYPE_PADDING);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.read(ByteArrayOutputStream.TYPE_PADDING);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read(ByteArrayOutputStream.TYPE_PADDING);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
686	[BUG]  [BUGGY]  ch  =  i.read(ByteBuffer.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.read(ByteBuffer.DEFAULT_SIZE);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read(ByteBuffer.DEFAULT_SIZE);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
687	[BUG]  [BUGGY]  ch  =  i.read(ByteArrayOutputStream.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  ch  =  i.read(ByteArrayOutputStream.DEFAULT_SIZE);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	ch  =  i.read(ByteArrayOutputStream.DEFAULT_SIZE);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
688	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
689	[BUG]  [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
690	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
691	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
692	[BUG]  [BUGGY]  parsePaxHeaders(i.getRawClass());  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  parsePaxHeaders(i.getRawClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	parsePaxHeaders(i.getRawClass());	  parsePaxHeaders(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
693	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getModule());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getModule());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
694	[BUG]  [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
695	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
696	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
697	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll  =  i.getText();  if(encoding!=  null)  {  return	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
698	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
699	[BUG]  [BUGGY]  InputStream  coll  =  new  FileInputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  new  FileInputStream(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  new  FileInputStream(i.getVersion());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
700	[BUG]  [BUGGY]  InputStream  coll  =  i.openStream();  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  i.openStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  i.openStream();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
701	[BUG]  [BUGGY]  InputStream  coll  =  i.read();  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  i.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  i.read();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
702	[BUG]  [BUGGY]  InputStream  coll  =  new  FileInputStream(i.getPath());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  InputStream  coll  =  new  FileInputStream(i.getPath());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	InputStream  coll  =  new  FileInputStream(i.getPath());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
703	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.input);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.input);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
704	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
705	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
706	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getMessage());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
707	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getModule(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getModule());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
708	[BUG]  [BUGGY]  if(i!=  null  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i!=  null  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i!=  null  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
709	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getMessage(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getMessage());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
710	[BUG]  [BUGGY]  if(i  ==  null  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i  ==  null  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i  ==  null  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i    ==    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
711	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.readLine(),  i.read);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.readLine(),  i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.readLine(),  i.read);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
712	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding,  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding,  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding,  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
713	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding  +  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding  +  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  zipEncoding  +  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
714	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderLimit());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderLimit());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(record.getHeaderLimit());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(record.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
715	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.zipEncoding.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.zipEncoding.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.zipEncoding.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
716	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  str.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  str.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  str.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
717	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.urlEncoding.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.urlEncoding.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.urlEncoding.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
718	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.toString());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.toString());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.toString());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
719	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  compression);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  compression);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  compression);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
720	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  this);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  this);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  this);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
721	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot(),  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAstRoot(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
722	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.add(i.getValue());  }	  if(i!=    null)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    coll.add(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
723	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getBytes());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
724	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMode());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMode());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getMode());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
725	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding,  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding,  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  zipEncoding,  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
726	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getResourceName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getResourceName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getResourceName(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
727	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
728	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  this.zipEncoding);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
729	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getRawClass());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getRawClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getRawClass());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
730	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterIndex());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterIndex());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getCharacterIndex());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
731	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask(),  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
732	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
733	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass().getName());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
734	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getModule());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getModule());	  final    Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
735	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.input);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.input);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.input);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
736	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.resourceName);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.resourceName);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.resourceName);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
737	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input,  i.read);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input,  i.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.input,  i.read);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.input);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
738	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getMessage());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
739	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  Il  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  Il  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  Il	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
740	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ".);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
741	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getVersion(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
742	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding(),  i.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
743	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding,  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding,  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding,  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getEncoding(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
744	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getCharacterEncoding());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
745	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass().getName(),  i.getEncoding());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
746	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getReadSize());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getReadSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getReadSize());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getRecordSize());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
747	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getModule());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getModule());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
748	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getMode());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getMode());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaders(),  i.getMode());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
749	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  hasHitEOF);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
750	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
751	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.version);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.version);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.version);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
752	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName()  +  File.separatorChar,  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName()    +    File.separatorChar);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
753	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getResourceName(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
754	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterIndex());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterIndex());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharacterIndex());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
755	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
756	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getClass(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getClass(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getClass(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
757	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
758	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  i.getCharset(),  i.getMessage());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
759	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.read());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.read());	  Map    <    String,    String>    headers    =    new    ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
760	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayMap  <  String,  String>(i.getVersion());	  Map    <    String,    String>    headers    =    new    ArrayMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
761	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  0);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getHeaderSize(),  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMask(),    0);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
762	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(zipEncoding.getEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(zipEncoding.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(zipEncoding.getEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
763	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding()  +  1);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getEncoding()  +  1);	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getEncoding());    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
764	[BUG]  [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
765	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
766	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.getSize()  >  0)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.getSize()  >  0)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.getSize()  >  0)  {  String  encoding  =  i.getText();  if(encoding  ==  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding    ==    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
767	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getModule());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getModule());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
768	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getMessage());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getMessage());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getMessage());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
769	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getClass(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getClass());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
770	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterIndex());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterIndex());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion(),  i.getCharacterIndex());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
771	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
772	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue(),  i.inputEnd);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue(),  i.inputEnd);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue(),  i.inputEnd);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
773	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue(),  i.inputSize);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue(),  i.inputSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.byteValue(),  i.inputSize);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.byteValue());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
774	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.zipEncoding.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.zipEncoding.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  this.zipEncoding.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
775	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  str.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  str.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  str.isEnabled( "UTF-8 "));	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.isEnabled(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
776	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  cache,  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    cache);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
777	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( "UTF-8 "));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.isEnabled( "UTF-8 "));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
778	[BUG]  [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
779	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
780	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.getSize()  >  0)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.getSize()  >  0)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.getSize()  >  0)  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
781	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasChildren())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasChildren())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasChildren())  {  String  encoding  =  i.getText();  if(encoding!=  null)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    String    encoding    =    i.getText();    if(encoding!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
782	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getBytes());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getBytes());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>(i.getBytes());	  Map    <    String,    String>    headers    =    new    TreeMap    <    String,    String>(i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
783	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
784	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getEncoding());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage(),  i.getCharset(),  i.getEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
785	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getMessage(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getMessage(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getMessage(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getMessage(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
786	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEndPax());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEndPax());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEndPax());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getAbsolutePax());    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
787	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName(),  i.getCharset(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getResourceName(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
788	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.read());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.read());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
789	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getClass().getName());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getClass().getName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getClass().getName());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
790	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getClass());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getClass());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  java.util.ArrayList  <  String,  String>(i.getClass());	  Map    <    String,    String>    headers    =    new    java.util.ArrayList    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
791	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding,  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding,  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass(),  zipEncoding,  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
792	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getClass(),  i.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getClass(),  i.getCharacterEncoding());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(zipEncoding.getClass(),  i.getCharacterEncoding());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getClass(),    i.getCharacterEncoding());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
793	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
794	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getKey(),  i.getVersion());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getKey());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
795	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getCharset(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getCharset(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainder.getCharset(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
796	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset()  +  1,  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset()  +  1,  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset(),  i.getCharset()  +  1,  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getCharset(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
797	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.getVersion());	  Map    <    String,    String>    headers    =    new    ArrayHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
798	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.getResourceName());  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.getResourceName());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  ArrayHashMap  <  String,  String>(i.getResourceName());	  Map    <    String,    String>    headers    =    new    ArrayHashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
799	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getCharset());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getRemainder(),  i.getCharset());	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(i.getVersion(),    i.getCharset());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
