projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newLinkedHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayList<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newLinkedHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass().getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecord());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.byteValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=i.inputStream();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=i.inputStream();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getRecordSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getKey());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+".js");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRead());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeader());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getText());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){ch=i.read();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass().getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAbsolutePax());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getResourceName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remaining.getResourceName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newLinkedList<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayList<String,String>(i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeader(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeader()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=newBufferedInputStream(i.inputStream());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=parsePaxHeaders(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=parsePaxHeaders(i.inputStream());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=newFileInputStream(i.getPax());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=newFileInputStream(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=newFileInputStream(i.getMillis());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacters(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharacters(),i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),coll.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacters()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getMask(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getKey(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){ch=i.read();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435CharTypes.checkState(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){ch=i.read();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){ch=i.read();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.QUOTE_FIELD_NAMES)){ch=i.read();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){ch=i.read();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.hasNext()){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.hasNext()){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+"/.js");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+",parsePaxHeaders");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+",/.js");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset()+".js");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+",js");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!zipEncoding.equals(i.getText())){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMask()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMask(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMask(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMask(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newjava.util.ArrayList<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecord(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecord(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecord()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecord(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordBytes());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getRecord());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule(),cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getRawClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharacterEncoding(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharacterEncoding()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharacterEncoding(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),this.zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getEncoding(),i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),zipEncoding,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),size);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getResourceName(),i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.byteValue);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),this.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.input,coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),length+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),length*2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),size);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),width,length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),length+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getRawClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getAbsolutePath());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getVersion(),TarArchiveEntry.DEFAULT_TEST);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getVersion(),TarArchiveEntry.SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharacterEncoding()+",");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharacterEncoding()+"n");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharacterEncoding(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getRawClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getAstRoot());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRawClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getAstRoot());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharacterEncoding(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharacterEncoding()+",");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharacterEncoding()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,col);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getText(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getText()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getText(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getText(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getPax(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getVersion(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getString(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=newBufferedInputStream(i.inputStream());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=parsePaxHeaders(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=parsePaxHeaders(i.inputStream());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=i.getInputStream();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=newBufferedInputStream(i.read());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=is.inputStream();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharacterEncoding(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getResourceName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharacterEncoding()+",");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharacterEncoding()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getSourceName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecords());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getPaxHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||coll.isEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getVersion(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getVersion(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset(),this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset(),cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),4);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),3);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),10);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),16);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),8);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.getClass()!=getClass()){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!zipEncoding.equals(i.getText())){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newLinkedMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayMap<String,String>(i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getCharset(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getCharset(),i.byteValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getCharset(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getCharset(),i.inputStream);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawClass(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawClass(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawClass(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName()+"n");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.charAt(i.input));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.byteValue);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.record);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.input,coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.input+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newjava.util.ArrayMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.read());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharset(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getMessage(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAbsolutePax(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharset(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharset(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.next());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getAstRoot());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAbsolutePax(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getVersion(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getPax());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAbsolutePax()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.in);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.read(),i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.read+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),File.separatorChar);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()/File.separatorChar);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar,0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()*File.separatorChar);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar)+1;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar,ch);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass().getName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass().getName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass(),i.getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass().getName()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass().getName(),i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass().getSimpleName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass().getName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass().getName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass(),i.getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass().getName(),i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass().getName()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass().getName(),i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,TarArchiveEntry.class);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,TarArchiveEntry.SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,TarArchiveEntry.SOURCE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getVersion(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getVersion()*2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getVersion(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.byteValue()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.byteValue()*2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getValue(),i.byteValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.byteValue()+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getKey(),i.byteValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getRecord());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncol;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.Map<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayHashMap<String,String>(i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getChars());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.read());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRead()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRead(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getShortName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes(),i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getBytes());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getCharset(),i.byteValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getCharset(),i.inputStream);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),zipEncoding.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),this.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.isEnabled(".UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.isEnabled(PRINT_HEADER_SIZE));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.isEnabled(PRINT_CHAR_SEPARATOR));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(cache.getClass(),i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),cache,error);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(cached.getClass(),i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),cache,i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),cache,len);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),cache,length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),cache,i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMessage(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMessage(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecord());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){charencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.setText(i.getText());if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharset(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getMask(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getKey(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharset(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCurrentName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getVersion(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getVersion(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaderSize()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaderSize(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordSize()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordSize(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordSize(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordSize(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getVersion(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordSize()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordSize(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordSize(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordSize(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordSize(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getAstRoot());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getCharset(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getAstRoot(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getCharset(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.getValue();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.readInt();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.in.read();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=coll.read();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.encode(i));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.toCharArray());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getText());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getEnd());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getRecordSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getRecordSize(),i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getRecordSize(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getRecordLimit());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getEntrySize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getInputStream());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getRead());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharacterEncoding(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCurrentName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharacterEncoding()+",");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName()+"n");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getEncoding(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.inputEnd);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newArrayMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newjava.util.Map<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newLinkedHashMap<String,String>(i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),zipEncoding.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),this.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),TarArchiveEntry.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),"UTF-8");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.isEnabled(".UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getCharset(),coll);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getPax(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){charencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAsString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.toString(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.toString(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.next);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getReturnCode());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCurrentName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),4);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),3);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),16);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),10);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getResourceName(),i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getHeaderName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getResourceName()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getVersion()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remaining.getResourceName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getVersion(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+",i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),i.getCharset(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),i.getCharset()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),zipEncoding,i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),i.getCharset(),cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),i.getCharset(),this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getRecordSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacterEncoding()+",");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacterEncoding()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacterEncoding(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharacterEncoding(),i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacterEncoding()+"n");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getKey(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getKey());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),8);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getRecordLength());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,TarArchiveEntry.DEFAULT_SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,TarArchiveEntry.DEFAULT_TEST_KEY);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,TarArchiveEntry.DEFAULT_TEST_ERROR);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,TarArchiveEntry.DEFAULT_TITLE_FONT);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),width);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),length-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar+2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainders.getAstRoot(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getCharset(),hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.canBeEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIllegalStateException("");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getLineno(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&zipEncoding!=null){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&zipEncoding==null){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){break
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRead());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getRawVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getSourceName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||coll.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),zipEncoding+i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435map<String,String>headers=newHashMap<String,String>(i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.resourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharacterEncoding()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getPadding(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding+i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.encode(i.getEncoding()));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getLine());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435map<String,String>headers=newHashMap<String,String>(i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getLineno());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.isEnabled(PRINT_SIZE));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainders.getClass(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset(),hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&zipEncoding!=null){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435||zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&hasHitEOF){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){break
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMethod(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newObjectMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getRead());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getEncoding(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getLineno());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ArrayList<String,String>headers=newArrayList<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newArrayList<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newArrayHashMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getMessage());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.reset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawHeader());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeader(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=parsePaxHeaders(i,i.inputStream());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=i.inputStream(true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharset(),hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainders.getMask(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=newFileInputStream(i.getAbsolutePath());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=newFileInputStream(i.inputStream());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=i.getInputStream();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.getClass()!=getClass()){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&isEnabled(Feature.QUOTE_FIELD_NAMES)){coll=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ArrayMap<String,String>headers=newjava.util.ArrayMap<String,String>();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset(),hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getSourceName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),buffer,i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainder.getResourceName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getReturnChar());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.charValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.read(),i.byteValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.intValue());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes(),i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders(),i.getModifiers());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getByteBuffer());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()/".js");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+".js.");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+".js",i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.bytes);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.charAt(i.read));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getRawParent());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawVersion(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.record());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getRawVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.resourceName);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.bytes);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.input+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),TarEncoding.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),zipEncoding+i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),buffer,i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),ZipEncoding.UTF8);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),stringEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435map<String,String>headers=newHashMap<String,String>(i.getMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask()/1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayList<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getMessage(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),this.zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),stringEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName()+".js");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435map<String,String>headers=newHashMap<String,String>(i.getAstRoot());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read(remainders);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read(null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.getRead();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaderSize(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getCharset(),i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),cache,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getKey());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass(),length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass(),cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435map<String,String>headers=newHashMap<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getAbsolutePosition());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName()+File.separatorChar);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getResourceName()+".js");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getString(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.getClass()!=getClass()){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&isEnabled(Feature.QUOTE_FIELD_NAMES)){coll=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),zipEncoding+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainders.getClass(),i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordLength());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordLimit());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharacterEncoding(),zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordHeaders());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRecordLimit());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRawCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getText(),i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getText(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.index);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMask(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharset(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.read());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayMap<String,String>(i.getClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getReadNow());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getRecordSize()+i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=i.isOpen()?null:i.inputStream();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=i.openStream();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamis=i.read();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAbsolutePax(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRemainder(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+".");
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getAverage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getCharset(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainder.getAstRoot(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getName(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharacterIndex());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i,i.in);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),this.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacters(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMethod(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getName(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMask(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCurrentToken());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getHeaderSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.removeMask());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes(),i.getCharacters());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getBytes(),i.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){ch=i.read
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){ch=i.read();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRead(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read(ByteArrayOutputStream.TYPE_INT_ARRAY);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read(ByteArrayOutputStream.DEFAULT);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read(ByteArrayOutputStream.TYPE_PADDING);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read(ByteBuffer.DEFAULT_SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435ch=i.read(ByteArrayOutputStream.DEFAULT_SIZE);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass().getName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.hasNext()){Stringencoding=i.getText();if(encoding==null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435parsePaxHeaders(i.getRawClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.hasNext()){Stringencoding=i.getText();if(encoding!=null){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll=i.getText();if(encoding!=null){return
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null){if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=newFileInputStream(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=i.openStream();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=i.read();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435InputStreamcoll=newFileInputStream(i.getPath());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainder.getResourceName(),i.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getModule(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i!=null&&i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getMessage(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i==null||i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncoll;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.readLine(),i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),zipEncoding,i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),zipEncoding+i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(record.getHeaderLimit());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),this.zipEncoding.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),str.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),this.urlEncoding.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.toString());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),compression);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getAstRoot(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.hasNext()){if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){coll.add(i.getValue());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getBytes());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getMode());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),zipEncoding,i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getResourceName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainder.getResourceName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),this.zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getRawClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getCharacterIndex());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMask(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getClass().getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newTreeMap<String,String>(i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),this.input);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.resourceName);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.input,i.read);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIl
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||i.isEnabled(Feature.QUOTE_FIELD_NAMES)){thrownewIllegalStateException("".);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getVersion(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEncoding(),i.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding,i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass().getName(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getClass().getName(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getReadSize());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders(),i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaders(),i.getMode());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar,i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar,i.version);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName()+File.separatorChar,i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainder.getResourceName(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharacterIndex());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainder.getClass(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),i.getCharset(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayMap<String,String>(i.read());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayMap<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getHeaderSize(),0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(zipEncoding.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getEncoding()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.hasNext()){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.getSize()>0){Stringencoding=i.getText();if(encoding==null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass(),i.getModule());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass(),i.getMessage());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getClass(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getVersion(),i.getCharacterIndex());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRemainder(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.byteValue(),i.inputEnd);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.byteValue(),i.inputSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),this.zipEncoding.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),str.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),cache,i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435finalMap<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.isEnabled("UTF-8"));
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.hasNext()){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.getSize()>0){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&i.hasChildren()){Stringencoding=i.getText();if(encoding!=null){break;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newTreeMap<String,String>(i.getBytes());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharset(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getMessage(),i.getCharset(),i.getEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainder.getMessage(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getEndPax());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getResourceName(),i.getCharset(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.read());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.getClass().getName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newjava.util.ArrayList<String,String>(i.getClass());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getClass(),zipEncoding,i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(zipEncoding.getClass(),i.getCharacterEncoding());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||coll.isEnabled(Feature.QUOTE_FIELD_NAMES)){returncol;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getKey(),i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(remainder.getCharset(),i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getCharset(),i.getCharset()+1,i.getCharset());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayHashMap<String,String>(i.getVersion());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newArrayHashMap<String,String>(i.getResourceName());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java435Map<String,String>headers=newHashMap<String,String>(i.getRemainder(),i.getCharset());
