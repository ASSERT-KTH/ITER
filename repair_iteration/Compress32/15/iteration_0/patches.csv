bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
2	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage());  [CE]  illegal  start  of  type  [FE]      NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage());  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMessage());	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
3	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());  [CE]  illegal  start  of  type  [FE]        NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getMask());	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
4	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());  [CE]  illegal  start  of  type  [FE]          NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getCharset());	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
5	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());  [CE]  illegal  start  of  type  [FE]            NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getVersion());	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
6	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());  [CE]  illegal  start  of  type  [FE]              NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getAstRoot());	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]    [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	  	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
8	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getResourceName());	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
9	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]      NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
10	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>();  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  TreeMap  <  String,  String>();	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
11	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass());  [CE]  illegal  start  of  type  [FE]      NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass());  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getClass());	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
12	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding());  [CE]  illegal  start  of  type  [FE]        NumberFormatException  [CONTEXT]  Map<String,  String>  parsePaxHeaders(InputStream  i)  throws  IOException  {  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding());  [BUGGY]    while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  //  End  of  length  string  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4472135954999579	435	435	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(i.getEncoding());	Map<String,  String>  headers  =  new  HashMap<String,  String>();  	non-compiled	[CE]  illegal  start  of  type	29	None	replace
