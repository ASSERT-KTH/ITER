projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders.put(i,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i];}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers.size()>0){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i];}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size(),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(urlEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,is);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){headers.put(encoding,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".js")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())){
