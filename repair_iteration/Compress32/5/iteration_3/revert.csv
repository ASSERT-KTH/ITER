projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders.put(i,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i];}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers.size()>0){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i];}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size(),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(urlEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,is);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){headers.put(encoding,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".js")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currentEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,encoding,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,encoding,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(getNextEntry(),headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,this.encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(paxHeaders,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,entry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(getNextEntry(),headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){returncurr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry==null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){returncurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,file);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,line);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size()-1,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size()-2,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size()-4,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers.size(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers.size()-1,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.size()-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.size()+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers,isHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,false,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,false,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecurr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry==null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){continuecurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){continuecurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){continuecur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){continuecurr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){continuecurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size()-1,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers.size(),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size()-2,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size()-4,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(bodys,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,isHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,encoding,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currentEntry,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,fileEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(encoding,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entryOffset,true,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(urlEncoding,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,true,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,true,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())&}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,is,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(is,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,is,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,is,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry,headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry.getKey());}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,cache,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,cache,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,cache,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,cache,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,cache,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,cache,isHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,headers.length-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,headers.length,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,headers.length+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,encoding.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,headers.length-2);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null||headers.size()==0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getValue();if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,encoding,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,encoding,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,encoding,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,record,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,true,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,isHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431aplicePaxHeadersToCurrentEntry(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431implementPaxHeadersToCurrentEntry(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/")
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("./")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".zip")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.length-headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.length+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.length,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431AppendPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplicationPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431AppendPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(currEntry,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,headers,encoding,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,headers,fileEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,headers,this.encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,is,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getValue())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getValu
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getKey())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName())){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,hasHitEOF,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,hasHitEOF,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,hasHitEOF,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){headers.put(encoding,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){headers.put(encoding,headers[i],hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){headers.put(ENCODING,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){headers.put(encoding,headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){headers.put(encoding,headers[i].toString());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){headers.put(encoding,header);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,true,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(getNextEntry(),headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(this,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(this,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(this,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getKey())){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,fileEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileEncoding,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileEncoding,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,zipEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(this,fileEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,true,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,true,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.putAll(paxHeaders);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431implementPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.entryOffset,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.entrySize,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,this.entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,headers,this.entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entrySize,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entryOffset,headers,this.entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("./")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/>")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/")
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith(".*")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i];}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431cachedPaxHeaders[i]=headers[i];
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].toString();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=newTarArchiveEntry(headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].getName();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=newTarArchiveEntry(headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,headers,isHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){cachedPaxHeaders.put(i,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431cachedPaxHeaders.put(i,headers[i]);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders.put(i,headers[i].getName());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders.put(i,headers[i].toString());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders.put(i,headers[i],hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.length;i++){cachedPaxHeaders.put(i,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431Entry<String,String>currEntry=is.getEntry(encoding);if(currEntry!=null){applyPaxHeadersToCurrentEntry(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this,headers);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){applyPaxHeadersToCurrentEntry(this);}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){applyPaxHeadersToCurrentEntry(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){applyPaxHeadersToCurrentEntry(this);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,encoding,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,entrySize,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.paxHeaders,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,entryOffset,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,hasHitEOF,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,hasHitEOF,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,hasHitEOF,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeaders(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME||
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(encoding,this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry,this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry==null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry==null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry!=null){returncurrEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry!=null){returncurr
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(headers,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,encoding,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,flags,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,flags,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,length,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.paxHeaders,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".js")
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".js")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".js")){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".js
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,fileSize,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileSize,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileSize,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,blockSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){appendPaxHeadersToCurrentEntry(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,urlEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(urlEncoding,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entrySize,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){if(headers.size()>0){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i];}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){if(headers.size()>0){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].toString();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){if(headers.size()>0){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i];}}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){if(headers.size()>0){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].getName();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){if(headers.size()>0){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].toCharArray();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,true,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,true,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,true,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,false,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,false,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431parsePaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(encoding,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entryOffset,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,null,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,null,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,file);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.headers,currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,record);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.headers,record);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,false,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(getNextEntry(),headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(this,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,false,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(Map.Entry<String,String>currEntry:headers){if(currEntry!=null){applyPaxHeadersToCurrentEntry(currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){applyPaxHeadersToCurrentEntry(currEntry);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValu
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,getNextEntry(),headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(record,headers,getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.length;i++){cachedPaxHeaders.put(i,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders.put(i+1,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/>")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entryOffset,this.entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entrySize,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,is);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,fileSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.equals(currEntry.getName())){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(this,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,ZipEncoding.UTF8);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,ZipEncoding.US_ASCII);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,currEntry);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.put(encoding,getNextEntry());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.put(encoding,hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.put(encoding,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431allowPaxHeadersToCurrentEntry(this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431NavigatePaxHeaderscurrEntry=getNextPaxHeaders();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(urlEncoding,headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers.length-1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(headers,true,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.put(encoding,getNextEntry());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.put(encoding,hasHitEOF);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry);}else{headers.put(encoding,this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,null);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,0);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.headers,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getKey())){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,this.zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,zipEncoding,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entrySize,true,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entrySize,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431encoding.appendPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers.size(),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("-")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("js")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(this.headers,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,this.cache);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431!hasHitEOF){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431!hasHitEOF){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431!hasHitEOF){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431!hasHitEOF){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cachedHeaders,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,length,headers,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(zipEncoding,this,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry!=null){return
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.length;++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(headers,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers,true,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431encoding.appendPaxHeadersToCurrentEntry(headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431appendPaxHeadersToCurrentEntry(headers.size(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,null,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(headers,true,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=newBigInteger(headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=newFileInputStream(headers.get(i));}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=newString(headers.length);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].getEncoding();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.putAll(paxHeaders);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,fileEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,padding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,buffer);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,encoding.headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,headers,encoding,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,currEntry.getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,getNextEntry(),hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(urlEncoding,headers,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(URLEncoding.encode(zipEncoding),headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(htmlEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.get(0),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){continuecurrEnt
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].readNow();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].readNow();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431allowPaxHeadersToCurrentEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,files,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,record);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,this.entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.get(0),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431ApplyPaxHeadersToCurrentEntry(headers,false,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToPaxHeaders();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToPaxHeaders(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getEntry();if(currEntry!=null){returncur
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.length;++i){headers.put(encoding,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();++i){this.headers.put(encoding,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cachedHeaders,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entrySize,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,padding,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,padding,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cachedHeaders,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entrySize,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this.zipEncoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(bodys,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileSize+1);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,recordSize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,cache,headers.size);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,cache,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();i++){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.length>0){for(inti=0;i<headers.size();i++){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){TarArchiveEntryheader=headers[i];if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getName();if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i].getValue();if(currEntry!=null){returncurrEntry;}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){TarArchiveEntryheader=headers[i];if(currEntry.equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.length>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith("/
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getName().endsWith(".js")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(zipEncoding!=null){applyPaxHeadersToCurrentEntry(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(zipEncoding!=null){applyPaxHeadersToCurrentEntry(this);}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431Entry<String,String>entry=headers.entrySet().iterator().next();
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,this.headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,false,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();i++){cachedPaxHeaders.put(i,headers[i]);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].getName();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=newFile(headers.get(i));}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry();}else{headers.put(encoding,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry();}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry();}else{headers=newHashMap<String,String>();}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,true,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){applyPaxHeadersToCurrentEntry(this);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,this.entrySize,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,headers,this);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,this.entrySize,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,entrySize,hasHitEOF);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.entryLimit);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(cfg,headers,this,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,encoding,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(currEntry,headers,encoding,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromArchiveEntry(headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersFromCurrentEntry(headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.zipEncoding.size(),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,getNextEntry(),true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size()+1,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers==null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getValue())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.get
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this,headers);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,zipEncoding,encoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(entry,true,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,true,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,this.entrySize);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry.getKey());}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(currEntry,headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this,headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,hasHitEOF,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,true,hasHitEOF,headers.size());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getValue()==null){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.equals(currEntry.getName())
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){TarArchiveEntryheader=headers[i];if(currEntry.getName().equals(currEntry.getName())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,fileSize,headers);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(this,headers,this.entryOffset);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431Entry<String,String>currEntry=is.readNext()?headers.get(currEntry.getKey()):null;
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,entrySize,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.zipEncoding,headers,false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){headers.put(encoding,headers[i]+"");}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers.size(),false,headers.length);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,this.zipEncoding.size(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding.size(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,getNextEntry(),false);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431allowPaxHeadersToCurrentEntry(headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(".js")){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith(
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers.get(i);if(currEntry.getName().endsWith("/.js
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){appendPaxHeadersToCurrentEntry(headers,false);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){appendPaxHeadersToCurrentEntry(headers,false);}else{headers.putAll(headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null&&headers.size()>0){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(!hasHitEOF){for(inti=0;i<headers.size();++i){TarArchiveEntrycurrEntry=headers[i];if(currEntry.getType()==Token.NAME){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyHeadersToCurrentEntry(headers,zipEncoding);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntryheader=headers[i];if(currEntry.equals(currEntry.getKey())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){for(inti=0;i<headers.size();i++){TarArchiveEntryheader=headers[i];if(currEntry.equals(currEntry.getValue())){
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,entrySize,headers,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,entries,true);
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431applyPaxHeadersToCurrentEntry(headers,zipEncoding,getNextEntry());
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431if(headers!=null){applyPaxHeadersToCurrentEntry(this.headers);}
projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java431for(inti=0;i<headers.size();i++){cachedPaxHeaders[i]=headers[i].toString();}
