bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currentEntry);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currentEntry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currentEntry);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
2	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  encoding,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
4	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  encoding,  zipEncoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  encoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  encoding,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  encoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  encoding,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
7	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.encoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  this.encoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  encoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
9	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
10	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entry,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
11	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers);	  applyPaxHeadersToCurrentEntry(headers,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
12	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(paxHeaders,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(paxHeaders,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(paxHeaders,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
13	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  entrySize);	  applyPaxHeadersToCurrentEntry(entry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entry,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(entry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entry);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  entry);	  applyPaxHeadersToCurrentEntry(entry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry(),  headers);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry(),  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(getNextEntry(),  headers);	  applyPaxHeadersToCurrentEntry(entry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
19	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  curr  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  curr  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  curr	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
20	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry  ==  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
21	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEnt	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
22	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
23	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  length);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  length);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
24	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  file);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  file);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  file);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
25	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  line);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  line);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  line);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
26	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    this,    headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  entrySize);	  applyPaxHeadersToCurrentEntry(headers,    this,    headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    this,    headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    this,    headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  this,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  this,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  this,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this,    headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  1,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  1,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size()  -  1,  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
32	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  2,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  2,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size()  -  2,  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
33	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  4,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  4,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size()  -  4,  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
34	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size(),  false);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size(),  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.size(),  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
35	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size()  -  1,  false);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size()  -  1,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.size()  -  1,  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
36	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers.size());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers.size());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
37	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.size()  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.size()  -  1);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
38	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  headers.size());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  headers.size());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
39	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.size()  +  1);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.size()  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.size()  +  1);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
40	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
41	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  isHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers,  isHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
42	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  false,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  false,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  false,  headers);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
43	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  false,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  false,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  false,  headers);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
44	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
46	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
47	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  curr  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  curr  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  curr	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
48	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry  ==  null)  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry  ==  null)  {  continue  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry  ==  null)  {  continue  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
49	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEnt  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEnt	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
51	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
52	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
53	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  cur  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  cur  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  cur	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
54	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  curr  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  curr  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  curr	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
55	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEnt  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEnt	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
56	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
57	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
59	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
60	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
61	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
62	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers.length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  1,  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  1,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size()  -  1,  true);	  applyPaxHeadersToCurrentEntry(headers.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
65	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size(),  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.size(),  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.size(),  true);	  applyPaxHeadersToCurrentEntry(headers.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
66	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  2,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  2,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size()  -  2,  true);	  applyPaxHeadersToCurrentEntry(headers.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
67	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  4,  true);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  -  4,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size()  -  4,  true);	  applyPaxHeadersToCurrentEntry(headers.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
68	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  true);	  applyPaxHeadersToCurrentEntry(record,    false);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
69	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(bodys,  false);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(bodys,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(bodys,  false);	  applyPaxHeadersToCurrentEntry(record,    false);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
70	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(zipEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
71	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  false);	  applyPaxHeadersToCurrentEntry(zipEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
72	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  true);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  true);	  applyPaxHeadersToCurrentEntry(zipEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
73	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(zipEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
74	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  isHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  isHitEOF);	  applyPaxHeadersToCurrentEntry(zipEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
75	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  this);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  this);	  applyPaxHeadersToCurrentEntry(zipEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
76	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(currEntry,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currentEntry,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currentEntry,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currentEntry,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(currEntry,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  fileEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  fileEncoding);	  applyPaxHeadersToCurrentEntry(currEntry,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
79	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
80	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  true,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  true,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  true,  headers);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
81	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  true,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  true,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(encoding,  true,  headers);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
82	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entryOffset,  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entryOffset,  true,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entryOffset,  true,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
83	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  true,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  true,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(urlEncoding,  true,  headers);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
84	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  true,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  true,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
85	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  true,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  true,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
86	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
87	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
88	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
89	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
90	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
91	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
92	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  is,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  is,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  is,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    is);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
93	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(is,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(is,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(is,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    is);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
94	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  is,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  is,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  is,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    is);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
95	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  is,  encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  is,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  is,  encoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    is);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
96	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
97	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
98	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  cache,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  cache,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  cache,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
99	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  cache,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
100	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  cache,  encoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
101	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  cache,  true);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
102	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  cache,  false);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
103	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  isHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  cache,  isHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
104	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  -  1);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  -  1);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
105	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length,  headers.length);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  headers.length,  headers.length);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
106	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  +  1);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
107	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding.length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  encoding.length);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
108	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  -  2);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  -  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  headers.length  -  2);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
110	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
111	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
112	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
113	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
115	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
116	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
117	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
118	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
120	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
121	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
122	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getValue();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getValue();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getValue();  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
123	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  encoding,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
124	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
125	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  encoding,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
126	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  encoding,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  encoding,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
127	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  record,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  record,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  record,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
128	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.currEntry);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.currEntry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.currEntry);	  applyPaxHeadersToCurrentEntry(headers,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
129	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  entryOffset);	  applyPaxHeadersToCurrentEntry(headers,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
130	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  false);	  applyPaxHeadersToCurrentEntry(headers,    false,    true);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
131	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  true);	  applyPaxHeadersToCurrentEntry(headers,    false,    true);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
132	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  true,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  true,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    false,    true);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
133	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  isHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  isHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    false,    true);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
134	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(this);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(this);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
135	[BUG]  [BUGGY]  aplicePaxHeadersToCurrentEntry(this);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  aplicePaxHeadersToCurrentEntry(this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	aplicePaxHeadersToCurrentEntry(this);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
136	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(this);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  implementPaxHeadersToCurrentEntry(this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	implementPaxHeadersToCurrentEntry(this);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
137	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
138	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/* "))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/* "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/* "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
139	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ ")  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ ")  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ ")	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
140	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "./ "))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "./ "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "./ "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
141	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".* "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
142	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".zip "))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".zip "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".zip "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
143	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  encoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.headers,  encoding);	  applyPaxHeadersToCurrentEntry(encoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
144	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
145	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  -  headers.length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  -  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  -  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
146	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  +  1);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  +  1);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
147	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length,  headers.length);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.length,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
148	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(headers,  true);	  ApplyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
149	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	AppendPaxHeadersToCurrentEntry(headers,  true);	  ApplyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
150	[BUG]  [BUGGY]  ApplicationPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplicationPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplicationPaxHeadersToCurrentEntry(headers,  true);	  ApplyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
151	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	AppendPaxHeadersToCurrentEntry(headers,  false);	  ApplyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
152	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(currEntry,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(currEntry,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(currEntry,  false);	  ApplyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
153	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(cfg,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
154	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  encoding,  headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  encoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  encoding,  headers);	  applyPaxHeadersToCurrentEntry(cfg,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
155	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(cfg,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
156	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  fileEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  headers,  fileEncoding);	  applyPaxHeadersToCurrentEntry(cfg,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
157	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  this.encoding);  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  this.encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  headers,  this.encoding);	  applyPaxHeadersToCurrentEntry(cfg,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
158	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  is,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  is,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  is,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(cfg,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
159	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue())  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
160	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
161	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValu  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValu  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValu	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
162	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey())  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
164	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
165	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
167	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
168	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
169	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
170	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
171	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  headers.length);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  headers.length);	  applyPaxHeadersToCurrentEntry(this,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
172	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  encoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF,  encoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
174	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i],  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i],  hasHitEOF);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
175	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(ENCODING,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(ENCODING,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(ENCODING,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
176	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i].getName());  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i].getName());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
177	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i].toString());  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i].toString());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
178	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  header);  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  header);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  header);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
179	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  true,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  true,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
180	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  true);	  applyPaxHeadersToCurrentEntry(this,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
181	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(this,  headers,  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(this,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(this,  headers,  true);	  applyPaxHeadersToCurrentEntry(this,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
182	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(this,  headers,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(this,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(this,  headers,  false);	  applyPaxHeadersToCurrentEntry(this,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
183	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(this,  headers,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(this,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(this,  headers,  false);	  applyPaxHeadersToCurrentEntry(this,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
184	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
185	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
187	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  fileEncoding,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  fileEncoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  fileEncoding,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileEncoding);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
188	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding,  zipEncoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileEncoding);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
189	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileEncoding);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
190	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  zipEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  zipEncoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  zipEncoding,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileEncoding);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
191	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(this,  fileEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(this,  fileEncoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(this,  fileEncoding,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileEncoding);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
192	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  null);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  null);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  null);	  applyPaxHeadersToCurrentEntry(headers,    true,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
193	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  true,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  true,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  true,  false);	  applyPaxHeadersToCurrentEntry(headers,    true,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
194	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  true,  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  true,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  true,  true);	  applyPaxHeadersToCurrentEntry(headers,    true,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
195	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(paxHeaders);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(paxHeaders);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(paxHeaders);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
196	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	implementPaxHeadersToCurrentEntry(currEntry);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
197	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  true);	  applyPaxHeadersToCurrentEntry(currEntry,    false);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
198	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entry,  false);	  applyPaxHeadersToCurrentEntry(currEntry,    false);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
199	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(headers,  true);	  applyHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
200	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry(headers,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(headers,  headers);	  applyHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
201	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry(currEntry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(currEntry);	  applyHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
202	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(headers,  encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry(headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(headers,  encoding);	  applyHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
203	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(headers,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry(headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(headers,  false);	  applyHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
204	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(headers,  this);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry(headers,  this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(headers,  this);	  applyHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
205	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.entryOffset);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
206	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.entryOffset,  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this.entryOffset,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.entryOffset,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
207	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.entrySize,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this.entrySize,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.entrySize,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
208	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  this.entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  this.entrySize);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
209	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  this.entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  headers,  this.entrySize);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
210	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
211	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entryOffset,  headers,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entryOffset,  headers,  this.entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entryOffset,  headers,  this.entrySize);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
212	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/* "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/* "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/* "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
213	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
214	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "./ "))  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "./ "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "./ "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
215	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/> "))  {  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/> "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/> "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
216	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ ")  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ ")  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ ")	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
217	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( ".* "))  {  [CE]  illegal  start  of  type  [FE]                                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( ".* "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( ".* "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
219	[BUG]  [BUGGY]  cachedPaxHeaders[i]  =  headers[i];  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  cachedPaxHeaders[i]  =  headers[i];  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	cachedPaxHeaders[i]  =  headers[i];	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
220	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
221	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  TarArchiveEntry(headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  TarArchiveEntry(headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  TarArchiveEntry(headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
222	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
223	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  TarArchiveEntry(headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  TarArchiveEntry(headers[i].getName());  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  TarArchiveEntry(headers[i].getName());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
224	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    true,    headers);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
225	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers,  isHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers,  isHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    true,    headers);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
226	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    headers);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
227	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  true,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  true,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  true,  headers);	  applyPaxHeadersToCurrentEntry(headers,    true,    headers);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
229	[BUG]  [BUGGY]  cachedPaxHeaders.put(i,  headers[i]);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  cachedPaxHeaders.put(i,  headers[i]);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	cachedPaxHeaders.put(i,  headers[i]);	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
230	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i].getName());  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i].getName());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
231	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i].toString());  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i].toString());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
232	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i],  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i],  hasHitEOF);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
233	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
234	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  is.getEntry(encoding);  if(currEntry!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  Entry  <  String,  String>  currEntry  =  is.getEntry(encoding);  if(currEntry!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	Entry  <  String,  String>  currEntry  =  is.getEntry(encoding);  if(currEntry!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
235	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
236	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
237	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
238	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
239	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  encoding,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
240	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entrySize,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entrySize,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  entrySize,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
241	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.paxHeaders,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.paxHeaders,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.paxHeaders,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
242	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entryOffset,  false);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entryOffset,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  entryOffset,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
243	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    true,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
244	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    true,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
245	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers);	  applyPaxHeadersToCurrentEntry(headers,    true,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
246	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  encoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
247	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.headers,  headers);	  applyPaxHeadersToCurrentEntry(this.headers);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
248	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.recordSize);	  applyPaxHeadersToCurrentEntry(this.headers);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
249	[BUG]  [BUGGY]  applyHeadersToCurrentEntry();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry();	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
250	[BUG]  [BUGGY]  applyPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeaders(headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeaders(headers);	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
251	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry();  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry();	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
252	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry();  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry();	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
253	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
254	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
255	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
256	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
257	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
258	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME  ||  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME  ||  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME  ||	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
259	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  this,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  this,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(encoding,  this,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this,    encoding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
260	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  this,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  this,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  this,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this,    encoding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
261	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    this,    encoding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
262	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  this,  headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  this,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entry,  this,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this,    encoding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
263	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
265	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry  ==  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry  ==  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry  ==  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry  ==  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
267	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
268	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  curr  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  curr  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  curr	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
269	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(headers,  headers);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
270	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(currEntry);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
271	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(headers,  true);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
272	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  this);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(headers,  this);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
273	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers.length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(headers,  headers.length);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
274	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  encoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(headers,  encoding);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
275	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  encoding,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  encoding,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
276	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  flags,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  flags,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  flags,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
277	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  flags,  headers,  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  flags,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  flags,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
278	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  length,  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  length,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  length,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
279	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.paxHeaders,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.paxHeaders,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.paxHeaders,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
280	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
281	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js ")  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js ")  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js ")	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
282	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
283	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
284	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
285	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  fileSize,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  fileSize,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  fileSize,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
286	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
287	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  entrySize);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
288	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  entryOffset);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
289	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  encoding);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  encoding);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
290	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  blockSize);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  blockSize);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
291	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  headers);	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
292	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(currEntry);	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
293	[BUG]  [BUGGY]  if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers);  }	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
294	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  this);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  this);	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
295	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  headers.length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  headers.length);	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
296	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(this,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(this,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(this,  headers);	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
297	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  urlEncoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  urlEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  urlEncoding);	  applyPaxHeadersToCurrentEntry(urlEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
298	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(urlEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
299	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entrySize,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entrySize,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entrySize,  headers);	  applyPaxHeadersToCurrentEntry(urlEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
300	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
301	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
302	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
303	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
304	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toCharArray();  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toCharArray();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toCharArray();  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
305	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);	  appendPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
306	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  true,  false);	  appendPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
307	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  true,  encoding);	  appendPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
308	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  false,  headers.length);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  false,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  false,  headers.length);	  appendPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
309	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  false,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  false,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  false,  true);	  appendPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
310	[BUG]  [BUGGY]  parsePaxHeadersToCurrentEntry(headers,  false);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  parsePaxHeadersToCurrentEntry(headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	parsePaxHeadersToCurrentEntry(headers,  false);	  appendPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
311	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  headers.length);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
312	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache,  headers);	  applyPaxHeadersToCurrentEntry(headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
313	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  encoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
314	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache,  true);	  applyPaxHeadersToCurrentEntry(headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
315	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
316	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  false);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache,  false);	  applyPaxHeadersToCurrentEntry(headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
317	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(encoding,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
318	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
319	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entryOffset,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entryOffset,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entryOffset,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
320	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entry,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
321	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null,  headers.length);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  null,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    null);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
322	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  null,  headers);	  applyPaxHeadersToCurrentEntry(headers,    null);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
323	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  file);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  file);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  file);	  applyPaxHeadersToCurrentEntry(headers,    null);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
324	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  currEntry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.headers,  currEntry);	  applyPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
325	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
326	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  record);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  record);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  record);	  applyPaxHeadersToCurrentEntry(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
327	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
328	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  record);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  record);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.headers,  record);	  applyPaxHeadersToCurrentEntry(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
329	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  false,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  false,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  false,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
330	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(getNextEntry(),  headers,  false);	  applyPaxHeadersToCurrentEntry(this,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
331	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  null);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  null);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  null);	  applyPaxHeadersToCurrentEntry(this,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
332	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(this,  headers,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(this,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(this,  headers,  false);	  applyPaxHeadersToCurrentEntry(this,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
333	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  false,  true);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  false,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  false,  true);	  applyPaxHeadersToCurrentEntry(this,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
334	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers)  {  if(currEntry!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(Map.Entry  <  String,  String>  currEntry  :  headers)  {  if(currEntry!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(Map.Entry  <  String,  String>  currEntry  :  headers)  {  if(currEntry!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
335	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
336	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers    =    new    HashMap    <    String,    String>();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
337	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
338	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValu	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
340	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
341	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  headers);	  applyPaxHeadersToCurrentEntry(headers,    getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
342	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  getNextEntry());  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  getNextEntry());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  getNextEntry());	  applyPaxHeadersToCurrentEntry(headers,    getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
343	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  getNextEntry());  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers,  getNextEntry());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  headers,  getNextEntry());	  applyPaxHeadersToCurrentEntry(headers,    getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
344	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  getNextEntry());  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  getNextEntry());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  getNextEntry());	  applyPaxHeadersToCurrentEntry(headers,    getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
345	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  getNextEntry());  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  getNextEntry());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  getNextEntry());	  applyPaxHeadersToCurrentEntry(headers,    getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
346	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.length;  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.length;  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.length;  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
347	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i  +  1,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i  +  1,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i  +  1,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
348	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/> "))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/> "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/> "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
349	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
350	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
351	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entryOffset,  this.entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entryOffset,  this.entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.entryOffset,  this.entrySize);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
352	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
353	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  is);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  is);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  is);	  applyPaxHeadersToCurrentEntry(zipEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
354	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  fileSize);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  fileSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  fileSize);	  applyPaxHeadersToCurrentEntry(zipEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
355	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
356	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
357	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(this,  headers,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(this,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(this,  headers,  true);	  applyPaxHeadersToCurrentEntry(this,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
358	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  ZipEncoding.UTF8);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  ZipEncoding.UTF8);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  ZipEncoding.UTF8);	  applyPaxHeadersToCurrentEntry(this,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
359	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  ZipEncoding.US_ASCII);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  ZipEncoding.US_ASCII);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  ZipEncoding.US_ASCII);	  applyPaxHeadersToCurrentEntry(this,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
360	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  currEntry);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  currEntry);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  currEntry);	  applyPaxHeadersToCurrentEntry(headers,    this,    headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
361	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  cache);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  cache);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  cache);	  applyPaxHeadersToCurrentEntry(headers,    this,    headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
362	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  getNextEntry());  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  getNextEntry());  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  getNextEntry());  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
363	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  hasHitEOF);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
364	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  this);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  this);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  this);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
365	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(this);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(this);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
366	[BUG]  [BUGGY]  allowPaxHeadersToCurrentEntry(this);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  allowPaxHeadersToCurrentEntry(this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	allowPaxHeadersToCurrentEntry(this);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
367	[BUG]  [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
368	[BUG]  [BUGGY]  NavigatePaxHeaders  currEntry  =  getNextPaxHeaders();  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  NavigatePaxHeaders  currEntry  =  getNextPaxHeaders();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	NavigatePaxHeaders  currEntry  =  getNextPaxHeaders();	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
369	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  encoding);	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
370	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers,  headers);	  applyPaxHeadersToCurrentEntry(headers,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
371	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  headers);	  applyPaxHeadersToCurrentEntry(headers,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
372	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  -  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.length  -  1);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
373	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  true,  headers.length);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  true,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(headers,  true,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
374	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  getNextEntry());  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  getNextEntry());  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  getNextEntry());  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
375	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  hasHitEOF);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
376	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  this);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  this);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  this);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
377	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(this,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(this,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(this,  headers);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
378	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  null);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  null);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  null);	  applyPaxHeadersToCurrentEntry(headers,    false,    true);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
379	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  0);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  0);	  applyPaxHeadersToCurrentEntry(headers,    false,    true);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
380	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.headers,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(currEntry,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
381	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
382	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
383	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  this.zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  this.zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
384	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
385	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entrySize,  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entrySize,  true,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entrySize,  true,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
386	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entrySize,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entrySize,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entrySize,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
387	[BUG]  [BUGGY]  encoding.appendPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  encoding.appendPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	encoding.appendPaxHeadersToCurrentEntry(headers,  true);	  appendPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
388	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers.size(),  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers.size(),  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers.size(),  true);	  appendPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
389	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "- "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "- "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
390	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "js   "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "js   "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "js   "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
391	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(this.headers,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry(this.headers,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(this.headers,  headers);	  applyPaxHeadersToCurrentEntry(this.headers);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
392	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.cache);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.cache);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  this.cache);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
393	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  this);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
394	[BUG]  [BUGGY]  !hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  !hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
395	[BUG]  [BUGGY]  !hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEnt  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  !hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEnt	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
396	[BUG]  [BUGGY]  !hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  !hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
397	[BUG]  [BUGGY]  !hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  !hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getKey())&&    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
398	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
399	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  length,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  length,  headers,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  length,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
400	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  this,  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  this,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  this,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this,    encoding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
401	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  this);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  this);	  applyPaxHeadersToCurrentEntry(headers,    this,    encoding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
402	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
403	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
404	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
405	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  true,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  true,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(headers,  true,  headers);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
406	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  true,  headers);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
407	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
408	[BUG]  [BUGGY]  encoding.appendPaxHeadersToCurrentEntry(headers,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  encoding.appendPaxHeadersToCurrentEntry(headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	encoding.appendPaxHeadersToCurrentEntry(headers,  false);	  appendPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
409	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers.size(),  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  appendPaxHeadersToCurrentEntry(headers.size(),  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers.size(),  false);	  appendPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
410	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null,  headers.size());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null,  headers.size());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  null,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
411	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  true,  headers.size());  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  true,  headers.size());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(headers,  true,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.size());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
412	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  BigInteger(headers.length);  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  BigInteger(headers.length);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  BigInteger(headers.length);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
413	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  FileInputStream(headers.get(i));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  FileInputStream(headers.get(i));  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  FileInputStream(headers.get(i));  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
414	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  String(headers.length);  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  String(headers.length);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  String(headers.length);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
415	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getEncoding();  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getEncoding();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getEncoding();  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
416	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(paxHeaders);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(paxHeaders);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
417	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  fileEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  fileEncoding);	  applyPaxHeadersToCurrentEntry(headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
418	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  padding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  padding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  padding);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
419	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  buffer);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  buffer);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  buffer);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
420	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding.headers.length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding.headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  encoding.headers.length);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
421	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding,  zipEncoding);	  applyPaxHeadersToCurrentEntry(cfg,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
422	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getNextEntry());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getNextEntry());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry.getNextEntry());	  applyPaxHeadersToCurrentEntry(headers,    getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
423	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
424	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getNextEntry());  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getNextEntry());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.getNextEntry());	  applyPaxHeadersToCurrentEntry(getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
425	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(urlEncoding,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(urlEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
426	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(URLEncoding.encode(zipEncoding),  headers);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(URLEncoding.encode(zipEncoding),  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(URLEncoding.encode(zipEncoding),  headers);	  applyPaxHeadersToCurrentEntry(urlEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
427	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(htmlEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(htmlEncoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(htmlEncoding,  headers);	  applyPaxHeadersToCurrentEntry(urlEncoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
428	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.get(0),  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.get(0),  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.get(0),  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
429	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  cur  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  cur  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  cur	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
430	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEnt  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEnt	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    continue    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
431	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].readNow();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].readNow();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].readNow();  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
432	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].readNow();  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].readNow();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].readNow();  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
433	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
434	[BUG]  [BUGGY]  allowPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  allowPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	allowPaxHeadersToCurrentEntry(headers);	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
435	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  files,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  files,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  files,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileEncoding);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
436	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  record);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  record);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  record);	  applyPaxHeadersToCurrentEntry(this,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
437	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.entrySize);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  this.entrySize);	  applyPaxHeadersToCurrentEntry(this,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
438	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.get(0),  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.get(0),  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.get(0),  true);	  applyPaxHeadersToCurrentEntry(headers.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
439	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  false,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  false,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(headers,  false,  true);	  ApplyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
440	[BUG]  [BUGGY]  applyHeadersToPaxHeaders();  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToPaxHeaders();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToPaxHeaders();	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
441	[BUG]  [BUGGY]  applyHeadersToPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToPaxHeaders(headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToPaxHeaders(headers);	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
442	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  cur  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  cur  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  cur	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i].getEntry();    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
443	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers.put(encoding,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers.put(encoding,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length;  ++i)  {  headers.put(encoding,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
444	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  this.headers.put(encoding,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  this.headers.put(encoding,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  this.headers.put(encoding,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
445	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
446	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
447	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
448	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  padding,  false);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  padding,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  padding,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
449	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  padding,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  padding,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  padding,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
450	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cachedHeaders,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
451	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
452	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers,  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.entrySize,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
453	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.zipEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this.zipEncoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.zipEncoding,  headers);	  applyPaxHeadersToCurrentEntry(encoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
454	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(bodys,  encoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(bodys,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(bodys,  encoding);	  applyPaxHeadersToCurrentEntry(encoding,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
455	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize  +  1);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  fileSize  +  1);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
456	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  recordSize);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  recordSize);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
457	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
458	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  headers.size);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache,  headers.size);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache,  headers.size);	  applyPaxHeadersToCurrentEntry(headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
459	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  cache,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    cache);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
460	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
461	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
462	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
463	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.length  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.length  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.length  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
464	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getKey()))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
465	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getName();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getName();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getName();  if(currEntry!=  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
466	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getValue();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getValue();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getValue();  if(currEntry!=  null)  {  return  currEntry;  }	  if(headers    ==    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry!=    null)    {    return    currEntry;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
467	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
468	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
469	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
470	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
471	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.length  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.length  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.length  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
472	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/  [CE]  illegal  start  of  type  [FE]                                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
473	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( ".js "))  {  [CE]  illegal  start  of  type  [FE]                                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( ".js "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( ".js "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
474	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(zipEncoding!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(zipEncoding!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
475	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(zipEncoding!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(zipEncoding!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
476	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
477	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
478	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.headers.length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  this.headers.length);	  applyPaxHeadersToCurrentEntry(this,    headers,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
479	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
480	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
481	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
482	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
483	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].getName();  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
484	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  File(headers.get(i));  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  File(headers.get(i));  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  new  File(headers.get(i));  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
485	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
486	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers.put(encoding,  headers);  }	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
487	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers.putAll(headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers.putAll(headers);  }	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
488	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry();  }  else  {  headers  =  new  HashMap  <  String,  String>();  }	  applyPaxHeadersToCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
489	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  true,  false);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  true,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  true,  false);	  applyPaxHeadersToCurrentEntry(headers,    true,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
490	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(this);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(this);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  applyPaxHeadersToCurrentEntry(this);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
491	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  this.entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  this.entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  this.entrySize,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
492	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  this);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  this);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  this);	  applyPaxHeadersToCurrentEntry(headers,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
493	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  this.entrySize,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
494	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  entrySize,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
495	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entryLimit);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entryLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.entryLimit);	  applyPaxHeadersToCurrentEntry(headers,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
496	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  this,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  this,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  headers,  this,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    this,    encoding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
497	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  encoding,  headers);  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  encoding,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  encoding,  headers);	  applyPaxHeadersToCurrentEntry(currEntry,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
498	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding,  zipEncoding);	  applyPaxHeadersToCurrentEntry(currEntry,    headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
499	[BUG]  [BUGGY]  applyPaxHeadersFromArchiveEntry(headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromArchiveEntry(headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromArchiveEntry(headers);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
500	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(headers,  zipEncoding);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
501	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding.size(),  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding.size(),  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding.size(),  true);	  applyPaxHeadersToCurrentEntry(headers.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
502	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  true);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  true);	  applyPaxHeadersToCurrentEntry(headers.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
503	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  +  1,  true);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size()  +  1,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size()  +  1,  true);	  applyPaxHeadersToCurrentEntry(headers.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
504	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
505	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
506	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }  else  {  headers.putAll(headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this,  headers);  }  else  {  headers.putAll(headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(this);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
507	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding,  encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding,  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
508	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  true,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entry,  true,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
509	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  true,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  true,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
510	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    headers);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
511	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  this.entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  this.entrySize);	  applyPaxHeadersToCurrentEntry(headers,    true,    headers);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
512	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
513	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);  }	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.putAll(headers);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
514	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    this,    headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
515	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
516	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers.size());  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers.size());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    true,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
517	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getValue()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
518	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName())	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
519	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
520	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  headers);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  fileSize,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
521	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  this.entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  this.entryOffset);	  applyPaxHeadersToCurrentEntry(this,    headers,    fileSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
522	[BUG]  [BUGGY]  Entry  <  String,  String>  currEntry  =  is.readNext()?  headers.get(currEntry.getKey()):  null;  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  Entry  <  String,  String>  currEntry  =  is.readNext()?  headers.get(currEntry.getKey()):  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	Entry  <  String,  String>  currEntry  =  is.readNext()?  headers.get(currEntry.getKey()):  null;	  if(headers!=    null)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    headers.put(encoding,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
523	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entrySize,  headers,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entrySize,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  entrySize,  headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
524	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
525	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding,  headers,  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding,  headers,  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding,  headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
526	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]  + " ");  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]  + " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]  + " ");  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(encoding,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
527	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  false,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  false,  headers.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size(),  false,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    false,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
528	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding.size(),  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding.size(),  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.zipEncoding.size(),  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
529	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding.size(),  false);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding.size(),  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding.size(),  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
530	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  false);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  false);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  getNextEntry(),  false);	  applyPaxHeadersToCurrentEntry(headers.size(),    false);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
531	[BUG]  [BUGGY]  allowPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  allowPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	allowPaxHeadersToCurrentEntry(headers,  true);	  ApplyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
532	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
533	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  [CE]  illegal  start  of  type  [FE]                                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
534	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith(  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith(	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
535	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.js  [CE]  illegal  start  of  type  [FE]                                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.js  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/.js	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers.get(i);    if(currEntry.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
536	[BUG]  [BUGGY]  if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers,  false);  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers,  false);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers,  false);  }	  appendPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
537	[BUG]  [BUGGY]  if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.putAll(headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  appendPaxHeadersToCurrentEntry(headers,  false);  }  else  {  headers.putAll(headers);  }	  appendPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
538	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME  [CE]  illegal  start  of  type  [FE]                                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
539	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
540	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyHeadersToCurrentEntry(headers,  zipEncoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(headers,  zipEncoding);	  applyHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
541	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
542	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  header  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    TarArchiveEntry    currEntry    =    headers[i];    if(currEntry.equals(currEntry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
543	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
544	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entrySize,  headers,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entrySize,  headers,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  entrySize,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
545	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entries,  true);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  entries,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  entries,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers,    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
546	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  getNextEntry());  [CE]  illegal  start  of  type  [FE]                        NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  getNextEntry());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding,  getNextEntry());	  applyPaxHeadersToCurrentEntry(headers,    getNextEntry());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
547	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this.headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this.headers);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this.headers);  }	  applyPaxHeadersToCurrentEntry(this.headers);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
548	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }  [CE]  illegal  start  of  type  [FE]                                  NumberFormatException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i].toString();  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    cachedPaxHeaders[i]    =    headers[i];    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
