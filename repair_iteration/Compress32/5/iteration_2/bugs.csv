bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  null);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry());  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  getNextEntry());  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  getNextEntry());	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  encoding);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this,  encoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(encoding,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(encoding,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers);  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(record,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  headers);  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(entry,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entry,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(cfg,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry());  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(getNextEntry());  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(getNextEntry());	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this.headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this.headers);	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(entry);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(entry);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(entry);	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  appendPaxHeadersToCurrentEntry(headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers);	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }	  applyPaxHeadersToCurrentEntry(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(headers);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.putAll(headers);  }	  applyPaxHeadersToCurrentEntry(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers.put(encoding,  headers);  }	  applyPaxHeadersToCurrentEntry(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(this);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }	  applyPaxHeadersToCurrentEntry(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  encoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  true);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  true);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  true);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  false);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  false);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  false);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers.length);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  headers.length);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  headers);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  fileSize);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders.put(i,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().equals(currEntry.getName()))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getValue()))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getName()))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  cachedPaxHeaders[i]  =  headers[i];  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.equals(currEntry.getKey()))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  true);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  true);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cache);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  cache);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  false);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  false);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
38	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  encoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  encoding);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  false);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  false);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  false);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  true);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size(),  true);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  false);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  false);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  true);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  true);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  true);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  false);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  false);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  false);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(record,  false);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(record,  false);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(record,  false);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  applyHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyHeadersToCurrentEntry(headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyHeadersToCurrentEntry(headers);	  applyPaxHeadersToCurrentEntry(this);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  continue  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry!=  null)  {  return  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i].getEntry();  if(currEntry!=  null)  {  return  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  continue  currEntry;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getType()  ==  Token.NAME)  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getValue()  ==  null)  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ "))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers[i];  if(currEntry.getName().endsWith( "/ "))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(zipEncoding,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(zipEncoding,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(urlEncoding,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(urlEncoding,  headers);	  applyPaxHeadersToCurrentEntry(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersFromCurrentEntry(headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersFromCurrentEntry(headers);	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
57	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  false);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers,  false);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	ApplyPaxHeadersToCurrentEntry(headers,  false);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  false);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers.size(),  false);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers.size(),  false);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	appendPaxHeadersToCurrentEntry(headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
60	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry);	  applyPaxHeadersToCurrentEntry(headers,    this);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  is);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  is);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  is);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  cache);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  cache);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  this.entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  this.entrySize);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
64	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  headers);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  true,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
66	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(headers);  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(headers);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.putAll(headers);  }	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
68	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  headers);  }  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  headers);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers.put(encoding,  headers);  }	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
69	[BUG]  [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  headers  =  new  HashMap  <  String,  String>();  }	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
70	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry();  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry();	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
71	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  zipEncoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.size());  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.size());  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.size());	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
73	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers);  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length);  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  false,  headers.length);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(headers,  false,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    false);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	applyPaxHeadersToCurrentEntry(this,  headers,  fileEncoding);	  applyPaxHeadersToCurrentEntry(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
76	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                    NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ "))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( "/ "))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&  [CE]  illegal  start  of  type  [FE]                      NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey())&&	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                        NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(encoding,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                          NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getName()))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                            NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getKey()))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  [CE]  illegal  start  of  type  [FE]                              NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.getName().endsWith( ".js "))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
82	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {  [CE]  illegal  start  of  type  [FE]                                NumberFormatException    [CONTEXT]    private  void  paxHeaders()  throws  IOException{  Map<String,  String>  headers  =  parsePaxHeaders(this);  getNextEntry();  //  Get  the  actual  file  entry    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	431	431	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  TarArchiveEntry  currEntry  =  headers.get(i);  if(currEntry.equals(currEntry.getValue()))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
