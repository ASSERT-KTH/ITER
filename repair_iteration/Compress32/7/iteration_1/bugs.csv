bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  key  =  ent.getValue();  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]  String  key  =  ent.getValue();  [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	String  key  =  ent.getValue();	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  String  key  =  ent.getKey()  + ": "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]      NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]  String  key  =  ent.getKey()  + ": "  +  ent.getValue();  [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	String  key  =  ent.getKey()  + ": "  +  ent.getValue();	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  String  key  =(ent.getKey()  ==  null)?  null  :  ent.getKey();  [CE]  illegal  start  of  type  [FE]        NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]  String  key  =(ent.getKey()  ==  null)?  null  :  ent.getKey();  [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	String  key  =(ent.getKey()  ==  null)?  null  :  ent.getKey();	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  String  key  =(ent.getKey()  ==  null)?  ent.getValue()  :  ent.getKey();  [CE]  illegal  start  of  type  [FE]          NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]  String  key  =(ent.getKey()  ==  null)?  ent.getValue()  :  ent.getKey();  [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	String  key  =(ent.getKey()  ==  null)?  ent.getValue()  :  ent.getKey();	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  String  key  =  ent.getKey()  + "= "  +  ent.getValue();  [CE]  illegal  start  of  type  [FE]            NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]  String  key  =  ent.getKey()  + "= "  +  ent.getValue();  [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	String  key  =  ent.getKey()  + "= "  +  ent.getValue();	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]    [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	  	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
7	[BUG]  [BUGGY]  String  key  =  ent.getKey()  + "( "+entry.getValue());  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]  String  key  =  ent.getKey()  + "( "+entry.getValue());  [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	String  key  =  ent.getKey()  + "( "+entry.getValue());	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
8	[BUG]  [BUGGY]  String  key  =  ent.getKey()  + "n ";  [CE]  illegal  start  of  type  [FE]      NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]  String  key  =  ent.getKey()  + "n ";  [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	String  key  =  ent.getKey()  + "n ";	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
9	[BUG]  [BUGGY]  String  key  =(ent.getKey()  ==  null)?  ent.getKey()  :  ent.getValue();  [CE]  illegal  start  of  type  [FE]    NumberFormatException  [CONTEXT]            for  (Entry<String,  String>  ent  :  headers.entrySet()){  [BUGGY]  String  key  =(ent.getKey()  ==  null)?  ent.getKey()  :  ent.getValue();  [BUGGY]  String  val  =  ent.getValue();  if  ( "path ".equals(key)){  currEntry.setName(val);  }  else  if  ( "linkpath ".equals(key)){  currEntry.setLinkName(val);  }  else  if  ( "gid ".equals(key)){  currEntry.setGroupId(Integer.parseInt(val));  }  else  if  ( "gname ".equals(key)){  currEntry.setGroupName(val);  }  else  if  ( "uid ".equals(key)){  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	494	494	1	replace	String  key  =(ent.getKey()  ==  null)?  ent.getKey()  :  ent.getValue();	String  key  =  ent.getKey();  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
