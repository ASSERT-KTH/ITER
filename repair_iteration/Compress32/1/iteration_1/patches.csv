bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  1);  [CE]  cannot  find  symbol  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  [FE]  NumberFormatException  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	add	currEntry.setGroupId(Integer.parseInt(val)/  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    	compilable	  [FE]  NumberFormatException  	4	1	replace
3	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  [FE]  NumberFormatException  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    	compilable	  [FE]  NumberFormatException  	4	1	replace
4	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  1);  [CE]  cannot  find  symbol  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
5	[BUG]  [BUGGY]  [FE]  NumberFormatException  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	add	currEntry.setGroupId(Integer.parseInt(val)+  2);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    	compilable	  [FE]  NumberFormatException  	4	1	replace
6	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  [FE]  NumberFormatException  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+  2);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    	compilable	  [FE]  NumberFormatException  	4	1	replace
7	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  0);  [CE]  cannot  find  symbol  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  0);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val),  0);	  currEntry.setGidId(Integer.parseInt(val));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
8	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  Long.parseLong(val));  [CE]  cannot  find  symbol  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  Long.parseLong(val));  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val),  Long.parseLong(val));	  currEntry.setGidId(Integer.parseInt(val));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]  [FE]  NumberFormatException  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	add	currEntry.setGroupId(Integer.parseInt(val)/  4);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    	compilable	  [FE]  NumberFormatException  	10	1	replace
10	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  [FE]  NumberFormatException  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  4);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    	compilable	  [FE]  NumberFormatException  	10	1	replace
11	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  2);  [CE]  cannot  find  symbol  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  2);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  2);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
12	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1);  [CE]  cannot  find  symbol  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  1);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
13	[BUG]  [BUGGY]      currEntry.setGid(val);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]      currEntry.setGid(val);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	        currEntry.setGid(val);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
14	[BUG]  [BUGGY]      currEntry.setGroupName(val);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]      currEntry.setGroupName(val);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	        currEntry.setGroupName(val);	  	non-compiled	[CE]  not  a  statement	5	None	add
15	[BUG]  [BUGGY]      String  val  =  currEntry.getGid();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]      String  val  =  currEntry.getGid();  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	        String  val  =  currEntry.getGid();	  	non-compiled	[CE]  not  a  statement	5	None	add
16	[BUG]  [BUGGY]      CurrEntry.setGid(val);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]      CurrEntry.setGid(val);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	        CurrEntry.setGid(val);	  	non-compiled	[CE]  not  a  statement	5	None	add
17	[BUG]  [BUGGY]      currEntry.setGroupId(val);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]      currEntry.setGroupId(val);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	        currEntry.setGroupId(val);	  	non-compiled	[CE]  not  a  statement	5	None	add
18	[BUG]  [BUGGY]      CurrEntry.setGroupName(val);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]      CurrEntry.setGroupName(val);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	        CurrEntry.setGroupName(val);	  	non-compiled	[CE]  not  a  statement	5	None	add
19	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  4);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  4);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*  4);	  	non-compiled	[CE]  not  a  statement	9	None	add
20	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  CurrEntry.setGroupId(Integer.parseInt(val)*  4);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  CurrEntry.setGroupId(Integer.parseInt(val)*  4);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    4);    CurrEntry.setGroupId(Integer.parseInt(val)*  4);	  	non-compiled	[CE]  not  a  statement	9	None	add
21	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  3);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  3);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*  3);	  	non-compiled	[CE]  not  a  statement	9	None	add
22	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  4));  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  4));  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*  4));	  	non-compiled	[CE]  not  a  statement	9	None	add
23	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  courseEntry.setGroupId(Integer.parseInt(val)*  4);  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  courseEntry.setGroupId(Integer.parseInt(val)*  4);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    4);    courseEntry.setGroupId(Integer.parseInt(val)*  4);	  	non-compiled	[CE]  not  a  statement	9	None	add
24	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+  1);	  	non-compiled	[CE]  not  a  statement	3	None	add
25	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  CurrEntry.setGroupId(Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  CurrEntry.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    1);    CurrEntry.setGroupId(Integer.parseInt(val)+  1);	  	non-compiled	[CE]  not  a  statement	3	None	add
26	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  else  if  (   "gid ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  else  if  (   "gid ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+  1);  }  else  if  (   "gid ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);	  	non-compiled	[CE]  not  a  statement	3	None	add
27	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1000);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1000);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	8	None	replace
28	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  10000);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  10000);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  10000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	8	None	replace
29	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  1000);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  1000);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	8	None	replace
30	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val),  0);  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGid(Integer.parseInt(val),  0);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val),  0);	  currEntry.setGid(Integer.parseInt(val));    	non-compiled	[CE]  not  a  statement	2	None	replace
31	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val),  Long.parseLong(val));  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGid(Integer.parseInt(val),  Long.parseLong(val));  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val),  Long.parseLong(val));	  currEntry.setGid(Integer.parseInt(val));    	non-compiled	[CE]  not  a  statement	2	None	replace
32	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*  1000);	  	non-compiled	[CE]  not  a  statement	7	None	add
33	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  CurrEntry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  CurrEntry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    1000);    CurrEntry.setGroupId(Integer.parseInt(val)*  1000);	  	non-compiled	[CE]  not  a  statement	7	None	add
34	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGroupId(Integer.parseInt(val)*  100);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGroupId(Integer.parseInt(val)*  100);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*  100);	  	non-compiled	[CE]  not  a  statement	7	None	add
35	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGroupId(Integer.parseInt(val)*  10000);  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGroupId(Integer.parseInt(val)*  10000);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*  10000);	  	non-compiled	[CE]  not  a  statement	7	None	add
36	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  courseEntry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  courseEntry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    1000);    courseEntry.setGroupId(Integer.parseInt(val)*  1000);	  	non-compiled	[CE]  not  a  statement	7	None	add
37	[BUG]  [BUGGY]      currEntry.setGid(gid);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]      currEntry.setGid(gid);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	        currEntry.setGid(gid);	  	non-compiled	[CE]  not  a  statement	5	None	add
38	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val),  16);  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGid(Integer.parseInt(val),  16);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val),  16);	  currEntry.setGid(Integer.parseInt(val));    	non-compiled	[CE]  not  a  statement	2	None	replace
39	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  2);  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  2);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  2);	  currEntry.setGid(Integer.parseInt(val));    	non-compiled	[CE]  not  a  statement	2	None	replace
40	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  1);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)/  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  not  a  statement	4	None	replace
41	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  10);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  10);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  10);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    	non-compiled	[CE]  not  a  statement	10	None	replace
42	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  3);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  3);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  3);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    	non-compiled	[CE]  not  a  statement	10	None	replace
43	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  16);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  16);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  16);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    	non-compiled	[CE]  not  a  statement	10	None	replace
44	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  8);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  8);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*  8);	  	non-compiled	[CE]  not  a  statement	9	None	add
45	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  5);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  5);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*  5);	  	non-compiled	[CE]  not  a  statement	9	None	add
46	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1));  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1));  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+  1));	  	non-compiled	[CE]  not  a  statement	3	None	add
47	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGid(Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGid(Integer.parseInt(val)+  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGid(Integer.parseInt(val)+  1);	  	non-compiled	[CE]  not  a  statement	3	None	add
48	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  1000);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  1000);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	8	None	replace
49	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  gid);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  gid);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val),  gid);	  currEntry.setGidId(Integer.parseInt(val));    	non-compiled	[CE]  not  a  statement	1	None	replace
50	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)-1);  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(Integer.parseInt(val)-1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)-1);	  currEntry.setGidId(Integer.parseInt(val));    	non-compiled	[CE]  not  a  statement	1	None	replace
51	[BUG]  [BUGGY]  currEntry.setGidId(val);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(val);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(val);	      	non-compiled	[CE]  not  a  statement	6	None	replace
52	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  1);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  1);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  not  a  statement	4	None	replace
53	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  40);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  4);  currEntry.setGroupId(Integer.parseInt(val)*  40);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*  40);	  	non-compiled	[CE]  not  a  statement	9	None	add
54	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val),  12);  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]      for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (   "path   ".equals(key)){  currEntry.setName(val);  }  else  if  (   "linkpath   ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (   "gid   ".equals(key)){    [BUGGY]  currEntry.setGid(Integer.parseInt(val),  12);  [BUGGY]    }  else  if  (   "gname   ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (   "uid   ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (   "uname   ".equals(key)){  currEntry.setUserName(val);  }  else  if  (   "size   ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (   "mtime   ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val),  12);	  currEntry.setGid(Integer.parseInt(val));    	non-compiled	[CE]  not  a  statement	2	None	replace
