bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupId(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	32	None	replace
2	[BUG]  [BUGGY]  Entry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  Entry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	Entry.setGroupId(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	32	None	replace
3	[BUG]  [BUGGY]  rEntry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  rEntry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	rEntry.setGroupId(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	32	None	replace
4	[BUG]  [BUGGY]  val  =  Integer.parseInt(val)*  1000;  currEntry.setGroupId(val);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  val  =  Integer.parseInt(val)*  1000;  currEntry.setGroupId(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	val  =  Integer.parseInt(val)*  1000;  currEntry.setGroupId(val);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	32	None	replace
5	[BUG]  [BUGGY]  val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1));  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1));	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1));    	non-compiled	[CE]  not  a  statement	46	None	replace
6	[BUG]  [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupId(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1));    	non-compiled	[CE]  not  a  statement	46	None	replace
7	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1));  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  1);  currEntry.setGroupId(Integer.parseInt(val)+  1));	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1));    	non-compiled	[CE]  not  a  statement	46	None	replace
8	[BUG]  [BUGGY]  Entry.setGroupId(Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  Entry.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	Entry.setGroupId(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1));    	non-compiled	[CE]  not  a  statement	46	None	replace
9	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  40);  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  40);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  40);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    40);    	non-compiled	[CE]  not  a  statement	53	None	replace
10	[BUG]  [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)*  40);  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)*  40);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupId(Integer.parseInt(val)*  40);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    40);    	non-compiled	[CE]  not  a  statement	53	None	replace
11	[BUG]  [BUGGY]  Entry.setGroupId(Integer.parseInt(val)*  40);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  Entry.setGroupId(Integer.parseInt(val)*  40);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	Entry.setGroupId(Integer.parseInt(val)*  40);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    40);    	non-compiled	[CE]  not  a  statement	53	None	replace
12	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  100);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  100);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  100);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    40);    	non-compiled	[CE]  not  a  statement	53	None	replace
13	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  2);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  2);	  currEntry.setGroupId(Integer.parseInt(val)+    2);    	non-compiled	[CE]  not  a  statement	6	None	replace
14	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  3);  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  3);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  3);	  currEntry.setGroupId(Integer.parseInt(val)*    3);    	non-compiled	[CE]  not  a  statement	42	None	replace
15	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGroupId(Integer.parseInt(val)/  4);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGroupId(Integer.parseInt(val)/  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    currEntry.setGroupId(Integer.parseInt(val)/  4);	  	non-compiled	[CE]  not  a  statement	9	None	add
16	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  CurrEntry.setGroupId(Integer.parseInt(val)/  4);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  CurrEntry.setGroupId(Integer.parseInt(val)/  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    CurrEntry.setGroupId(Integer.parseInt(val)/  4);	  	non-compiled	[CE]  not  a  statement	9	None	add
17	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGroupId(Integer.parseInt(val)/  3);  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGroupId(Integer.parseInt(val)/  3);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    currEntry.setGroupId(Integer.parseInt(val)/  3);	  	non-compiled	[CE]  not  a  statement	9	None	add
18	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  curterEntry.setGroupId(Integer.parseInt(val)/  4);  [CE]  not  a  statement  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  curterEntry.setGroupId(Integer.parseInt(val)/  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    curterEntry.setGroupId(Integer.parseInt(val)/  4);	  	non-compiled	[CE]  not  a  statement	9	None	add
19	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  courseEntry.setGroupId(Integer.parseInt(val)/  4);  [CE]  not  a  statement  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  courseEntry.setGroupId(Integer.parseInt(val)/  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    courseEntry.setGroupId(Integer.parseInt(val)/  4);	  	non-compiled	[CE]  not  a  statement	9	None	add
20	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGroupId(Integer.parseInt(val)/  5);  [CE]  not  a  statement  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGroupId(Integer.parseInt(val)/  5);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    currEntry.setGroupId(Integer.parseInt(val)/  5);	  	non-compiled	[CE]  not  a  statement	9	None	add
21	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  10);  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  10);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  10);	  currEntry.setGroupId(Integer.parseInt(val)*    10);    	non-compiled	[CE]  not  a  statement	41	None	replace
22	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  12);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  12);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  12);	  currEntry.setGid(Integer.parseInt(val),    12);    	non-compiled	[CE]  not  a  statement	54	None	replace
23	[BUG]  [BUGGY]  CurrEntry.setGid(gid);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGid(gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGid(gid);	          CurrEntry.setGid(val);    	non-compiled	[CE]  not  a  statement	16	None	replace
24	[BUG]  [BUGGY]  CurrEntry.setGid(val,  currEntry.getGid());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGid(val,  currEntry.getGid());  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGid(val,  currEntry.getGid());	          CurrEntry.setGid(val);    	non-compiled	[CE]  not  a  statement	16	None	replace
25	[BUG]  [BUGGY]  CurrEntry.setGid(currEntry.getGid());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGid(currEntry.getGid());  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGid(currEntry.getGid());	          CurrEntry.setGid(val);    	non-compiled	[CE]  not  a  statement	16	None	replace
26	[BUG]  [BUGGY]  CurrEntry.setGid(Value.parseGid(val));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGid(Value.parseGid(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGid(Value.parseGid(val));	          CurrEntry.setGid(val);    	non-compiled	[CE]  not  a  statement	16	None	replace
27	[BUG]  [BUGGY]  CurrEntry.setGid(val,  gid);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGid(val,  gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGid(val,  gid);	          CurrEntry.setGid(val);    	non-compiled	[CE]  not  a  statement	16	None	replace
28	[BUG]  [BUGGY]  CurrEntry.setGidId(val);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGidId(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGidId(val);	          CurrEntry.setGid(val);    	non-compiled	[CE]  not  a  statement	16	None	replace
29	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  1000);  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)/  1000);	  currEntry.setGid(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	48	None	replace
30	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  10000);  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  10000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)*  10000);	  currEntry.setGid(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	48	None	replace
31	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  100);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  100);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)*  100);	  currEntry.setGid(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  not  a  statement	48	None	replace
32	[BUG]  [BUGGY]  val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  not  a  statement	24	None	replace
33	[BUG]  [BUGGY]  String  val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  Integer.parseInt(val)+  1;  currEntry.setGroupId(val,  Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  not  a  statement	24	None	replace
34	[BUG]  [BUGGY]  Entry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGid(Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  Entry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGid(Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	Entry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGid(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGid(Integer.parseInt(val)+    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
35	[BUG]  [BUGGY]  CurrEntry.setGid(Integer.parseInt(val)+  1);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGid(Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGid(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGid(Integer.parseInt(val)+    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
36	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGid(Integer.parseInt(val)/  1);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGid(Integer.parseInt(val)/  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+  1);  currEntry.setGid(Integer.parseInt(val)/  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGid(Integer.parseInt(val)+    1);    	non-compiled	[CE]  not  a  statement	47	None	replace
37	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  16);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  16);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  16);	  currEntry.setGid(Integer.parseInt(val),    16);    	non-compiled	[CE]  not  a  statement	38	None	replace
38	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  1);  [CE]  incompatible  types  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)/  1);	  currEntry.setGid(Integer.parseInt(val)+    1);    	non-compiled	[CE]  incompatible  types	4	None	replace
39	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  3);  [CE]  incompatible  types  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  3);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  3);	  currEntry.setGid(Integer.parseInt(val)+    1);    	non-compiled	[CE]  incompatible  types	4	None	replace
40	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  5);  [CE]  incompatible  types  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  5);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  5);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    5);    	non-compiled	[CE]  incompatible  types	45	None	replace
41	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  1,  gid);  [CE]  incompatible  types  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  1,  gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)+  1,  gid);	  currEntry.setGidId(Integer.parseInt(val),    gid);    	non-compiled	[CE]  incompatible  types	49	None	replace
42	[BUG]  [BUGGY]  courseEntry.setGroupId(Integer.parseInt(val)*  4);  [CE]  incompatible  types  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  courseEntry.setGroupId(Integer.parseInt(val)*  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	courseEntry.setGroupId(Integer.parseInt(val)*  4);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    courseEntry.setGroupId(Integer.parseInt(val)*    4);    	non-compiled	[CE]  incompatible  types	23	None	replace
43	[BUG]  [BUGGY]  Entry.setGroupId(Integer.parseInt(val)*  4);  [CE]  incompatible  types  [FE]                  NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  Entry.setGroupId(Integer.parseInt(val)*  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	Entry.setGroupId(Integer.parseInt(val)*  4);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    courseEntry.setGroupId(Integer.parseInt(val)*    4);    	non-compiled	[CE]  incompatible  types	23	None	replace
44	[BUG]  [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)*  4);  [CE]  incompatible  types  [FE]                    NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)*  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupId(Integer.parseInt(val)*  4);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    courseEntry.setGroupId(Integer.parseInt(val)*    4);    	non-compiled	[CE]  incompatible  types	23	None	replace
45	[BUG]  [BUGGY]  else  if( "gid   ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  [CE]  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  else  if( "gid   ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	else  if( "gid   ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    }    else    if    (       "gid   ".equals(key))    {    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  	26	None	replace
46	[BUG]  [BUGGY]  betroffene  else  if( "gid   ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  betroffene  else  if( "gid   ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	betroffene  else  if( "gid   ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    }    else    if    (       "gid   ".equals(key))    {    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  not  a  statement	26	None	replace
47	[BUG]  [BUGGY]  betroffene.setGroupId(Integer.parseInt(val)+  1);  [CE]  incompatible  types  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  betroffene.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	betroffene.setGroupId(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    }    else    if    (       "gid   ".equals(key))    {    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  incompatible  types	26	None	replace
48	[BUG]  [BUGGY]  reader.setGroupId(Integer.parseInt(val)+  1);  [CE]  incompatible  types  [FE]                  NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  reader.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	reader.setGroupId(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    }    else    if    (       "gid   ".equals(key))    {    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  incompatible  types	26	None	replace
49	[BUG]  [BUGGY]  String  val  =  currEntry.getGid()  +  1;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGid()  +  1;  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGid()  +  1;	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  incompatible  types	15	None	replace
50	[BUG]  [BUGGY]  String  val  =  currEntry.getValue();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getValue();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getValue();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  incompatible  types	15	None	replace
51	[BUG]  [BUGGY]  String  val  =  currEntry.getGid()  + ": "  +  currEntry.getName();  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGid()  + ": "  +  currEntry.getName();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGid()  + ": "  +  currEntry.getName();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  incompatible  types	15	None	replace
52	[BUG]  [BUGGY]  String  val  =  currEntry.getGid()  +  key;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGid()  +  key;  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGid()  +  key;	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  incompatible  types	15	None	replace
53	[BUG]  [BUGGY]  String  val  =  currEntry.getGid()  + ".gid ";  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGid()  + ".gid ";  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGid()  + ".gid ";	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
54	[BUG]  [BUGGY]  String  val  =  currEntry.getGid()  +  val;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGid()  +  val;  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGid()  +  val;	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
55	[BUG]  [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)*  100);  [CE]  cannot  find  symbol  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupId(Integer.parseInt(val)*  100);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupId(Integer.parseInt(val)*  100);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*    100);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
56	[BUG]  [BUGGY]  currEntry.setGid(val,  gid);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(val,  gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(val,  gid);	          currEntry.setGid(val);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
57	[BUG]  [BUGGY]  currEntry.setGid(Value.parseValue(val));  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Value.parseValue(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Value.parseValue(val));	          currEntry.setGid(val);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
58	[BUG]  [BUGGY]  currEntry.setGidId(gid);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(gid);	  currEntry.setGidId(val);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
59	[BUG]  [BUGGY]  currEntry.setGidId(Value.parseGid(val));  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Value.parseGid(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Value.parseGid(val));	  currEntry.setGidId(val);    	non-compiled	[CE]  incompatible  types	51	None	replace
60	[BUG]  [BUGGY]  currEntry.setGidId(Value.parseInt(val));  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Value.parseInt(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Value.parseInt(val));	  currEntry.setGidId(val);    	non-compiled	[CE]  incompatible  types	51	None	replace
61	[BUG]  [BUGGY]  currEntry.setGID(val);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGID(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGID(val);	          currEntry.setGid(gid);    	non-compiled	[CE]  incompatible  types	37	None	replace
62	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  10000);  [CE]  incompatible  types  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  10000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  10000);	  currEntry.setGroupId(Integer.parseInt(val)*    10000);    	non-compiled	[CE]  incompatible  types	28	None	replace
63	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  10000);  [CE]  incompatible  types  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  10000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+  10000);	  currEntry.setGroupId(Integer.parseInt(val)*    10000);    	non-compiled	[CE]  incompatible  types	28	None	replace
64	[BUG]  [BUGGY]  currEntry.setGid(Long.parseLong(val),  Long.parseLong(val));  [CE]  incompatible  types  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Long.parseLong(val),  Long.parseLong(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Long.parseLong(val),  Long.parseLong(val));	  currEntry.setGid(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  incompatible  types	31	None	replace
65	[BUG]  [BUGGY]  currEntry.setGid(Long.parseLong(val));  [CE]  incompatible  types  [FE]                  NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Long.parseLong(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Long.parseLong(val));	  currEntry.setGid(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  incompatible  types	31	None	replace
66	[BUG]  [BUGGY]  currEntry.setGidId(Long.parseLong(val),  Integer.parseInt(val));  [CE]  incompatible  types  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Long.parseLong(val),  Integer.parseInt(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Long.parseLong(val),  Integer.parseInt(val));	  currEntry.setGidId(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  incompatible  types	8	None	replace
67	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  Integer.parseInt(val));  [CE]  incompatible  types  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  Integer.parseInt(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val),  Integer.parseInt(val));	  currEntry.setGidId(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  incompatible  types	8	None	replace
68	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  1,  Long.parseLong(val));  [CE]  incompatible  types  [FE]                  NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  1,  Long.parseLong(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)+  1,  Long.parseLong(val));	  currEntry.setGidId(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  incompatible  types	8	None	replace
69	[BUG]  [BUGGY]  CurrEntry.setGidName(val);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGidName(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGidName(val);	          CurrEntry.setGroupName(val);    	non-compiled	[CE]  incompatible  types	18	None	replace
70	[BUG]  [BUGGY]  CurrEntry.setGroupId(val);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupId(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupId(val);	          CurrEntry.setGroupName(val);    	non-compiled	[CE]  incompatible  types	18	None	replace
71	[BUG]  [BUGGY]  CurrEntry.setGroupName(val,  currEntry.getGid());  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupName(val,  currEntry.getGid());  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupName(val,  currEntry.getGid());	          CurrEntry.setGroupName(val);    	non-compiled	[CE]  incompatible  types	18	None	replace
72	[BUG]  [BUGGY]  CurrEntry.setGroupName(val,  gid);  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupName(val,  gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupName(val,  gid);	          CurrEntry.setGroupName(val);    	non-compiled	[CE]  incompatible  types	18	None	replace
73	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+  2);  [CE]  incompatible  types  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    2);    currEntry.setGroupId(Integer.parseInt(val)+  2);	  	non-compiled	[CE]  incompatible  types	5	None	add
74	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  CurrEntry.setGroupId(Integer.parseInt(val)+  2);  [CE]  incompatible  types  [FE]      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  CurrEntry.setGroupId(Integer.parseInt(val)+  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    2);    CurrEntry.setGroupId(Integer.parseInt(val)+  2);	  	non-compiled	[CE]  incompatible  types	5	None	add
75	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+  2));  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+  2));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    2);    currEntry.setGroupId(Integer.parseInt(val)+  2));	  	non-compiled	[CE]  ';'  expected	5	None	add
76	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+  3);  [CE]  incompatible  types  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+  3);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    2);    currEntry.setGroupId(Integer.parseInt(val)+  3);	  	non-compiled	[CE]  incompatible  types	5	None	add
77	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  courseEntry.setGroupId(Integer.parseInt(val)+  2);  [CE]  incompatible  types  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  courseEntry.setGroupId(Integer.parseInt(val)+  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    2);    courseEntry.setGroupId(Integer.parseInt(val)+  2);	  	non-compiled	[CE]  incompatible  types	5	None	add
78	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  8);  [CE]  incompatible  types  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  8);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  8);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    8);    	non-compiled	[CE]  incompatible  types	44	None	replace
79	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  2);  [CE]  incompatible  types  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)/  2);	  currEntry.setGidId(Integer.parseInt(val)/    1);    	non-compiled	[CE]  incompatible  types	40	None	replace
80	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  2.0);  [CE]  incompatible  types  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  2.0);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)/  2.0);	  currEntry.setGidId(Integer.parseInt(val)/    1);    	non-compiled	[CE]  incompatible  types	40	None	replace
81	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  1000);  [CE]  incompatible  types  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)/  1000);	  currEntry.setGidId(Integer.parseInt(val)/    1);    	non-compiled	[CE]  incompatible  types	40	None	replace
82	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  3);  [CE]  cannot  find  symbol  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  3);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)/  3);	  currEntry.setGidId(Integer.parseInt(val)/    1);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
83	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  currEntry.setGroupId(Integer.parseInt(val)/  1);  [CE]  cannot  find  symbol  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  currEntry.setGroupId(Integer.parseInt(val)/  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    1);    currEntry.setGroupId(Integer.parseInt(val)/  1);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
84	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  CurrEntry.setGroupId(Integer.parseInt(val)/  1);  [CE]  cannot  find  symbol  [FE]      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  CurrEntry.setGroupId(Integer.parseInt(val)/  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    1);    CurrEntry.setGroupId(Integer.parseInt(val)/  1);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
85	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  currEntry.setGroupId(Integer.parseInt(val)/  1));  [CE]  ';'  expected  [FE]        NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  currEntry.setGroupId(Integer.parseInt(val)/  1));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    1);    currEntry.setGroupId(Integer.parseInt(val)/  1));	  	non-compiled	[CE]  ';'  expected	2	None	add
86	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  cursorEntry.setGroupId(Integer.parseInt(val)/  1);  [CE]  ';'  expected  [FE]          NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  cursorEntry.setGroupId(Integer.parseInt(val)/  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    1);    cursorEntry.setGroupId(Integer.parseInt(val)/  1);	  	non-compiled	[CE]  ';'  expected	2	None	add
87	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  courseEntry.setGroupId(Integer.parseInt(val)/  1);  [CE]  cannot  find  symbol  [FE]            NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  courseEntry.setGroupId(Integer.parseInt(val)/  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    1);    courseEntry.setGroupId(Integer.parseInt(val)/  1);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
88	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  currEntry.setGroupId(Integer.parseInt(val)/  2);  [CE]  cannot  find  symbol  [FE]              NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  currEntry.setGroupId(Integer.parseInt(val)/  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    1);    currEntry.setGroupId(Integer.parseInt(val)/  2);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
89	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  10000);  [CE]  cannot  find  symbol  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  10000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  10000);	  currEntry.setGidId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
90	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  100);  [CE]  cannot  find  symbol  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  100);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  100);	  currEntry.setGidId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
91	[BUG]  [BUGGY]  courseEntry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  cannot  find  symbol  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  courseEntry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	courseEntry.setGroupId(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    courseEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
92	[BUG]  [BUGGY]  entry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  cannot  find  symbol  [FE]                  NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  entry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	entry.setGroupId(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    courseEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
93	[BUG]  [BUGGY]  CourseEntry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  cannot  find  symbol  [FE]                    NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CourseEntry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CourseEntry.setGroupId(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    courseEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
94	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  2.0);  [CE]  cannot  find  symbol  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  2.0);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  2.0);	  currEntry.setGroupId(Integer.parseInt(val)/    1000);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
95	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1000);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    CurrEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
96	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  1,  0);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  1,  0);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)+  1,  0);	  currEntry.setGidId(Integer.parseInt(val),    0);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
97	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  0,  0);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  0,  0);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val),  0,  0);	  currEntry.setGidId(Integer.parseInt(val),    0);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  2);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)/  2);	  currEntry.setGid(Integer.parseInt(val)+    2);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
99	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  16);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  16);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/  16);	  currEntry.setGroupId(Integer.parseInt(val)*    16);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
100	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  1,  0);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  1,  0);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  1,  0);	  currEntry.setGid(Integer.parseInt(val),    0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
101	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  2);  [CE]  illegal  start  of  expression  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  2);	  currEntry.setGidId(Integer.parseInt(val)*    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
102	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  4);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  4);	  currEntry.setGidId(Integer.parseInt(val)*    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
103	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  2);  [CE]  illegal  start  of  expression  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)+  2);	  currEntry.setGidId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
104	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  3);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  3);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)+  3);	  currEntry.setGidId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
105	[BUG]  [BUGGY]  currEntry.setGroupId(gid);  [CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated  [FE]                AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(gid);	          currEntry.setGroupId(val);    	non-compiled	[CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated	17	None	replace
106	[BUG]  [BUGGY]  currEntry.setGidName(val);  [CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated  [FE]          AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidName(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidName(val);	          currEntry.setGroupName(val);    	non-compiled	[CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated	14	None	replace
107	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)-2);  [CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)-2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)-2);	  currEntry.setGidId(Integer.parseInt(val)-1);    	non-compiled	[CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated	50	None	replace
108	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGroupId(Integer.parseInt(val)/  8);  [CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGroupId(Integer.parseInt(val)/  8);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    currEntry.setGroupId(Integer.parseInt(val)/  8);	  	non-compiled	[CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated	9	None	add
109	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGid(Integer.parseInt(val)/  4);  [CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated  [FE]      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setGid(Integer.parseInt(val)/  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    currEntry.setGid(Integer.parseInt(val)/  4);	  	non-compiled	[CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated	9	None	add
110	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGid(Integer.parseInt(val)*  1000);  [CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGid(Integer.parseInt(val)*  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  1000);  currEntry.setGid(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGid(Integer.parseInt(val)+    1);    	non-compiled	[CE]  ArchiveEntry  is  abstract;  cannot  be  instantiated	47	None	replace
111	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  16);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  16);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  16);	  currEntry.setGroupId(Integer.parseInt(val)*    16);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
112	[BUG]  [BUGGY]  currEntry.setGid(Gid.parseGid(val));  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Gid.parseGid(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Gid.parseGid(val));	          currEntry.setGid(val);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
113	[BUG]  [BUGGY]  currEntry.setGid(gid,  val);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(gid,  val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(gid,  val);	          currEntry.setGid(val);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
114	[BUG]  [BUGGY]  currEntry.setGid(Value.parseGid(val));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Value.parseGid(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Value.parseGid(val));	          currEntry.setGid(val);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
115	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  10);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  10);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  10);	  currEntry.setGidId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
116	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  500);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  500);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  500);	  currEntry.setGidId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
117	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  10);  [CE]  illegal  start  of  expression  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  10);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)/  10);	  currEntry.setGidId(Integer.parseInt(val)/    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
118	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  4);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)/  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)/  4);	  currEntry.setGidId(Integer.parseInt(val)/    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
119	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  4);  [CE]  illegal  start  of  expression  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)+  4);	  currEntry.setGidId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
120	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  16);  [CE]  cannot  find  symbol  file  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)+  16);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)+  16);	  currEntry.setGidId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  cannot  find  symbol  file	1	None	replace
121	[BUG]  [BUGGY]  currEntry.setGID(gid);  [CE]  cannot  find  symbol  file  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGID(gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGID(gid);	          currEntry.setGid(gid);    	non-compiled	[CE]  cannot  find  symbol  file	37	None	replace
122	[BUG]  [BUGGY]  currEntry.setGid(gid  -  1);  [CE]  cannot  find  symbol  file  [FE]          AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(gid  -  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(gid  -  1);	          currEntry.setGid(gid);    	non-compiled	[CE]  cannot  find  symbol  file	37	None	replace
123	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  currEntry.setGid(Integer.parseInt(val)/  1);  [CE]  cannot  find  symbol  file  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  currEntry.setGid(Integer.parseInt(val)/  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    1);    currEntry.setGid(Integer.parseInt(val)/  1);	  	non-compiled	[CE]  cannot  find  symbol  file	2	None	add
124	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  (currEntry.setGroupId(Integer.parseInt(val)/  1);  [CE]  ')'  expected  [FE]      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  1);  (currEntry.setGroupId(Integer.parseInt(val)/  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    1);    (currEntry.setGroupId(Integer.parseInt(val)/  1);	  	non-compiled	[CE]  ')'  expected	2	None	add
125	[BUG]  [BUGGY]  currEntry.setGroupId(Gid.parseGid(val));  [CE]  cannot  find  symbol  file  [FE]                AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Gid.parseGid(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Gid.parseGid(val));	          currEntry.setGroupId(val);    	non-compiled	[CE]  cannot  find  symbol  file	17	None	replace
126	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  Long.parseLong(val));  [CE]  cannot  find  symbol  file  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  Long.parseLong(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  Long.parseLong(val));	  currEntry.setGid(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  cannot  find  symbol  file	31	None	replace
127	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val),  Long.parseLong(val)+  1);  [CE]  cannot  find  symbol  file  [FE]                  NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val),  Long.parseLong(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val),  Long.parseLong(val)+  1);	  currEntry.setGid(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  cannot  find  symbol  file	31	None	replace
128	[BUG]  [BUGGY]  currEntry.setGid(Long.parseInt(val),  Long.parseLong(val));  [CE]  cannot  find  symbol  file  [FE]                    NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Long.parseInt(val),  Long.parseLong(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Long.parseInt(val),  Long.parseLong(val));	  currEntry.setGid(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  cannot  find  symbol  file	31	None	replace
129	[BUG]  [BUGGY]  CurrEntry.setGidId(gid);  [CE]  cannot  find  symbol  file  [FE]                  AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGidId(gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGidId(gid);	          CurrEntry.setGroupName(val);    	non-compiled	[CE]  cannot  find  symbol  file	18	None	replace
130	[BUG]  [BUGGY]  CurrEntry.setGroupId(gid);  [CE]  cannot  find  symbol  file  [FE]                    AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGroupId(gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGroupId(gid);	          CurrEntry.setGroupName(val);    	non-compiled	[CE]  cannot  find  symbol  file	18	None	replace
131	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  4);  [CE]  cannot  find  symbol  file  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  4);	  currEntry.setGid(Integer.parseInt(val)+    1);    	non-compiled	[CE]  cannot  find  symbol  file	4	None	replace
132	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  0);  [CE]  class,  interface,  or  enum  expected  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  0);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  0);	  currEntry.setGid(Integer.parseInt(val)+    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
133	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  40);  [CE]  class,  interface,  or  enum  expected  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  40);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  40);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    40);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
134	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  20);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  20);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  20);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    40);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
135	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  10);  [CE]  illegal  start  of  expression  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  10);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)*  10);	  currEntry.setGid(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
136	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  4);  [CE]  illegal  start  of  expression  [FE]          NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)*  4);	  currEntry.setGid(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
137	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  500);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  500);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)*  500);	  currEntry.setGid(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
138	[BUG]  [BUGGY]  currEntry.setGidId(Long.parseInt(val),  Long.parseLong(val));  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Long.parseInt(val),  Long.parseLong(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Long.parseInt(val),  Long.parseLong(val));	  currEntry.setGidId(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
139	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  Long.parseLong(val)+  1);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  Long.parseLong(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val),  Long.parseLong(val)+  1);	  currEntry.setGidId(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
140	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1));  [CE]  illegal  start  of  expression  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  1));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+  1));	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1));    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
141	[BUG]  [BUGGY]  CurrEntry.setGidId(Value.parseGid(val));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGidId(Value.parseGid(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGidId(Value.parseGid(val));	          CurrEntry.setGid(val);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
142	[BUG]  [BUGGY]  CurrEntry.setGid(gid,  val);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGid(gid,  val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGid(gid,  val);	          CurrEntry.setGid(val);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
143	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  16);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  16);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)*  16);	  currEntry.setGid(Integer.parseInt(val),    16);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
144	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  16);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  16);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)/  16);	  currEntry.setGid(Integer.parseInt(val),    16);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
145	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)-  16);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)-  16);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)-  16);	  currEntry.setGid(Integer.parseInt(val),    16);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
146	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  2);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)*  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)*  2);	  currEntry.setGid(Integer.parseInt(val)+    2);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
147	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val),  32);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val),  32);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val),  32);	  currEntry.setGid(Integer.parseInt(val),    12);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
148	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  0);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  0);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  0);	  currEntry.setGroupId(Integer.parseInt(val)*    4);    currEntry.setGroupId(Integer.parseInt(val)*    4));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
149	[BUG]  [BUGGY]  betroffene  currEntry.setGroupId(Integer.parseInt(val)+  1);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  betroffene  currEntry.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	betroffene  currEntry.setGroupId(Integer.parseInt(val)+  1);	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    }    else    if    (       "gid   ".equals(key))    {    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
150	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  100000);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)*  100000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)*  100000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    currEntry.setGroupId(Integer.parseInt(val)*    10000);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
151	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)-  1,  gid);  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)-  1,  gid);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)-  1,  gid);	  currEntry.setGidId(Integer.parseInt(val),    gid);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
152	[BUG]  [BUGGY]  currEntry.setGidId(Gid.parseGid(val));  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Gid.parseGid(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Gid.parseGid(val));	  currEntry.setGidId(val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
153	[BUG]  [BUGGY]  currEntry.setGidId(gid,  val);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(gid,  val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(gid,  val);	  currEntry.setGidId(val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
154	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  3);  [CE]  illegal  start  of  expression  [FE]        NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)*  3);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)*  3);	  currEntry.setGidId(Integer.parseInt(val)*    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
155	[BUG]  [BUGGY]  String  val  =  currEntry.getGidValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGidValue();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGidValue();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
156	[BUG]  [BUGGY]  String  val  =  currEntry.getGid()  + ": "  +  currEntry.getGroupName();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGid()  + ": "  +  currEntry.getGroupName();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGid()  + ": "  +  currEntry.getGroupName();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
157	[BUG]  [BUGGY]  String  val  =  currEntry.getGid()  + ": "  +  currEntry.getGid();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGid()  + ": "  +  currEntry.getGid();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGid()  + ": "  +  currEntry.getGid();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
158	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  16);  [CE]  <identifier>  expected  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val),  16);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val),  16);	  currEntry.setGidId(Integer.parseInt(val),    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
159	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+  1);  [CE]  <identifier>  expected  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    2);    currEntry.setGroupId(Integer.parseInt(val)+  1);	  	non-compiled	[CE]  <identifier>  expected	5	None	add
160	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+1  2);  [CE]  <identifier>  expected  [FE]      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGroupId(Integer.parseInt(val)+1  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    2);    currEntry.setGroupId(Integer.parseInt(val)+1  2);	  	non-compiled	[CE]  <identifier>  expected	5	None	add
161	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)-  1);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)-  1);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)-  1);	  currEntry.setGid(Integer.parseInt(val),    0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
162	[BUG]  [BUGGY]  currEntry.setgid(val);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setgid(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setgid(val);	          currEntry.setGid(gid);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
163	[BUG]  [BUGGY]  currEntry.setGuid(val);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGuid(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGuid(val);	          currEntry.setGid(gid);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
164	[BUG]  [BUGGY]  cursorEntry.setGroupId(Integer.parseInt(val)*  1000);  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  cursorEntry.setGroupId(Integer.parseInt(val)*  1000);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	cursorEntry.setGroupId(Integer.parseInt(val)*  1000);	  currEntry.setGroupId(Integer.parseInt(val)*    1000);    courseEntry.setGroupId(Integer.parseInt(val)*    1000);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
165	[BUG]  [BUGGY]  currEntry.setGidId(Integer.parseInt(val)-  1,  Long.parseLong(val));  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Integer.parseInt(val)-  1,  Long.parseLong(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Integer.parseInt(val)-  1,  Long.parseLong(val));	  currEntry.setGidId(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
166	[BUG]  [BUGGY]  String  val  =  key.getGid();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  key.getGid();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  key.getGid();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  not  a  statement	15	None	replace
167	[BUG]  [BUGGY]  String  val  =  currEntry.getGroupId();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGroupId();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGroupId();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  not  a  statement	15	None	replace
168	[BUG]  [BUGGY]  String  val  =  currEntry.getGroupName();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGroupName();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGroupName();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  not  a  statement	15	None	replace
169	[BUG]  [BUGGY]  String  val  =  currEntry.getGidName();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  String  val  =  currEntry.getGidName();  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	String  val  =  currEntry.getGidName();	          String    val    =    currEntry.getGid();    	non-compiled	[CE]  not  a  statement	15	None	replace
170	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  curtelEntry.setGroupId(Integer.parseInt(val)/  4);  [CE]  illegal  start  of  expression  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  curtelEntry.setGroupId(Integer.parseInt(val)/  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    curtelEntry.setGroupId(Integer.parseInt(val)/  4);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
171	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setgroupId(Integer.parseInt(val)/  4);  [CE]  illegal  start  of  expression  [FE]      NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)/  4);  currEntry.setgroupId(Integer.parseInt(val)/  4);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)/    4);    currEntry.setgroupId(Integer.parseInt(val)/  4);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
172	[BUG]  [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGid(Integer.parseInt(val)+  2);  [CE]  illegal  start  of  expression  [FE]    NumberFormatException    [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGroupId(Integer.parseInt(val)+  2);  currEntry.setGid(Integer.parseInt(val)+  2);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGroupId(Integer.parseInt(val)+    2);    currEntry.setGid(Integer.parseInt(val)+  2);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
173	[BUG]  [BUGGY]  CurrEntry.setGidIdentity(val);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGidIdentity(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGidIdentity(val);	          CurrEntry.setGroupName(val);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
174	[BUG]  [BUGGY]  CurrEntry.setGidID(val);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGidID(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGidID(val);	          CurrEntry.setGroupName(val);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
175	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  10);  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)/  10);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)/  10);	  currEntry.setGid(Integer.parseInt(val),    12);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
176	[BUG]  [BUGGY]  }  else  if( "gid ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  [CE]  illegal  start  of  expression  [FE]            NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  }  else  if( "gid ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	}  else  if( "gid ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    }    else    if    (       "gid   ".equals(key))    {    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
177	[BUG]  [BUGGY]  }  else  if( "gid= ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  [CE]  illegal  start  of  expression  [FE]              NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  }  else  if( "gid= ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	}  else  if( "gid= ".equals(key))  {  currEntry.setGroupId(Integer.parseInt(val)+  1);  }	  currEntry.setGroupId(Integer.parseInt(val)+    1);    currEntry.setGroupId(Integer.parseInt(val)+    1);    }    else    if    (       "gid   ".equals(key))    {    currEntry.setGroupId(Integer.parseInt(val)+    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
178	[BUG]  [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  1,  Long.parseLong(val));  [CE]  illegal  start  of  expression  [FE]                NumberFormatException      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Integer.parseInt(val)+  1,  Long.parseLong(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Integer.parseInt(val)+  1,  Long.parseLong(val));	  currEntry.setGid(Integer.parseInt(val),    Long.parseLong(val));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
179	[BUG]  [BUGGY]  currEntry.setGid(Value.parse(val));  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGid(Value.parse(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGid(Value.parse(val));	          currEntry.setGid(val);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
180	[BUG]  [BUGGY]  currEntry.setGidId(Value.parseBoolean(val));  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  currEntry.setGidId(Value.parseBoolean(val));  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	currEntry.setGidId(Value.parseBoolean(val));	  currEntry.setGidId(val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
181	[BUG]  [BUGGY]  CurrEntry.setGidbit(val);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGidbit(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGidbit(val);	          CurrEntry.setGid(val);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
182	[BUG]  [BUGGY]  CurrEntry.setGidInternal(val);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (Entry<String,  String>  ent  :  headers.entrySet()){  String  key  =  ent.getKey();  String  val  =  ent.getValue();  if  (     "path     ".equals(key)){  currEntry.setName(val);  }  else  if  (     "linkpath     ".equals(key)){  currEntry.setLinkName(val);  }  else  if  (     "gid     ".equals(key)){      [BUGGY]  CurrEntry.setGidInternal(val);  [BUGGY]      }  else  if  (     "gname     ".equals(key)){  currEntry.setGroupName(val);  }  else  if  (     "uid     ".equals(key)){  currEntry.setUserId(Integer.parseInt(val));  }  else  if  (     "uname     ".equals(key)){  currEntry.setUserName(val);  }  else  if  (     "size     ".equals(key)){  currEntry.setSize(Long.parseLong(val));  }  else  if  (     "mtime     ".equals(key)){  currEntry.setModTime((long)  (Double.parseDouble(val)  *  1000));  [CLASS]  TarArchiveInputStream  [METHOD]  applyPaxHeadersToCurrentEntry  [RETURN_TYPE]  void  String>  headers  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  Entry  ent  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	1.0	501	501	1	replace	CurrEntry.setGidInternal(val);	          CurrEntry.setGid(val);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
