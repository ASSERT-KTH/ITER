bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Char[]  c  =  input.getChars();  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Char[]  c  =  input.getChars();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Char[]  c  =  input.getChars();	      char[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  Character[]  c  =  input.getChars();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Character[]  c  =  input.getChars();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Character[]  c  =  input.getChars();	      char[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  String  c  =  input.getChars();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  String  c  =  input.getChars();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	String  c  =  input.getChars();	      char[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  if(input!=  null)  {  out  =  input.getCharSequence();  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out  =  input.getCharSequence();  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out  =  input.getCharSequence();  return;  }	      if(input    ==    null)    {    out    =    input.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
5	[BUG]  [BUGGY]  if(out  ==  null)  {  out  =  input.getCharSequence();  return;  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null)  {  out  =  input.getCharSequence();  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null)  {  out  =  input.getCharSequence();  return;  }	      if(input    ==    null)    {    out    =    input.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
6	[BUG]  [BUGGY]  out  =  input.getCharSequence();  return;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out  =  input.getCharSequence();  return;  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out  =  input.getCharSequence();  return;	      if(input    ==    null)    {    out    =    input.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
7	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  out);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  char[]  c  =  input.getChars(pos,  out);  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos,  out);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  if(input  ==  null  ||  out  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  if(input  ==  null  ||  out  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out    ==    null)    {    if(input  ==  null  ||  out  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
9	[BUG]  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  if(input  ==  null  ||  out!=  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  if(input  ==  null  ||  out!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out    ==    null)    {    if(input  ==  null  ||  out!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
10	[BUG]  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  if(input!=  null  ||  out  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  if(input!=  null  ||  out  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out    ==    null)    {    if(input!=  null  ||  out  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
11	[BUG]  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  If(input  ==  null  ||  out  ==  null)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  If(input  ==  null  ||  out  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out    ==    null)    {    If(input  ==  null  ||  out  ==  null)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
12	[BUG]  [BUGGY]  out  =  Character.codePointCount(input,  0,  input.length());  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out  =  Character.codePointCount(input,  0,  input.length());	      if(input    ==    null)    {    out    =    Character.codePointCount(input,    0,    input.length());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
13	[BUG]  [BUGGY]  Output  output  =  Character.codePointCount(input,  0,  input.length());  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Output  output  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Output  output  =  Character.codePointCount(input,  0,  input.length());	      if(input    ==    null)    {    out    =    Character.codePointCount(input,    0,    input.length());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
14	[BUG]  [BUGGY]  if(input!=  null)  {  out  =  Character.codePointCount(input,  0,  input.length());  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out  =  Character.codePointCount(input,  0,  input.length());  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out  =  Character.codePointCount(input,  0,  input.length());  }	      if(input    ==    null)    {    out    =    Character.codePointCount(input,    0,    input.length());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	23	6	add
16	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	23	6	add
17	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	23	19	add
18	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	23	19	add
19	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  If(input  ==  null)  {  out.write('n');  return;  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  If(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    If(input  ==  null)  {  out.write('n');  return;  }	  	non-compiled	[CE]  ';'  expected	23	None	add
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	23	6	add
21	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	23	6	add
22	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input.length()    ==    0)    {    if(out  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
23	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  ==  null  ||  input.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input.length()    ==    0)    {    if(out  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
24	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out!=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out!=  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input.length()    ==    0)    {    if(out!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
25	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  If(out  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  If(out  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input.length()    ==    0)    {    If(out  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
26	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  ==  null  ||  output.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  ==  null  ||  output.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input.length()    ==    0)    {    if(out  ==  null  ||  output.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
28	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(this);	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
29	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().interrupt();	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
30	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(input);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Thread.currentThread().setContextClassLoader(input);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(input);	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
31	[BUG]  [BUGGY]  out.write(input);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write(input);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input);	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  out.write(Character.codePointCount(input,  pos));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write(Character.codePointCount(input,  pos));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input,  pos));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write(Integer.toString(input.length()));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.length()));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  out.write(Integer.toString(pos));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write(Integer.toString(pos));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(pos));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  if(input!=  null)  {  out  =  input.getCharSequence();  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out  =  input.getCharSequence();  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out  =  input.getCharSequence();  }	      if(input    ==    null)    {    out    =    input.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  if(input  ==  null)  {  out  =  output.getCharSequence();  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out  =  output.getCharSequence();  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out  =  output.getCharSequence();  }	      if(input    ==    null)    {    out    =    input.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  if(out  ==  null)  {  out  =  input.getCharSequence();  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null)  {  out  =  input.getCharSequence();  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null)  {  out  =  input.getCharSequence();  }	      if(input    ==    null)    {    out    =    input.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  	compilable	  [FE]  IllegalArgumentException  	20	5	add
39	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  	compilable	  [FE]  IllegalArgumentException  	20	5	add
40	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  IllegalArgumentException  	20	5	add
41	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  IllegalArgumentException  	20	5	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  out!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(input  ==  null  ||  out!=  null)  {	  if(input    ==    null    ||    out    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	12	19	replace
43	[BUG]  [BUGGY]  if(input  ==  null  ||  out!=  null)  {  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  out!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  out!=  null)  {	  if(input    ==    null    ||    out    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	12	19	replace
44	[BUG]  [BUGGY]  if(input  ==  null  ||  output  ==  null)  {  [CE]  cannot  find  symbol  output  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  output  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  output  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  output	12	None	replace
45	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(input);  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input);  return;  }	      if(input    ==    null)    {    out.write(c);    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos));  return;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos));  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos));  return;  }	      if(input    ==    null)    {    out.write(c);    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input.charAt(0));  return;  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(input.charAt(0));  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input.charAt(0));  return;  }	      if(input    ==    null)    {    out.write(c);    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toHexString(pos));  return;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(Integer.toHexString(pos));  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toHexString(pos));  return;  }	      if(input    ==    null)    {    out.write(c);    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  int  pt  =  input.length()  +  1;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  int  pt  =  input.length()  +  1;  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pt  =  input.length()  +  1;	      int    pt    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
50	[BUG]  [BUGGY]  int  pt  =  input.length()  -  1;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  int  pt  =  input.length()  -  1;  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pt  =  input.length()  -  1;	      int    pt    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  char  pt  =  input.length();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  char  pt  =  input.length();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char  pt  =  input.length();	      int    pt    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  if(input  ==  null  ||  out.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  out.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
53	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(input!=  null  ||  input.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	16	19	replace
54	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null  ||  input.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	16	19	replace
55	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
56	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
57	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
58	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input.length()  <  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null  ||  input.length()  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
59	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
61	[BUG]  [BUGGY]  out.write('n');  return;  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write('n');  return;  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write('n');  return;	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
62	[BUG]  [BUGGY]  out.write('n');  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write('n');  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write('n');	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
63	[BUG]  [BUGGY]  if(input!=  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write('n');  return;  }	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if  (input  ==  null  ||  input.length()!=  0)  {	  if    (input    ==    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	4	19	replace
65	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if  (input  ==  null  ||  input.length()!=  0)  {	  if    (input    ==    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	4	19	replace
66	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	17	5	add
67	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	17	5	add
68	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	17	5	add
69	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	17	5	add
70	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()  ==  0)  {  if  (input  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null  ||  input.length()  ==  0)  {  if  (input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null    ||    input.length()    ==    0)    {    if  (input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
71	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()  ==  0)  {  if  (input!=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null  ||  input.length()  ==  0)  {  if  (input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null    ||    input.length()    ==    0)    {    if  (input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
72	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()  ==  0)  {  if  (input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null  ||  input.length()  ==  0)  {  if  (input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null    ||    input.length()    ==    0)    {    if  (input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
73	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()  ==  0)  {  If  (input  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null  ||  input.length()  ==  0)  {  If  (input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null    ||    input.length()    ==    0)    {    If  (input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
74	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(input);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input);  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos));  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos));  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos));  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input.charAt(0));  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(input.charAt(0));  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input.charAt(0));  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input.length());  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(input.length());  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input.length());  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out.write(input);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(input);  }	      if(input!=    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos));  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos));  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(Integer.toString(pos));  }	      if(input!=    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input.charAt(0));  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out.write(input.charAt(0));  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(input.charAt(0));  }	      if(input!=    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null  ||  input  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
82	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  out  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  out  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null  ||  out  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
83	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  output  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  output  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null  ||  output  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
84	[BUG]  [BUGGY]  if(input  ==  null)  {  output.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  output.write(input);  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  output.write(input);  return;  }	      if(input    ==    null)    {    out.write(c);    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
85	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos),  out);  return;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos),  out);  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos),  out);  return;  }	      if(input    ==    null)    {    out.write(c);    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
86	[BUG]  [BUGGY]  if(input  ==  null)  {  out  =  output.getCharSequence();  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out  =  output.getCharSequence();  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out  =  output.getCharSequence();  return;  }	      if(input    ==    null)    {    out    =    input.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(out  ==  null  ||  input  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	12	5	replace
88	[BUG]  [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null  ||  input  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	12	5	replace
89	[BUG]  [BUGGY]  if(input  ==  null  ||  output.length()  ==  0)  {  [CE]  cannot  find  symbol  output  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  output.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  output.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  output	16	None	replace
90	[BUG]  [BUGGY]  out.write(input.charAt(0));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write(input.charAt(0));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.charAt(0));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write(Integer.toString(input.charAt(0)));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.charAt(0)));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  int  pos  =  input.length();  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  int  pos  =  input.length();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pos  =  input.length();	      int    pt    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
93	[BUG]  [BUGGY]  int  pt  =  out.length();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  int  pt  =  out.length();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pt  =  out.length();	      int    pt    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
94	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toHexString(input.charAt(0)));  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out.write(Integer.toHexString(input.charAt(0)));  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(Integer.toHexString(input.charAt(0)));  }	      if(input!=    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(input.charAt(0)));  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(input.charAt(0)));  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(Integer.toString(input.charAt(0)));  }	      if(input!=    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos),  input);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos),  input);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos),  input);  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  ==  null  ||  out.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  ==  null  ||  out.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input.length()    ==    0)    {    if(out  ==  null  ||  out.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
98	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().getName();  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Thread.currentThread().getContextClass().getName();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClass().getName();	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
99	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(input);  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Thread.currentThread().setContextClass(input);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClass(input);	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
100	[BUG]  [BUGGY]  if(input  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  return;  }	      if(input    ==    null)    {    out    =    input.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
101	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().reset();	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
102	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
103	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input.length);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input!=  null)  {  out.write(input.length);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(input.length);  }	      if(input!=    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(input  ==  null  ||  input  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	12	8	replace
105	[BUG]  [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	12	8	replace
106	[BUG]  [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if  (input  ==  null)  {  if  (input  ==  null  ||  input!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null)    {    if  (input  ==  null  ||  input!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
107	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input.length);  return;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(input.length);  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input.length);  return;  }	      if(input    ==    null)    {    out.write(c);    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
108	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  char[]  c  =  input.getChars(pos);  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos);	      char[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
109	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input.length);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out.write(input.length);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input.length);  }	      if(input    ==    null)    {    out.write(c);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
110	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  {  null  ||  input.length()  ==  0)  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  if(out  {  null  ||  input.length()  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input.length()    ==    0)    {    if(out  {  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  ')'  expected	15	None	add
111	[BUG]  [BUGGY]  out.write(Character.codePointCount(input));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  out.write(Character.codePointCount(input));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
112	[BUG]  [BUGGY]  if(input  ==  null)  {  out  =  Character.codePointCount(input,  0,  input.length()  -  1);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  if(input  ==  null)  {  out  =  Character.codePointCount(input,  0,  input.length()  -  1);  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out  =  Character.codePointCount(input,  0,  input.length()  -  1);  }	      if(input    ==    null)    {    out    =    Character.codePointCount(input,    0,    input.length());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
113	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange();  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange();  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange();	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
114	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( " "));  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( " "));  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(new  IOException( " "));	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
115	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write( "n');  return;  }  [CE]  unclosed  string  literal  [FE]    NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write( "n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write( "n');  return;  }	  	non-compiled	[CE]  unclosed  string  literal	23	None	add
116	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write( ".n');  return;  }  [CE]  unclosed  string  literal  [FE]      NullPointerException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write( ".n');  return;  }  [BUGGY]    if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write( ".n');  return;  }	  	non-compiled	[CE]  unclosed  string  literal	23	None	add
