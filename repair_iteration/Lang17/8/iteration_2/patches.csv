bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(Character.codePointCount(input,  pos  +  1));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Character.codePointCount(input,  pos  +  1));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input,  pos  +  1));	  out.write(Character.codePointCount(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
2	[BUG]  [BUGGY]  out.write(Character.codePointCount(input,  0,  input.length()));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Character.codePointCount(input,  0,  input.length()));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input,  0,  input.length()));	  out.write(Character.codePointCount(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
3	[BUG]  [BUGGY]  out.write(Character.codePointCount(input,  pos),  c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Character.codePointCount(input,  pos),  c);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input,  pos),  c);	  out.write(Character.codePointCount(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
4	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(input  ==  null  ||  input!=  null)  {	  if(input    ==    null    ||    input    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	105	19	replace
5	[BUG]  [BUGGY]  if(input  ==  null  ||  input!=  null)  {  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input!=  null)  {	  if(input    ==    null    ||    input    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	105	19	replace
6	[BUG]  [BUGGY]  Character[]  c  =  input.getChars(pos);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Character[]  c  =  input.getChars(pos);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Character[]  c  =  input.getChars(pos);	  Character[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(input.charAt(0)));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(input.charAt(0)));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(input.charAt(0)));  }	  if(input!=    null)    {    out.write(Integer.toString(input.charAt(0)));    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
8	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(1)));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.charAt(1)));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.charAt(1)));	  if(input!=    null)    {    out.write(Integer.toString(input.charAt(0)));    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
9	[BUG]  [BUGGY]  out  =  input.getCharSequence();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out  =  input.getCharSequence();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out  =  input.getCharSequence();	  if(input!=    null)    {    out    =    input.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  out  =  output.getCharSequence();  return;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out  =  output.getCharSequence();  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out  =  output.getCharSequence();  return;	  if(input    ==    null)    {    out    =    output.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
11	[BUG]  [BUGGY]  if(out  ==  null)  {  out  =  output.getCharSequence();  return;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null)  {  out  =  output.getCharSequence();  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null)  {  out  =  output.getCharSequence();  return;  }	  if(input    ==    null)    {    out    =    output.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
12	[BUG]  [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out  ==  null  ||  input  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out  ==  null  ||  input  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input    ==    null)    {    if(out  ==  null  ||  input  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
13	[BUG]  [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out  ==  null  ||  input!=  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out  ==  null  ||  input!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input    ==    null)    {    if(out  ==  null  ||  input!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
14	[BUG]  [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out!=  null  ||  input  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out!=  null  ||  input  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input    ==    null)    {    if(out!=  null  ||  input  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
15	[BUG]  [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  If(out  ==  null  ||  input  ==  null)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  If(out  ==  null  ||  input  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input    ==    null)    {    If(out  ==  null  ||  input  ==  null)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
16	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this,  input);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this,  input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(this,  input);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
17	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this,  out);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this,  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(this,  out);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
18	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this,  output);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this,  output);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(this,  output);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
19	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
20	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
21	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
22	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  >=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  >=  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input  >=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
23	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  If(input!=  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  If(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    If(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
24	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(input  ==  null  ||  input.length()  >=  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  IllegalArgumentException  	54	19	replace
25	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  IllegalArgumentException  	54	19	replace
26	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  out,  0);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char[]  c  =  input.getChars(pos,  out,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos,  out,  0);	  char[]    c    =    input.getChars(pos,    out);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  out,  pt);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char[]  c  =  input.getChars(pos,  out,  pt);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos,  out,  pt);	  char[]    c    =    input.getChars(pos,    out);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  out,  len);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char[]  c  =  input.getChars(pos,  out,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos,  out,  len);	  char[]    c    =    input.getChars(pos,    out);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  out,  false);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char[]  c  =  input.getChars(pos,  out,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos,  out,  false);	  char[]    c    =    input.getChars(pos,    out);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  If(input  ==  null  ||  out  ==  null)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  If(input  ==  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	If(input  ==  null  ||  out  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    If(input    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
31	[BUG]  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  If(input  ==  null  ||  out!=  null)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  If(input  ==  null  ||  out!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  out  ==  null)  {  If(input  ==  null  ||  out!=  null)  {	  if(input    ==    null    ||    out    ==    null)    {    If(input    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
32	[BUG]  [BUGGY]  if(input  ==  null)  {  If(input  ==  null  ||  out  ==  null)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  If(input  ==  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  If(input  ==  null  ||  out  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    If(input    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
33	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(input!=  null  ||  out  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    if(input    ==    null    ||    out!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	9	19	replace
34	[BUG]  [BUGGY]  if(input!=  null  ||  out  ==  null)  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null  ||  out  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    if(input    ==    null    ||    out!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	9	19	replace
35	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)),  input.length());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.charAt(0)),  input.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.charAt(0)),  input.length());	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
36	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)),  pos);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.charAt(0)),  pos);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.charAt(0)),  pos);	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
37	[BUG]  [BUGGY]  out.write(Integer.toString(input.charAt(0)),  0);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.charAt(0)),  0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.charAt(0)),  0);	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
38	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
39	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
40	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
41	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
42	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
43	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
44	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  NullPointerException  	17	19	add
45	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  NullPointerException  	17	19	add
46	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
47	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
48	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(out);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
49	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(input,  out);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(input,  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(input,  out);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
50	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(in);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(in);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(in);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
51	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
52	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
53	[BUG]  [BUGGY]  if(input  ==  null)  {  if(out  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  if(out  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  if(out  ==  null  ||  input.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    if(out    {    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
54	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	40	5	add
55	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	40	5	add
56	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	40	None	add
57	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	40	None	add
58	[BUG]  [BUGGY]  Output  output  =  Character.codePointCount(input,  0,  input.length()  -  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Output  output  =  Character.codePointCount(input,  0,  input.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Output  output  =  Character.codePointCount(input,  0,  input.length()  -  1);	  Output    output    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
59	[BUG]  [BUGGY]  Output  output  =  Character.codePointCount(input,  0,  input.length()  +  1);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Output  output  =  Character.codePointCount(input,  0,  input.length()  +  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Output  output  =  Character.codePointCount(input,  0,  input.length()  +  1);	  Output    output    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  Output  output  =  Character.codePointCount(input,  0,  input.length()  -  2);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Output  output  =  Character.codePointCount(input,  0,  input.length()  -  2);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Output  output  =  Character.codePointCount(input,  0,  input.length()  -  2);	  Output    output    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
61	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(input);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange(input);	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
62	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  out));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  out));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(JSError.make(input,  out));	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
63	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input));  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(JSError.make(input));	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
64	[BUG]  [BUGGY]  If  (input  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  If  (input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	If  (input  ==  null  ||  input.length()  ==  0)  {	  if    (input    ==    null    ||    input.length()    ==    0)    {    If    (input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
65	[BUG]  [BUGGY]  if(input  ==  null)  {  If  (input  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  If  (input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  If  (input  ==  null  ||  input.length()  ==  0)  {	  if    (input    ==    null    ||    input.length()    ==    0)    {    If    (input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    }    	compilable	  [FE]  AssertionFailedError  	16	19	replace
67	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    }    	compilable	  [FE]  AssertionFailedError  	16	19	replace
68	[BUG]  [BUGGY]  out.write( "n');  [CE]  unclosed  string  literal  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write( "n');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write( "n');	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write(   "n');    return;    }    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
69	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( "n');  return;  }  [CE]  unclosed  string  literal  [FE]          NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write( "n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write( "n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write(   "n');    return;    }    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
70	[BUG]  [BUGGY]  if(input!=  null)  {  output.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  output.write(input);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  output.write(input);  return;  }	  if(input    ==    null)    {    output.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
71	[BUG]  [BUGGY]  if(out!=  null)  {  output.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  output.write(input);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out!=  null)  {  output.write(input);  return;  }	  if(input    ==    null)    {    output.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
72	[BUG]  [BUGGY]  if(out  ==  null)  {  output.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null)  {  output.write(input);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null)  {  output.write(input);  return;  }	  if(input    ==    null)    {    output.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
73	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  if  (input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  if  (input  ==  null  ||  input.length()!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null    ||    input.length()!=    0)    {    if  (input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
74	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  if  (input  ==  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  if  (input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null    ||    input.length()!=    0)    {    if  (input  ==  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
75	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  if  (input!=  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  if  (input!=  null  ||  input.length()!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null    ||    input.length()!=    0)    {    if  (input!=  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
76	[BUG]  [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  If  (input  ==  null  ||  input.length()!=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if  (input  ==  null  ||  input.length()!=  0)  {  If  (input  ==  null  ||  input.length()!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if    (input    ==    null    ||    input.length()!=    0)    {    If  (input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
77	[BUG]  [BUGGY]  out.write(Integer.toHexString(pos));  return;  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toHexString(pos));  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toHexString(pos));  return;	  if(input    ==    null)    {    out.write(Integer.toHexString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
78	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toHexString(pos));  return;  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(Integer.toHexString(pos));  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(Integer.toHexString(pos));  return;  }	  if(input    ==    null)    {    out.write(Integer.toHexString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
79	[BUG]  [BUGGY]  out.write(Integer.toHexString(pos));  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toHexString(pos));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toHexString(pos));	  if(input    ==    null)    {    out.write(Integer.toHexString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
80	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  -  1));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.length()  -  1));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.length()  -  1));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
81	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  +  1));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.length()  +  1));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.length()  +  1));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
82	[BUG]  [BUGGY]  out.write(Character.toString(input.length()));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Character.toString(input.length()));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.toString(input.length()));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
83	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(out);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClass(out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClass(out);	  Thread.currentThread().setContextClass(input);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
84	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(input,  out);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClass(input,  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClass(input,  out);	  Thread.currentThread().setContextClass(input);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
85	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(c);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClass(c);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClass(c);	  Thread.currentThread().setContextClass(input);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
86	[BUG]  [BUGGY]  Integer  pt  =  input.length();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Integer  pt  =  input.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Integer  pt  =  input.length();	  int    pt    =    input.length()    -    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
87	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().getSimpleName();  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClass().getSimpleName();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClass().getSimpleName();	  Thread.currentThread().getContextClass().getName();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
88	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().setMillis(out);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClass().setMillis(out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClass().setMillis(out);	  Thread.currentThread().getContextClass().getName();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
89	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().getName(),  out);  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClass().getName(),  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClass().getName(),  out);	  Thread.currentThread().getContextClass().getName();    	non-compiled	[CE]  ';'  expected	98	None	replace
90	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. "));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. "));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. "));	  Thread.currentThread().getContextClassLoader().report(new    IOException(   "   "));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
91	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  cannot  be  null. "));  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  cannot  be  null. "));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  cannot  be  null. "));	  Thread.currentThread().getContextClassLoader().report(new    IOException(   "   "));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
92	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. "),  input);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. "),  input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. "),  input);	  Thread.currentThread().getContextClassLoader().report(new    IOException(   "   "));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
93	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	66	5	add
94	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	66	5	add
95	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	66	None	add
96	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	66	None	add
97	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	66	None	add
98	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	66	5	add
99	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	66	5	add
100	[BUG]  [BUGGY]  out.write(Integer.toString(input));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input));	  if(input    ==    null)    {    out.write(Integer.toString(pos));    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
101	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
102	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    	non-compiled	[CE]  <identifier>  expected	60	None	replace
103	[BUG]  [BUGGY]  out.write(Integer.toString(pos),  input);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(pos),  input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(pos),  input);	  if(input    ==    null)    {    out.write(Integer.toString(pos),    input);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
104	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos),  input);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos),  input);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(Integer.toString(pos),  input);  }	  if(input    ==    null)    {    out.write(Integer.toString(pos),    input);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
105	[BUG]  [BUGGY]  out.write(Integer.toString(input),  input);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input),  input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input),  input);	  if(input    ==    null)    {    out.write(Integer.toString(pos),    input);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
106	[BUG]  [BUGGY]  out.write(Integer.toString(pos),  out);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(pos),  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(pos),  out);	  if(input    ==    null)    {    out.write(Integer.toString(pos),    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
107	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos),  out);  return;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos),  out);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(Integer.toString(pos),  out);  return;  }	  if(input    ==    null)    {    out.write(Integer.toString(pos),    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
108	[BUG]  [BUGGY]  out.write(Integer.toString(pos),  out);  return;  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(pos),  out);  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(pos),  out);  return;	  if(input    ==    null)    {    out.write(Integer.toString(pos),    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
109	[BUG]  [BUGGY]  out.write(Integer.toString(c));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(c));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(c));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
110	[BUG]  [BUGGY]  out.write(Integer.toString(pt));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(pt));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(pt));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
111	[BUG]  [BUGGY]  out.write(Integer.toString(input),  pos);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input),  pos);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input),  pos);	  out.write(Integer.toString(pos));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
112	[BUG]  [BUGGY]  out.write(input,  0,  input.length());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input,  0,  input.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input,  0,  input.length());	  out.write(input);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
113	[BUG]  [BUGGY]  out.write(input.length);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.length);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.length);	  if(input    ==    null)    {    out.write(input.length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
114	[BUG]  [BUGGY]  if(input  ==  null)  {  output.write(input.length);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  output.write(input.length);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  output.write(input.length);  }	  if(input    ==    null)    {    out.write(input.length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
115	[BUG]  [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  if(input  ==  null  ||  input  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  if(input  ==  null  ||  input  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    input    ==    null)    {    if(input  ==  null  ||  input  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
116	[BUG]  [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  if(input  ==  null  ||  input!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  if(input  ==  null  ||  input!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    input    ==    null)    {    if(input  ==  null  ||  input!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
117	[BUG]  [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  if(input!=  null  ||  input  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  if(input!=  null  ||  input  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    input    ==    null)    {    if(input!=  null  ||  input  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
118	[BUG]  [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  If(input  ==  null  ||  input  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  If(input  ==  null  ||  input  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    input    ==    null)    {    If(input  ==  null  ||  input  ==  null)  {	  	non-compiled	[CE]  ';'  expected	104	None	add
119	[BUG]  [BUGGY]  out.write(Integer.toString(pos));  return;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(pos));  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(pos));  return;	  if(input    ==    null)    {    out.write(Integer.toString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos));  return;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos));  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(Integer.toString(pos));  return;  }	  if(input    ==    null)    {    out.write(Integer.toString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
121	[BUG]  [BUGGY]  out.write(Integer.toString(input));  return;  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input));  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input));  return;	  if(input    ==    null)    {    out.write(Integer.toString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
122	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input.charAt(1));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(input.charAt(1));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input.charAt(1));  }	  if(input    ==    null)    {    out.write(input.charAt(0));    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
123	[BUG]  [BUGGY]  out.write(input.length());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.length());	  if(input    ==    null)    {    out.write(input.length());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
124	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input.length());  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(input.length());  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(input.length());  }	  if(input    ==    null)    {    out.write(input.length());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
125	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(input.length()  +  1);  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(input.length()  +  1);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(input.length()  +  1);  }	  if(input    ==    null)    {    out.write(input.length());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
126	[BUG]  [BUGGY]  out.write(input);  return;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input);  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input);  return;	  if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
127	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(input);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(input);  return;  }	  if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
128	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
129	[BUG]  [BUGGY]  Output  input  =  input.getCharSequence();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Output  input  =  input.getCharSequence();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Output  input  =  input.getCharSequence();	  if(out    ==    null)    {    out    =    input.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
130	[BUG]  [BUGGY]  Output  output  =  input.getCharSequence();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Output  output  =  input.getCharSequence();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Output  output  =  input.getCharSequence();	  if(out    ==    null)    {    out    =    input.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(input  ==  null  ||  input.length()  <  0)  {	  if    (input    ==    null)    {    if    (input    ==    null    ||    input.length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	58	8	replace
132	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  <  0)  {	  if    (input    ==    null)    {    if    (input    ==    null    ||    input.length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	58	8	replace
133	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  <  =  0)  {	  if    (input    ==    null)    {    if    (input    ==    null    ||    input.length()    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
134	[BUG]  [BUGGY]  if(input  ==  null  ||  out!=  null)  {  if(input  ==  null  ||  out!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  out!=  null)  {  if(input  ==  null  ||  out!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out!=    null)    {    if(input  ==  null  ||  out!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
135	[BUG]  [BUGGY]  if(input  ==  null  ||  out!=  null)  {  if(input  ==  null  ||  out  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  out!=  null)  {  if(input  ==  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out!=    null)    {    if(input  ==  null  ||  out  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
136	[BUG]  [BUGGY]  if(input  ==  null  ||  out!=  null)  {  if(input!=  null  ||  out!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  out!=  null)  {  if(input!=  null  ||  out!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out!=    null)    {    if(input!=  null  ||  out!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
137	[BUG]  [BUGGY]  if(input  ==  null  ||  out!=  null)  {  if(input  ==  null  ||  out  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  out!=  null)  {  if(input  ==  null  ||  out  >=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out!=    null)    {    if(input  ==  null  ||  out  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
138	[BUG]  [BUGGY]  if(input  ==  null  ||  out!=  null)  {  If(input  ==  null  ||  out!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  out!=  null)  {  If(input  ==  null  ||  out!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input    ==    null    ||    out!=    null)    {    If(input  ==  null  ||  out!=  null)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
139	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  return;  }	  if(input    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
140	[BUG]  [BUGGY]  out.write(input.length);  return;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.length);  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.length);  return;	  if(input    ==    null)    {    out.write(input.length);    return;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
141	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input.length);  return;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(input.length);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(input.length);  return;  }	  if(input    ==    null)    {    out.write(input.length);    return;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
142	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input.charAt(1));  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(input.charAt(1));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(input.charAt(1));  }	  if(input!=    null)    {    out.write(input.charAt(0));    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
143	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	20	6	add
144	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	20	6	add
145	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  NullPointerException  	20	6	add
146	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  NullPointerException  	20	6	add
147	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  	compilable	  [FE]  NullPointerException  	20	6	add
148	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  	compilable	  [FE]  NullPointerException  	20	6	add
149	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	20	19	add
150	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	20	19	add
151	[BUG]  [BUGGY]  If(in  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  If(in  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	If(in  ==  null  ||  input.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    If(out    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
152	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  If(out  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  If(out  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  If(out  ==  null  ||  input.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    If(out    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
153	[BUG]  [BUGGY]  If(out  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  If(out  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	If(out  ==  null  ||  input.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    If(out    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
154	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().interrupt(out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().interrupt(out);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
155	[BUG]  [BUGGY]  Thread.currentThread().interrupt(input);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().interrupt(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().interrupt(input);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
156	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out,  input);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().interrupt(out,  input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().interrupt(out,  input);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
157	[BUG]  [BUGGY]  char  pt  =  out.length();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char  pt  =  out.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char  pt  =  out.length();	  int    pt    =    out.length();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
158	[BUG]  [BUGGY]  long  pt  =  out.length();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  long  pt  =  out.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	long  pt  =  out.length();	  int    pt    =    out.length();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
159	[BUG]  [BUGGY]  short  pt  =  out.length();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  short  pt  =  out.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	short  pt  =  out.length();	  int    pt    =    out.length();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
160	[BUG]  [BUGGY]  out.write(input.charAt(0));  return;  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.charAt(0));  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.charAt(0));  return;	  if(input    ==    null)    {    out.write(input.charAt(0));    return;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
161	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(input.charAt(0));  return;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(input.charAt(0));  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(input.charAt(0));  return;  }	  if(input    ==    null)    {    out.write(input.charAt(0));    return;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
162	[BUG]  [BUGGY]  out.write(Character.codePointCount(input,  0));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Character.codePointCount(input,  0));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input,  0));	  out.write(Character.codePointCount(input));    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
163	[BUG]  [BUGGY]  out.write(Character.codePointCount(input),  0);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Character.codePointCount(input),  0);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input),  0);	  out.write(Character.codePointCount(input));    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
164	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write('n');  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write('n');  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write('n');  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(out    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
165	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	38	None	add
166	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
167	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
168	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  nu  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  nu  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	38	None	add
169	[BUG]  [BUGGY]  Char[]  c  =  input.getChars(pos);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Char[]  c  =  input.getChars(pos);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Char[]  c  =  input.getChars(pos);	  Char[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
170	[BUG]  [BUGGY]  out  =  output.getCharSequence();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out  =  output.getCharSequence();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out  =  output.getCharSequence();	  if(input    ==    null)    {    out    =    output.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
171	[BUG]  [BUGGY]  if(out  ==  null)  {  out  =  output.getCharSequence();  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null)  {  out  =  output.getCharSequence();  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null)  {  out  =  output.getCharSequence();  }	  if(input    ==    null)    {    out    =    output.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
172	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	68	5	add
173	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	68	5	add
174	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	68	None	add
175	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	68	None	add
176	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	68	5	add
177	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	68	5	add
178	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]            IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	68	None	add
179	[BUG]  [BUGGY]  String  pt  =  input.length();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  String  pt  =  input.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	String  pt  =  input.length();	  char    pt    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
180	[BUG]  [BUGGY]  Char  pt  =  input.length();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Char  pt  =  input.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Char  pt  =  input.length();	  char    pt    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
181	[BUG]  [BUGGY]  Character  pt  =  input.length();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Character  pt  =  input.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Character  pt  =  input.length();	  char    pt    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
182	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	15	6	add
183	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	15	6	add
184	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	15	19	add
185	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	15	19	add
186	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	15	6	add
187	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	15	6	add
188	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	15	19	add
189	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	15	19	add
190	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  NullPointerException  	15	6	add
191	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  NullPointerException  	15	6	add
192	[BUG]  [BUGGY]  char  c  =  input.getChars();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char  c  =  input.getChars();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char  c  =  input.getChars();	  String    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
193	[BUG]  [BUGGY]  CharSequence  c  =  input.getChars();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  CharSequence  c  =  input.getChars();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	CharSequence  c  =  input.getChars();	  String    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
194	[BUG]  [BUGGY]  String  c  =  input.getChars(pos);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  String  c  =  input.getChars(pos);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	String  c  =  input.getChars(pos);	  String    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
195	[BUG]  [BUGGY]  out.write(Integer.toHexString(input.charAt(0)));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toHexString(input.charAt(0)));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toHexString(input.charAt(0)));	  if(input!=    null)    {    out.write(Integer.toHexString(input.charAt(0)));    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
196	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toHexString(input.charAt(0)));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toHexString(input.charAt(0)));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toHexString(input.charAt(0)));  }	  if(input!=    null)    {    out.write(Integer.toHexString(input.charAt(0)));    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
197	[BUG]  [BUGGY]  out.write(Integer.toHexString(input.charAt(1)));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toHexString(input.charAt(1)));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toHexString(input.charAt(1)));	  if(input!=    null)    {    out.write(Integer.toHexString(input.charAt(0)));    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
198	[BUG]  [BUGGY]  if(input!=  null)  {  output.write(input.length);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  output.write(input.length);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  output.write(input.length);  }	  if(input!=    null)    {    out.write(input.length);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
199	[BUG]  [BUGGY]  if(input.getCharSequence()!=  null)  {  out  =  input.getCharSequence();  return;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input.getCharSequence()!=  null)  {  out  =  input.getCharSequence();  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input.getCharSequence()!=  null)  {  out  =  input.getCharSequence();  return;  }	  out    =    input.getCharSequence();    return;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
200	[BUG]  [BUGGY]  if(input.getCharSequence()  ==  null)  {  out  =  input.getCharSequence();  return;  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input.getCharSequence()  ==  null)  {  out  =  input.getCharSequence();  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input.getCharSequence()  ==  null)  {  out  =  input.getCharSequence();  return;  }	  out    =    input.getCharSequence();    return;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
201	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.length());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.charAt(0),  input.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.charAt(0),  input.length());	  out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
202	[BUG]  [BUGGY]  out.write(input.charAt(0),  output.length());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.charAt(0),  output.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.charAt(0),  output.length());	  out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
203	[BUG]  [BUGGY]  out.write(input.charAt(0),  pos);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.charAt(0),  pos);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.charAt(0),  pos);	  out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
204	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().set(input);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().set(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().set(input);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
205	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().set(out);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().set(out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().set(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
206	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().set(input,  out);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().set(input,  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().set(input,  out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
207	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  int  pos  =  input.length()  -  1;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pos  =  input.length()  -  1;	  int    pos    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
208	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  int  pos  =  input.length()  +  1;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pos  =  input.length()  +  1;	  int    pos    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
209	[BUG]  [BUGGY]  int  pos  =  input.length()  -  2;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  int  pos  =  input.length()  -  2;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pos  =  input.length()  -  2;	  int    pos    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
210	[BUG]  [BUGGY]  out  =  Character.codePointCount(input,  0,  input.length()  -  1);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out  =  Character.codePointCount(input,  0,  input.length()  -  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out  =  Character.codePointCount(input,  0,  input.length()  -  1);	  out    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
211	[BUG]  [BUGGY]  out  =  Character.codePointCount(input,  0,  input.length()  +  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out  =  Character.codePointCount(input,  0,  input.length()  +  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out  =  Character.codePointCount(input,  0,  input.length()  +  1);	  out    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
212	[BUG]  [BUGGY]  out  =  Character.codePointCount(input,  0,  input.length()  -  2);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out  =  Character.codePointCount(input,  0,  input.length()  -  2);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out  =  Character.codePointCount(input,  0,  input.length()  -  2);	  out    =    Character.codePointCount(input,    0,    input.length());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
213	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos  +  1);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char[]  c  =  input.getChars(pos  +  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos  +  1);	  char[]    c    =    input.getChars(pos);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
214	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
215	[BUG]  [BUGGY]  out.write(Integer.toString(input,  pos));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input,  pos));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input,  pos));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
216	[BUG]  [BUGGY]  int  pos  =  input.length()  +  out.length();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  int  pos  =  input.length()  +  out.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pos  =  input.length()  +  out.length();	  int    pos    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
217	[BUG]  [BUGGY]  output.write(input);  return;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  output.write(input);  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	output.write(input);  return;	  if(input    ==    null)    {    output.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
218	[BUG]  [BUGGY]  if(out!=  null)  {  input.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  input.write(input);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out!=  null)  {  input.write(input);  return;  }	  if(input    ==    null)    {    output.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
219	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  output));  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  output));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(JSError.make(input,  output));	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
220	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().setLocal(out);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClass().setLocal(out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClass().setLocal(out);	  Thread.currentThread().getContextClass().getName();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
221	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().setCurrentName(input);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClass().setCurrentName(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClass().setCurrentName(input);	  Thread.currentThread().getContextClass().getName();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
222	[BUG]  [BUGGY]  Integer  pt  =  out.length();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Integer  pt  =  out.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Integer  pt  =  out.length();	  int    pt    =    out.length();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
223	[BUG]  [BUGGY]  if(input  ==  null)  {  if(out  ==  null  ||  out.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  if(out  ==  null  ||  out.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  if(out  ==  null  ||  out.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    if(out    {    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
224	[BUG]  [BUGGY]  Output  output  =  input.getOutput();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Output  output  =  input.getOutput();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Output  output  =  input.getOutput();	  if(input!=    null)    {    out    =    input.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
225	[BUG]  [BUGGY]  Char[]  c  =  input.getChars(input);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Char[]  c  =  input.getChars(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Char[]  c  =  input.getChars(input);	  Char[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
226	[BUG]  [BUGGY]  out.write(Integer.toString(input.substring(1)));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.substring(1)));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.substring(1)));	  out.write(Integer.toString(input.charAt(0)));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
227	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toHexString(input.charAt(1)));  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toHexString(input.charAt(1)));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toHexString(input.charAt(1)));  }	  if(input!=    null)    {    out.write(Integer.toHexString(input.charAt(0)));    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
228	[BUG]  [BUGGY]  out.write(Integer.toString(input),  out);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input),  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input),  out);	  if(input    ==    null)    {    out.write(Integer.toString(pos),    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
229	[BUG]  [BUGGY]  OutputStream  out  =  Character.codePointCount(input,  0,  input.length());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  OutputStream  out  =  Character.codePointCount(input,  0,  input.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	OutputStream  out  =  Character.codePointCount(input,  0,  input.length());	  if(input    ==    null)    {    out    =    Character.codePointCount(input,    0,    input.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
230	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset(out);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reset(out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().reset(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
231	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu	  	non-compiled	[CE]  	68	None	add
232	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	68	None	add
233	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  EOF( " "));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  EOF( " "));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(new  EOF( " "));	  Thread.currentThread().getContextClassLoader().report(new    IOException(   "   "));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
234	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( " "),  out);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( " "),  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(new  IOException( " "),  out);	  Thread.currentThread().getContextClassLoader().report(new    IOException(   "   "));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
235	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  out.getOutputFactory();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  OutputFactory  outputFactory  =  out.getOutputFactory();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	OutputFactory  outputFactory  =  out.getOutputFactory();	  if(input!=    null)    {    out.write(input.length);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
236	[BUG]  [BUGGY]  if(input  ==  null  ||  out!=  null)  {  If(input  ==  null  ||  out  ==  null)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  out!=  null)  {  If(input  ==  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  out!=  null)  {  If(input  ==  null  ||  out  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    If(input    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
237	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(input.charAt(1)));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(input.charAt(1)));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(input.charAt(1)));  }	  if(input!=    null)    {    out.write(Integer.toString(input.charAt(0)));    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
238	[BUG]  [BUGGY]  out.write(input.charAt(0),  input.charAt(0));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.charAt(0),  input.charAt(0));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.charAt(0),  input.charAt(0));	  out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
239	[BUG]  [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out  ==  null  ||  output  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out  ==  null  ||  output  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input    ==    null)    {    if(out  ==  null  ||  output  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
240	[BUG]  [BUGGY]  if(out!=  null)  {  out  =  output.getCharSequence();  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out  =  output.getCharSequence();  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out!=  null)  {  out  =  output.getCharSequence();  }	  if(input    ==    null)    {    out    =    output.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
241	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
242	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
243	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
244	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
245	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
246	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	17	19	add
247	[BUG]  [BUGGY]  OutputFactory.writeSequence(out,  input);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  OutputFactory.writeSequence(out,  input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	OutputFactory.writeSequence(out,  input);	  if(input!=    null)    {    out.write(input);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
248	[BUG]  [BUGGY]  OutputFactory  outputFactory  =  input.getOutputFactory();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  OutputFactory  outputFactory  =  input.getOutputFactory();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	OutputFactory  outputFactory  =  input.getOutputFactory();	  if(input    ==    null)    {    out.write(input.charAt(0));    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
249	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(in);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClass(in);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClass(in);	  Thread.currentThread().setContextClass(input);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
250	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
251	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()  -  2));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.length()  -  2));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.length()  -  2));	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
252	[BUG]  [BUGGY]  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
253	[BUG]  [BUGGY]  String  c  =  input.getChars(input);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  String  c  =  input.getChars(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	String  c  =  input.getChars(input);	  String    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
254	[BUG]  [BUGGY]  out.write(Character.codePointCount(input,  pos)+  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Character.codePointCount(input,  pos)+  1);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input,  pos)+  1);	  out.write(Character.codePointCount(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
255	[BUG]  [BUGGY]  out.write('n',  input.length());  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write('n',  input.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write('n',  input.length());	  out.write('n');    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
256	[BUG]  [BUGGY]  CharSequence[]  c  =  input.getChars();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  CharSequence[]  c  =  input.getChars();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	CharSequence[]  c  =  input.getChars();	  Character[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
257	[BUG]  [BUGGY]  Character[]  c  =  input.getChars(input);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Character[]  c  =  input.getChars(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Character[]  c  =  input.getChars(input);	  Character[]    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
258	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
259	[BUG]  [BUGGY]  if(out!=  null)  {  out  =  output.getCharSequence();  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out  =  output.getCharSequence();  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out!=  null)  {  out  =  output.getCharSequence();  return;  }	  if(input    ==    null)    {    out    =    output.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
260	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  	compilable	  [FE]  NullPointerException  	15	6	add
261	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  	compilable	  [FE]  NullPointerException  	15	6	add
262	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  NullPointerException  	15	6	add
263	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  NullPointerException  	15	6	add
264	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(out  ==  null  ||  out  ==  null)  {	  if(out    ==    null    ||    input    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	88	1	replace
265	[BUG]  [BUGGY]  if(out  ==  null  ||  out  ==  null)  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null  ||  out  ==  null)  {	  if(out    ==    null    ||    input    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	88	1	replace
266	[BUG]  [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  out  ==  null)  {  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  out  ==  null)  {  return;  }	  if(input    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
267	[BUG]  [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(input    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
268	[BUG]  [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out!=  null)  {  out.write('n');  return;  }	  if(input!=    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
269	[BUG]  [BUGGY]  out.write(Integer.toHexString(input));  return;  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toHexString(input));  return;  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toHexString(input));  return;	  if(input    ==    null)    {    out.write(Integer.toHexString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
270	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	20	6	add
271	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  NullPointerException  	20	6	add
272	[BUG]  [BUGGY]  if(input  ==  null)  {  If(out  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  If(out  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  If(out  ==  null  ||  input.length()  ==  0)  {	  if(out    ==    null    ||    input.length()    ==    0)    {    If(out    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
273	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  input!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	if(out  ==  null  ||  input!=  null)  {	  if(input    ==    null    ||    out!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	43	19	replace
274	[BUG]  [BUGGY]  if(out  ==  null  ||  input!=  null)  {  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  input!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null  ||  input!=  null)  {	  if(input    ==    null    ||    out!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	43	19	replace
275	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. ");  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(new  IOException( "The  Writer  must  not  be  null. ");	  Thread.currentThread().getContextClassLoader().report(new    IOException(   "   "));    	non-compiled	[CE]  	114	None	replace
276	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
277	[BUG]  [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
278	[BUG]  [BUGGY]  Character  c  =  input.getChars();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Character  c  =  input.getChars();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Character  c  =  input.getChars();	  String    c    =    input.getChars();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
279	[BUG]  [BUGGY]  if(out!=  null)  {  out.write(input);  return;  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.write(input);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out!=  null)  {  out.write(input);  return;  }	  if(input    ==    null)    {    out.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
280	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().reset();  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClass().reset();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClass().reset();	  Thread.currentThread().getContextClass().getName();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
281	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().setCurrentName(input.getName());  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClass().setCurrentName(input.getName());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClass().setCurrentName(input.getName());	  Thread.currentThread().getContextClass().getName();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
282	[BUG]  [BUGGY]  if(input  ==  null)  {  output.write(input,  out);  return;  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  output.write(input,  out);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  output.write(input,  out);  return;  }	  if(input    ==    null)    {    output.write(input);    return;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
283	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length);  }	  if(input    ==    null)    {    out.write(input.length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
284	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  return;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  return;  }	  if(input    ==    null)    {    out.write(Integer.toString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
285	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos  +  1));  return;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos  +  1));  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos  +  1));  return;  }	  if(input    ==    null)    {    out.write(Integer.toString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
286	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toHexString(pos));  return;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toHexString(pos));  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toHexString(pos));  return;  }	  if(input    ==    null)    {    out.write(Integer.toHexString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
287	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toHexString(pos  +  1));  return;  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toHexString(pos  +  1));  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toHexString(pos  +  1));  return;  }	  if(input    ==    null)    {    out.write(Integer.toHexString(pos));    return;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
288	[BUG]  [BUGGY]  out.write(Integer.toString(pos  +  1));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(pos  +  1));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(pos  +  1));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
289	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos  +  1),  input);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos  +  1),  input);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos  +  1),  input);  }	  if(input    ==    null)    {    out.write(Integer.toString(pos),    input);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
290	[BUG]  [BUGGY]  out.write(input.substring(0,  input.length()  -  1));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.substring(0,  input.length()  -  1));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.substring(0,  input.length()  -  1));	  out.write(input.charAt(0));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
291	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  out.write('n');  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  <  =  0)  {  out.write('n');  return;  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
292	[BUG]  [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos  +  1));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out.write(Integer.toString(pos  +  1));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out.write(Integer.toString(pos  +  1));  }	  if(input!=    null)    {    out.write(Integer.toString(pos));    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
293	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(this);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(this);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().intermediateThread().setContextClassLoader(this);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
294	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(null);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
295	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(class);  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClass(class);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClass(class);	  Thread.currentThread().setContextClass(input);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
296	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread().setContextClass(input);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().intermediateThread().setContextClass(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().intermediateThread().setContextClass(input);	  Thread.currentThread().setContextClass(input);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
297	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().process(input);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().process(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().process(input);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
298	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().process(out,  out);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().process(out,  out);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().process(out,  out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
299	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input);  }	  if(input    ==    null)    {    out.write(input);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
300	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos),  out);  return;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos),  out);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos),  out);  return;  }	  if(input    ==    null)    {    out.write(Integer.toString(pos),    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
301	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos),  input);  return;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos),  input);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos),  input);  return;  }	  if(input    ==    null)    {    out.write(Integer.toString(pos),    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
302	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos  +  1),  out);  return;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null)  {  out.write(Integer.toString(pos  +  1),  out);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null)  {  out.write(Integer.toString(pos  +  1),  out);  return;  }	  if(input    ==    null)    {    out.write(Integer.toString(pos),    out);    return;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
303	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  	compilable	  [FE]  NullPointerException  	15	6	add
304	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  	compilable	  [FE]  NullPointerException  	15	6	add
305	[BUG]  [BUGGY]  if(out!=  null)  {  out.write(input);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.write(input);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out!=  null)  {  out.write(input);  }	  if(input!=    null)    {    out.write(input);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
306	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length());  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length());  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length());  }	  if(input    ==    null)    {    out.write(input.length());    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
307	[BUG]  [BUGGY]  out.write(input.getChars());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(input.getChars());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(input.getChars());	  out.write(input);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
308	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(input);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().intermediateThread().setContextClassLoader(input);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
309	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this.input);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this.input);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().setContextClassLoader(this.input);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
310	[BUG]  [BUGGY]  out.write(Character.codePointCount(input),  pos);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Character.codePointCount(input),  pos);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Character.codePointCount(input),  pos);	  out.write(Character.codePointCount(input));    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
311	[BUG]  [BUGGY]  int  pt  =  output.length();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  int  pt  =  output.length();  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	int  pt  =  output.length();	  int    pt    =    out.length();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
312	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  	compilable	  [FE]  NullPointerException  	17	19	add
313	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	  	compilable	  [FE]  NullPointerException  	17	19	add
314	[BUG]  [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  If(input  ==  null  ||  out  ==  null)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input  ==  null)  {  If(input  ==  null  ||  out  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input  ==  null)  {  If(input  ==  null  ||  out  ==  null)  {	  if(input    ==    null    ||    out    ==    null)    {    If(input    ==    null    ||    out    ==    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
315	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.charAt(0));  return;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.charAt(0));  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.charAt(0));  return;  }	  if(input    ==    null)    {    out.write(input.charAt(0));    return;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
316	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  null));  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  null));  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().getContextClassLoader().report(JSError.make(input,  null));	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
317	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  out,  pos);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char[]  c  =  input.getChars(pos,  out,  pos);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos,  out,  pos);	  char[]    c    =    input.getChars(pos,    out);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
318	[BUG]  [BUGGY]  char[]  c  =  input.getChars(pos,  pos);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  char[]  c  =  input.getChars(pos,  pos);  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	char[]  c  =  input.getChars(pos,  pos);	  char[]    c    =    input.getChars(pos,    out);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
319	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.charAt(0));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.charAt(0));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.charAt(0));  }	  if(input    ==    null)    {    out.write(input.charAt(0));    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
320	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out,  pos);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  Thread.currentThread().interrupt(out,  pos);  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	Thread.currentThread().interrupt(out,  pos);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
321	[BUG]  [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out  {  null  ||  input  ==  null)  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(out  ==  null  ||  input  ==  null)  {  if(out  {  null  ||  input  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(out    ==    null    ||    input    ==    null)    {    if(out  {  null  ||  input  ==  null)  {	  	non-compiled	[CE]  ')'  expected	87	None	add
322	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]          IllegalArgumentException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length  ==  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length  ==  0)  {	  if(input    ==    null    ||    output    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  length	44	None	replace
323	[BUG]  [BUGGY]  out.write(Integer.toString(input.length()),  input.length());  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.write(Integer.toString(input.length()),  input.length());  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.write(Integer.toString(input.length()),  input.length());	  out.write(Integer.toString(input.length()));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
324	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	68	5	add
325	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	68	5	add
326	[BUG]  [BUGGY]  out.append('n');  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  out.append('n');  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	out.append('n');	  out.write('n');    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
327	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
328	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
329	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
330	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  	compilable	  [FE]  IllegalArgumentException  	38	5	add
331	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ".);  }  [CE]  <identifier>  expected  [FE]    NullPointerException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ".);  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(out    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ".);  }	  	non-compiled	[CE]  <identifier>  expected	20	None	add
332	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length);  return;  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length);  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(input.length);  return;  }	  if(input    ==    null)    {    out.write(input.length);    return;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
333	[BUG]  [BUGGY]  if(input!=  null)  {  out  =  input.getSequence();  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out  =  input.getSequence();  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out  =  input.getSequence();  }	  if(input!=    null)    {    out    =    input.getCharSequence();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
334	[BUG]  [BUGGY]  if(input!=  null)  {  out  =  input.getSequence();  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input!=  null)  {  out  =  input.getSequence();  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input!=  null)  {  out  =  input.getSequence();  return;  }	  if(input!=    null)    {    out    =    input.getCharSequence();    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
335	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  return;  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  return;  }	  if(input    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
336	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  }  [BUGGY]      if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.22941573387056174	76	76	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write(Integer.toString(pos));  }	  if(input    ==    null)    {    out.write(Integer.toString(pos));    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
