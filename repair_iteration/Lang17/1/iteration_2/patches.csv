bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  c  =  input.toChars();  out.write('n');  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  input.toChars();  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  input.toChars();  out.write('n');	          out.write('n');    char[]    c    =    input.toChars();    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
2	[BUG]  [BUGGY]  char[]  c  =  input.toChars();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  input.toChars();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  input.toChars();	          out.write('n');    char[]    c    =    input.toChars();    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
3	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  char[]  c  =  input.toChars();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  char[]  c  =  input.toChars();	          out.write('n');    char[]    c    =    input.toChars();    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
4	[BUG]  [BUGGY]  pos  +=  input.length());  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length());	          pos    +=    input.length();    pos    +=    input.length());    	non-compiled	[CE]  ';'  expected	114	None	replace
5	[BUG]  [BUGGY]  pos  +=  len;  [CE]  cannot  find  symbol  c  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  len;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  len;	          pos    +=    input.length();    pos    +=    input.length());    	non-compiled	[CE]  cannot  find  symbol  c	114	None	replace
6	[BUG]  [BUGGY]  if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
7	[BUG]  [BUGGY]  if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  c  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
8	[BUG]  [BUGGY]  if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  <  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
9	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  input.toChars(input,  0,  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  input.toChars(input,  0,  input.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
10	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input,  0,  out.length());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  input.toChars(input,  0,  out.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  input.toChars(input,  0,  out.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
11	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars(input,  0,  input.length());  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  c  =  input.toChars(input,  0,  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  c  =  input.toChars(input,  0,  input.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  cannot  find  symbol  c	89	None	replace
12	[BUG]  [BUGGY]  out.write(Character.toChars(pos,  input));  [CE]  no  suitable  method  found  for  toChars(int,CharSequence)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(pos,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(pos,  input));	  out.write(Character.toChars(input));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,CharSequence)	101	None	replace
13	[BUG]  [BUGGY]  out.write(Character.toChars(consumed,  input));  [CE]  no  suitable  method  found  for  toChars(int,CharSequence)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(consumed,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(consumed,  input));	  out.write(Character.toChars(input));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,CharSequence)	101	None	replace
14	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  out));  [CE]  no  suitable  method  found  for  codePointAt(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  out));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  out));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(input,    p));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(CharSequence,Writer)	23	None	replace
15	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed  +  1));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed  +  1));	  Char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
16	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed),  pos);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed),  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed),  pos);	  Char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
17	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write('n');  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write('n');	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	123	None	replace
18	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  out.write('n');  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  out.write('n');	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	123	None	replace
19	[BUG]  [BUGGY]  out.write( "/.s.IFJDCS ");  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "/.s.IFJDCS ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "/.s.IFJDCS ");	  out.write(   ".s.IFJDCS   ");    	non-compiled	[CE]  cannot  find  symbol  c	57	None	replace
20	[BUG]  [BUGGY]  out.write( "[s.IFJDCS] ");  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "[s.IFJDCS] ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "[s.IFJDCS] ");	  out.write(   ".s.IFJDCS   ");    	non-compiled	[CE]  cannot  find  symbol  c	57	None	replace
21	[BUG]  [BUGGY]  String  c  =  Character.toChars(Character.charCount(consumed));  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  String  c  =  Character.toChars(Character.charCount(consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	String  c  =  Character.toChars(Character.charCount(consumed));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    String    c    =    Character.toChars(Character.charCount(consumed));    	non-compiled	[CE]  incompatible  types	9	None	replace
22	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  consumed));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input,  consumed));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos,    consumed));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	66	None	replace
23	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  input));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  input));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  input));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos,    consumed));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	66	None	replace
24	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  out,  consumed));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  out,  consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos,  out,  consumed));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos,    consumed));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	66	None	replace
25	[BUG]  [BUGGY]  char[]  c  =  input.toChars(pos);  out.write('n');  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  input.toChars(pos);  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  input.toChars(pos);  out.write('n');	          out.write('n');    char[]    c    =    input.toChars(pos);    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
26	[BUG]  [BUGGY]  char[]  c  =  input.toChars(pos);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  input.toChars(pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  input.toChars(pos);	          out.write('n');    char[]    c    =    input.toChars(pos);    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
27	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  len));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  len));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    input,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	67	None	replace
28	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  sumed));  [CE]  cannot  find  symbol  sumed  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  sumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input,  sumed));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    input,    pos));    	non-compiled	[CE]  cannot  find  symbol  sumed	67	None	replace
29	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  len));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input,  len));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    input,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	67	None	replace
30	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  constant));  [CE]  cannot  find  symbol  constant  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  constant));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input,  constant));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    input,    pos));    	non-compiled	[CE]  cannot  find  symbol  constant	67	None	replace
31	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos,  consumed));  [CE]  no  suitable  method  found  for  toChars(CharSequence,int,int)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(input,  pos,  consumed));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(input,  pos,  consumed));	  out.write(Character.toChars(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int,int)	49	None	replace
32	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos  +  1));  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(input,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(input,  pos  +  1));	  out.write(Character.toChars(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	49	None	replace
33	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos,  consume));  [CE]  cannot  find  symbol  consume  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(input,  pos,  consume));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(input,  pos,  consume));	  out.write(Character.toChars(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  consume	49	None	replace
34	[BUG]  [BUGGY]  pos  =  out.length();  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  out.length();  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  out.length();  pos  =  input.length();	          pos    =    input.length();    pos    =    in.length();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
35	[BUG]  [BUGGY]  pos  =  output.length();  pos  =  input.length();  [CE]  cannot  find  symbol  output  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  output.length();  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  output.length();  pos  =  input.length();	          pos    =    input.length();    pos    =    in.length();    	non-compiled	[CE]  cannot  find  symbol  output	45	None	replace
36	[BUG]  [BUGGY]  pos  =  in.length();  [CE]  cannot  find  symbol  in  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  in.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  in.length();	          pos    =    input.length();    pos    =    in.length();    	non-compiled	[CE]  cannot  find  symbol  in	45	None	replace
37	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len,  input));  [CE]  no  suitable  method  found  for  codePointAt(int,int,CharSequence)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len,  input));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  len,  input));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,CharSequence)	10	None	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos  -  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(pos  -  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    	compilable	  [FE]  ComparisonFailure  	121	13	replace
39	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos  -  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos  -  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos  -  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    	compilable	  [FE]  ComparisonFailure  	121	13	replace
40	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1),  pos);  [CE]  no  suitable  method  found  for  toChars(int,int)  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1),  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed  -  1),  pos);	  char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,int)	121	None	replace
41	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( "n   ");  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write('n');    out.write( "n   ");  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	81	13	add
42	[BUG]  [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( "n   ");  out.write('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( "n   ");  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write('n');    out.write( "n   ");  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	81	13	add
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( ".n   ");  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write('n');    out.write( ".n   ");  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	81	13	add
44	[BUG]  [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( ".n   ");  out.write('n');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( ".n   ");  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write('n');    out.write( ".n   ");  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	81	13	add
45	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n    n  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( ",n   ");  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write('n');    out.write( ",n   ");  out.write('n');	  	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      n  	81	13	add
46	[BUG]  [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( ",n   ");  out.write('n');  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n    n  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( ",n   ");  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write('n');    out.write( ",n   ");  out.write('n');	  	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      n  	81	13	add
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write('n');  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write('n');    out.write('n');  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	81	13	add
48	[BUG]  [BUGGY]          out.write(     "n     ");    out.write('n');  out.write('n');  out.write('n');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write('n');  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write('n');    out.write('n');  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	81	13	add
49	[BUG]  [BUGGY]  out.write( "null ");  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "null ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "null ");	          out.write(       "n       ");    out.write(       "n       "));    	non-compiled	[CE]  cannot  find  symbol  c	80	None	replace
50	[BUG]  [BUGGY]  out.write( "0 ");  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "0 ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "0 ");	          out.write(       "n       ");    out.write(       "n       "));    	non-compiled	[CE]  cannot  find  symbol  c	80	None	replace
51	[BUG]  [BUGGY]  char[]  c  =  input.toChars(input);  out.write('n');  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  input.toChars(input);  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  input.toChars(input);  out.write('n');	          out.write('n');    char[]    c    =    input.toChars(input);    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
52	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars(input);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  char[]  c  =  input.toChars(input);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  char[]  c  =  input.toChars(input);	          out.write('n');    char[]    c    =    input.toChars(input);    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
53	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  len));	  pos    +=    Character.charCount(Character.codePointAt(input,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	58	None	replace
54	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consume,  len));  [CE]  cannot  find  symbol  consume  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consume,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consume,  len));	  pos    +=    Character.charCount(Character.codePointAt(input,    len));    	non-compiled	[CE]  cannot  find  symbol  consume	58	None	replace
55	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars(pos);  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  c  =  input.toChars(pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  c  =  input.toChars(pos);	          out.write('n');    char[]    c    =    input.toChars(pos);    	non-compiled	[CE]  cannot  find  symbol  c	90	None	replace
56	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  Character.toChars(input,  pos);  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  char[]  c  =  Character.toChars(input,  pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  char[]  c  =  Character.toChars(input,  pos);	          out.write('n');    char[]    c    =    input.toChars(pos);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	90	None	replace
57	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  consumed));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  consumed));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	97	None	replace
58	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos  +  1));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  pos  +  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	97	None	replace
59	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  pos));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  pos));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	97	None	replace
60	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(pos,  len));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	21	None	replace
61	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  consumed));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(pos,  consumed));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(pos,  consumed));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	21	None	replace
62	[BUG]  [BUGGY]  pos  +=  in.length()  +  1;  [CE]  cannot  find  symbol  in  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  in.length()  +  1;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  in.length()  +  1;	  pos    +=    input.length()    +    1;    	non-compiled	[CE]  cannot  find  symbol  in	13	None	replace
63	[BUG]  [BUGGY]  OutputStream  out  =  this.inputFile.getOutputStream();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  this.inputFile.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  this.inputFile.getOutputStream();	  OutputStream    out    =    inputFile.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
64	[BUG]  [BUGGY]  OutputStream  out  =  outputFile.getOutputStream();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  outputFile.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  outputFile.getOutputStream();	  OutputStream    out    =    inputFile.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
65	[BUG]  [BUGGY]  pos  +=  in.length();  [CE]  cannot  find  symbol  in  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  in.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  in.length();	          pos    +=    input.length();    pos    +=    output.length();    	non-compiled	[CE]  cannot  find  symbol  in	18	None	replace
66	[BUG]  [BUGGY]  pos  +=  input.length()  /  2;  [CE]  cannot  find  symbol  c  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  input.length()  /  2;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  /  2;	  pos    +=    input.length()    *    2;    	non-compiled	[CE]  cannot  find  symbol  c	99	None	replace
67	[BUG]  [BUGGY]  Integer  pos  +=  input.length();  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Integer  pos  +=  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Integer  pos  +=  input.length();	          pos    +=    input.length();    Integer    pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	17	None	replace
68	[BUG]  [BUGGY]  int  pos  +=  input.length();  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  +=  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  +=  input.length();	          pos    +=    input.length();    Integer    pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	17	None	replace
69	[BUG]  [BUGGY]  Integer  pos  +=  consumed.length();  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Integer  pos  +=  consumed.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Integer  pos  +=  consumed.length();	          pos    +=    input.length();    Integer    pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	17	None	replace
70	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(consumed));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.toChars(consumed));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.toChars(consumed));	  pos    +=    Character.charCount(Character.toChars(input));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	98	None	replace
71	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  len));  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.toChars(input,  len));	  pos    +=    Character.charCount(Character.toChars(input));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	98	None	replace
72	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(consumed,  input));  [CE]  no  suitable  method  found  for  toChars(int,CharSequence)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.toChars(consumed,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.toChars(consumed,  input));	  pos    +=    Character.charCount(Character.toChars(input));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,CharSequence)	98	None	replace
73	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  input.toString());  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS "  +  input.toString());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS "  +  input.toString());	  out.write(   ".s.IFJDCS   ".toString());    	non-compiled	[CE]  cannot  find  symbol  c	83	None	replace
74	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").toString());  [CE]  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ").toString());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ").toString());	  out.write(   ".s.IFJDCS   ".toString());    	non-compiled	[CE]  	83	None	replace
75	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input  +  1));  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input  +  1));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	106	None	replace
76	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input.length()  +  1));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input.length()  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input.length()  +  1));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	106	None	replace
77	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos  +  1));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos  +  1));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	106	None	replace
78	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  input.length();  pos  +=  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                pos        +=        input.length();        pos    +=    input.length();    pos  +=  input.length();  pos  +=  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	13	add
79	[BUG]  [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  input.length();  pos  +=  input.length();  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  input.length();  pos  +=  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        input.length();        pos    +=    input.length();    pos  +=  input.length();  pos  +=  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	13	add
80	[BUG]  [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  int  pos  +=  input.length();  pos  +=  input.length();  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  int  pos  +=  input.length();  pos  +=  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        input.length();        pos    +=    input.length();    int  pos  +=  input.length();  pos  +=  input.length();	  	non-compiled	[CE]  ';'  expected	14	None	add
81	[BUG]  [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  output.length();  pos  +=  input.length();  [CE]  cannot  find  symbol  output  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  output.length();  pos  +=  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        input.length();        pos    +=    input.length();    pos  +=  output.length();  pos  +=  input.length();	  	non-compiled	[CE]  cannot  find  symbol  output	14	None	add
82	[BUG]  [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  input.length();  pos  +=  output.length();  [CE]  cannot  find  symbol  output  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  input.length();  pos  +=  output.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        input.length();        pos    +=    input.length();    pos  +=  input.length();  pos  +=  output.length();	  	non-compiled	[CE]  cannot  find  symbol  output	14	None	add
83	[BUG]  [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  in.length();  pos  +=  input.length();  [CE]  cannot  find  symbol  in  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    input.length();    pos  +=  input.length();  pos  +=  in.length();  pos  +=  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        input.length();        pos    +=    input.length();    pos  +=  in.length();  pos  +=  input.length();	  	non-compiled	[CE]  cannot  find  symbol  in	14	None	add
84	[BUG]  [BUGGY]  pos  +=  input.length()  +  consumed;  [CE]  cannot  find  symbol  c  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  input.length()  +  consumed;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  +  consumed;	  pos    +=    input.length()    +    len;    	non-compiled	[CE]  cannot  find  symbol  c	100	None	replace
85	[BUG]  [BUGGY]  pos  +=  input.length()  +  consume;  [CE]  cannot  find  symbol  consume  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  input.length()  +  consume;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  +  consume;	  pos    +=    input.length()    +    len;    	non-compiled	[CE]  cannot  find  symbol  consume	100	None	replace
86	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "n   ");  out.write( "n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   "n       ");    out.write( "n   ");  out.write( "n ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
87	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "n   ");  out.write( "n ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "n   ");  out.write( "n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   "n       ");    out.write( "n   ");  out.write( "n ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
88	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( ".s.IFJDCS ".charAt(pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   "n       ");    out.write( ".s.IFJDCS ".charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	13	add
89	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( ".s.IFJDCS ".charAt(pos));  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( ".s.IFJDCS ".charAt(pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   "n       ");    out.write( ".s.IFJDCS ".charAt(pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	13	add
90	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "   ");  out.write( "n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   "n       ");    out.write( "   ");  out.write( "n ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
91	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "   ");  out.write( "n ");  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "   ");  out.write( "n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   "n       ");    out.write( "   ");  out.write( "n ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
92	[BUG]  [BUGGY]  OutputStream  out  =  inputStream.getOutputStream();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  inputStream.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  inputStream.getOutputStream();	  OutputStream    out    =    outputStream.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
93	[BUG]  [BUGGY]  OutputStream  out  =  this.outputStream.getOutputStream();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  this.outputStream.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  this.outputStream.getOutputStream();	  OutputStream    out    =    outputStream.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
94	[BUG]  [BUGGY]  OutputStream  out  =  _outputStream.getOutputStream();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  _outputStream.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  _outputStream.getOutputStream();	  OutputStream    out    =    outputStream.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
95	[BUG]  [BUGGY]  out.write( "[null] ");  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "[null] ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "[null] ");	          out.write(       "n       ");    out.write(   ".n       ");    	non-compiled	[CE]  cannot  find  symbol  c	36	None	replace
96	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".length());  [CE]  cannot  find  symbol  c  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ".length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ".length());	          out.write(       "n       ");    out.write(   ".n       ");    	non-compiled	[CE]  cannot  find  symbol  c	36	None	replace
97	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)/  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(consumed)/  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    	compilable	  [FE]  ComparisonFailure  	31	13	replace
98	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)/  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)/  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed)/  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    	compilable	  [FE]  ComparisonFailure  	31	13	replace
99	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  2);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(consumed)+  2);	  char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    	compilable	  [FE]  ComparisonFailure  	31	13	replace
100	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  2);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  2);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed)+  2);	  char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    	compilable	  [FE]  ComparisonFailure  	31	13	replace
101	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)-  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(consumed)-  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    	compilable	  [FE]  ComparisonFailure  	31	13	replace
102	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)-  1);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)-  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed)-  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    	compilable	  [FE]  ComparisonFailure  	31	13	replace
103	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  out));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  out));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos,  out));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos,    consume));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	68	None	replace
104	[BUG]  [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(consumed,  pos));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(consumed,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.toChars(Character.codePointAt(consumed,  pos));	  pos    +=    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	64	None	replace
105	[BUG]  [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(pos,  input));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.toChars(Character.codePointAt(pos,  input));	  pos    +=    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	64	None	replace
106	[BUG]  [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(consume,  pos));  [CE]  cannot  find  symbol  consume  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(consume,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.toChars(Character.codePointAt(consume,  pos));	  pos    +=    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  consume	64	None	replace
107	[BUG]  [BUGGY]  out.write('0',  consumed);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('0',  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('0',  consumed);	  out.write('0');    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	112	None	replace
108	[BUG]  [BUGGY]  out.write('0'  +  consumed);  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('0'  +  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('0'  +  consumed);	  out.write('0');    	non-compiled	[CE]  cannot  find  symbol  c	112	None	replace
109	[BUG]  [BUGGY]  out.write('0'  -  consumed);  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('0'  -  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('0'  -  consumed);	  out.write('0');    	non-compiled	[CE]  cannot  find  symbol  c	112	None	replace
110	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consumed,  len));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consumed,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consumed,  len));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos,    len));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	84	None	replace
111	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  input,  pos,  len));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  input,  pos,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  input,  pos,  len));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos,    len));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	84	None	replace
112	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	28	None	add
113	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  Character[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  Character[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    Character[]  c  =  Character.toChars(Character.charCount(consumed  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	28	None	add
114	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  Char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  Char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    Char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
115	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  char[]  c  =  Character.toCHARs(Character.charCount(consumed  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  char[]  c  =  Character.toCHARs(Character.charCount(consumed  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    char[]  c  =  Character.toCHARs(Character.charCount(consumed  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	28	None	add
116	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  char[]  c  =  Character.toChars(Character.charCount(consumed  +  2));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  char[]  c  =  Character.toChars(Character.charCount(consumed  +  2));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    char[]  c  =  Character.toChars(Character.charCount(consumed  +  2));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	28	None	add
117	[BUG]  [BUGGY]  pos  =  output.lastIndexOf(consumed);  [CE]  cannot  find  symbol  output  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  output.lastIndexOf(consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  output.lastIndexOf(consumed);	  pos    =    input.lastIndexOf(consumed);    	non-compiled	[CE]  cannot  find  symbol  output	115	None	replace
118	[BUG]  [BUGGY]  pos  =  sumed.lastIndexOf(input);  [CE]  cannot  find  symbol  sumed  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  sumed.lastIndexOf(input);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  sumed.lastIndexOf(input);	  pos    =    input.lastIndexOf(consumed);    	non-compiled	[CE]  cannot  find  symbol  sumed	115	None	replace
119	[BUG]  [BUGGY]  pos  =  supplied.lastIndexOf(input);  [CE]  cannot  find  symbol  supplied  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  supplied.lastIndexOf(input);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  supplied.lastIndexOf(input);	  pos    =    input.lastIndexOf(consumed);    	non-compiled	[CE]  cannot  find  symbol  supplied	115	None	replace
120	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write( "null ");  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  <  0)  {  out.write( "null ");  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  <  0)  {  out.write( "null ");  out.write('n');  }	          out.write(       "n       ");    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	82	None	replace
121	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write( "n   ");  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  <  0)  {  out.write( "n   ");  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  <  0)  {  out.write( "n   ");  out.write('n');  }	          out.write(       "n       ");    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	82	None	replace
122	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  pos));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input,  pos));	  char[]    c    =    Character.toChars(Character.charCount(pos,    input));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	65	None	replace
123	[BUG]  [BUGGY]  Integer  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Integer  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Integer  pos  =  input.length();	          pos    =    input.length();    Integer    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	78	None	replace
124	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write('n');  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write('n');	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	72	None	replace
125	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write('n');    	compilable	  [FE]  ComparisonFailure  	72	13	replace
126	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write('n');    	compilable	  [FE]  ComparisonFailure  	72	13	replace
127	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	120	None	add
128	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  Character[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  Character[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    Character[]  c  =  Character.toChars(Character.charCount(consumed  -  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	120	None	add
129	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  Char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  Char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    Char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));	  	non-compiled	[CE]  cannot  find  symbol	120	None	add
130	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  char[]  c  =  Character.toCHARs(Character.charCount(consumed  -  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  char[]  c  =  Character.toCHARs(Character.charCount(consumed  -  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    char[]  c  =  Character.toCHARs(Character.charCount(consumed  -  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	120	None	add
131	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  char[]  c  =  Character.toChars(Character.charCount(consumed  -  2));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  char[]  c  =  Character.toChars(Character.charCount(consumed  -  2));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    char[]  c  =  Character.toChars(Character.charCount(consumed  -  2));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	120	None	add
132	[BUG]  [BUGGY]  int  pos  =  input.length()  +  consumed;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  =  input.length()  +  consumed;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  input.length()  +  consumed;	  int    pos    =    input.length()    +    len;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	91	None	replace
133	[BUG]  [BUGGY]  int  pos  =  input.length()  *  len;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  =  input.length()  *  len;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  input.length()  *  len;	  int    pos    =    input.length()    +    len;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	91	None	replace
134	[BUG]  [BUGGY]  out.write( "000 ");  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "000 ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "000 ");	  out.write(   "u000   ");    	non-compiled	[CE]  cannot  find  symbol  c	118	None	replace
135	[BUG]  [BUGGY]  out.write( "0000 ");  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "0000 ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "0000 ");	  out.write(   "u000   ");    	non-compiled	[CE]  cannot  find  symbol  c	118	None	replace
136	[BUG]  [BUGGY]  out.write( "00000 ");  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "00000 ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "00000 ");	  out.write(   "u000   ");    	non-compiled	[CE]  cannot  find  symbol  c	118	None	replace
137	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  out.write('n');  }	          out.write('n');    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	70	None	replace
138	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  c  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write('n');    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	70	None	replace
139	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	          out.write('n');    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	70	None	replace
140	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consume,  pos));  [CE]  cannot  find  symbol  consume  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consume,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consume,  pos));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(output,    pos));    	non-compiled	[CE]  cannot  find  symbol  consume	107	None	replace
141	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      [FE]    junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   ",n     ");  out.write( "n   ");  out.write( ",n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   ",n       ");    out.write( "n   ");  out.write( ",n ");	  	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n        	37	13	add
142	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   ",n     ");  out.write( "n   ");  out.write( ",n ");  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      [FE]    junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   ",n     ");  out.write( "n   ");  out.write( ",n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   ",n       ");    out.write( "n   ");  out.write( ",n ");	  	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n        	37	13	add
143	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.charCount(consumed));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Char[]  c  =  Character.toChars(Character.charCount(consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.charCount(consumed));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    Char[]    c    =    Character.toChars(Character.charCount(consumed));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
144	[BUG]  [BUGGY]  Character[]  c  =  Character.toChars(Character.charCount(consumed));  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Character[]  c  =  Character.toChars(Character.charCount(consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Character[]  c  =  Character.toChars(Character.charCount(consumed));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    Char[]    c    =    Character.toChars(Character.charCount(consumed));    	non-compiled	[CE]  incompatible  types	7	None	replace
145	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  Character.UTF8);  [CE]  cannot  find  symbol  UTF8  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  Character.UTF8);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed),  Character.UTF8);	  char[]    c    =    Character.toChars(Character.charCount(consumed));    Char[]    c    =    Character.toChars(Character.charCount(consumed));    	non-compiled	[CE]  cannot  find  symbol  UTF8	7	None	replace
146	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos),  out);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos),  out);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pos),  out);	  pos    +=    Character.charCount(Character.codePointAt(consumed,    pos),    out);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	86	None	replace
147	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos),  len);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pos),  len);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pos),  len);	  pos    +=    Character.charCount(Character.codePointAt(consumed,    pos),    out);    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	86	None	replace
148	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  consumed);  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  consumed);	  pos    +=    Character.charCount(Character.codePointAt(consumed,    pos),    out);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	86	None	replace
149	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  p);  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  p);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  p);	  pos    +=    Character.charCount(Character.codePointAt(consumed,    pos),    out);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	86	None	replace
150	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(pos  +  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    	compilable	  [FE]  ComparisonFailure  	29	13	replace
151	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos  +  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    	compilable	  [FE]  ComparisonFailure  	29	13	replace
152	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1),  pos);  [CE]  no  suitable  method  found  for  toChars(int,int)  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1),  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed  +  1),  pos);	  char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,int)	29	None	replace
153	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  *  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(consumed  *  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    	compilable	  [FE]  ComparisonFailure  	29	13	replace
154	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  *  1));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  *  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed  *  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed    +    1));    	compilable	  [FE]  ComparisonFailure  	29	13	replace
155	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len),  pos);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len),  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len),  pos);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input),    pos);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)	108	None	replace
156	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len),  input);  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len),  input);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  len),  input);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input),    pos);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	108	None	replace
157	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  len);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  len);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  len);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input),    pos);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	108	None	replace
158	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,int,int,int)  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,int,int)	2	None	replace
159	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos));  [CE]  no  suitable  method  found  for  codePointAt(int,int,int)  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,int)	2	None	replace
160	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len,  consumed));  [CE]  no  suitable  method  found  for  codePointAt(int,int,int)  [FE]                        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len,  consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  len,  consumed));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,int)	2	None	replace
161	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write( "n   ");  out.write( ",n ");  }  [CE]  cannot  find  symbol  c  [FE]    junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write( "n   ");  out.write( ",n ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write( "n   ");  out.write( ",n ");  }	          out.write(       "n       ");    out.write(   ",n       ");    	non-compiled	[CE]  cannot  find  symbol  c	38	None	replace
162	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write( "n   ");  out.write( ",n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  c  [FE]      junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write( "n   ");  out.write( ",n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write( "n   ");  out.write( ",n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write(       "n       ");    out.write(   ",n       ");    	non-compiled	[CE]  cannot  find  symbol  c	38	None	replace
163	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write( "null ");  out.write( ",null ");  }  [CE]  cannot  find  symbol  c  [FE]        junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write( "null ");  out.write( ",null ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write( "null ");  out.write( ",null ");  }	          out.write(       "n       ");    out.write(   ",n       ");    	non-compiled	[CE]  cannot  find  symbol  c	38	None	replace
164	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pt));  [CE]  cannot  find  symbol  pt  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  pt));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  pt));	  pos    +=    Character.charCount(Character.codePointAt(input,    supplied));    	non-compiled	[CE]  cannot  find  symbol  pt	59	None	replace
165	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  parsed));  [CE]  cannot  find  symbol  parsed  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  parsed));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  parsed));	  pos    +=    Character.charCount(Character.codePointAt(input,    quoted));    	non-compiled	[CE]  cannot  find  symbol  parsed	127	None	replace
166	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	13	add
167	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	13	add
168	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
169	[BUG]  [BUGGY]  timeout  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	timeout	20	1	add
170	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  timeout  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	timeout	20	1	add
171	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CharCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CharCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.CharCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
172	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  ';'  expected	20	None	add
173	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  pos),  consumed);  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  pos),  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.toChars(input,  pos),  consumed);	  pos    +=    Character.charCount(Character.toChars(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	63	None	replace
174	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  pos,  consumed));  [CE]  no  suitable  method  found  for  toChars(CharSequence,int,int)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  pos,  consumed));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.toChars(input,  pos,  consumed));	  pos    +=    Character.charCount(Character.toChars(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int,int)	63	None	replace
175	[BUG]  [BUGGY]  pos  =  input.length()  +  consumed;  [CE]  cannot  find  symbol  c  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  input.length()  +  consumed;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.length()  +  consumed;	  pos    =    input.length()    +    len;    	non-compiled	[CE]  cannot  find  symbol  c	94	None	replace
176	[BUG]  [BUGGY]  pos  =  input.length()  +  pos;  [CE]  cannot  find  symbol  c  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  input.length()  +  pos;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.length()  +  pos;	  pos    =    input.length()    +    len;    	non-compiled	[CE]  cannot  find  symbol  c	94	None	replace
177	[BUG]  [BUGGY]  out.write(Character.toChars(consumed  +  1));  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(consumed  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(consumed  +  1));	  out.write(Character.toChars(consumed));    	non-compiled	[CE]  cannot  find  symbol  c	102	None	replace
178	[BUG]  [BUGGY]  out.write(Character.toChars(consumed)+  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(consumed)+  1);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(consumed)+  1);	  out.write(Character.toChars(consumed));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	102	None	replace
179	[BUG]  [BUGGY]  out.write(Character.toChars(pos));  [CE]  cannot  find  symbol  c  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(pos));	  out.write(Character.toChars(consumed));    	non-compiled	[CE]  cannot  find  symbol  c	102	None	replace
180	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( "n   ");  out.write( ".n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   ".n       ");    out.write( "n   ");  out.write( ".n ");	  	compilable	  [FE]  ComparisonFailure  	35	13	add
181	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( "n   ");  out.write( ".n ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( "n   ");  out.write( ".n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   ".n       ");    out.write( "n   ");  out.write( ".n ");	  	compilable	  [FE]  ComparisonFailure  	35	13	add
182	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n    .n      [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( ",n   ");  out.write( ".n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   ".n       ");    out.write( ",n   ");  out.write( ".n ");	  	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      .n        	35	13	add
183	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( ",n   ");  out.write( ".n ");  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n    .n      [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( ",n   ");  out.write( ".n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   ".n       ");    out.write( ",n   ");  out.write( ".n ");	  	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      .n        	35	13	add
184	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    =    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));	  timeout    	compilable	timeout	24	1	add
185	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  timeout  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    =    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));	  timeout    	compilable	timeout	24	1	add
186	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    =    Character.charCount(Character.codePointAt(input,    pos));    int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
187	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    =    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.CHARCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
188	[BUG]  [BUGGY]  timeout  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    =    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));	  timeout    	compilable	timeout	24	1	add
189	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  timeout  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    =    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));	  timeout    	compilable	timeout	24	1	add
190	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CharCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.CharCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    =    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.CharCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
191	[BUG]  [BUGGY]  out.write('n');  c  =  Character.toChars(Character.codePointAt(pos,  len));  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  c  =  Character.toChars(Character.codePointAt(pos,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  c  =  Character.toChars(Character.codePointAt(pos,  len));	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  c	71	None	replace
192	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	71	None	replace
193	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").charAt(0);  [CE]  void  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ").charAt(0);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ").charAt(0);	  out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  void  cannot  be  dereferenced	56	None	replace
194	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  input.charAt(0));  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS "  +  input.charAt(0));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS "  +  input.charAt(0));	  out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  cannot  find  symbol  c	56	None	replace
195	[BUG]  [BUGGY]  pos  +=  in.length()  -  1;  [CE]  cannot  find  symbol  in  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  in.length()  -  1;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  in.length()  -  1;	  pos    +=    input.length()    -    1;    	non-compiled	[CE]  cannot  find  symbol  in	126	None	replace
196	[BUG]  [BUGGY]  pos  +=  len.length()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  len.length()  -  1;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  len.length()  -  1;	  pos    +=    input.length()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	126	None	replace
197	[BUG]  [BUGGY]  char[]  c  =  Character.toCHARs(Character.charCount(consumed));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toCHARs(Character.charCount(consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toCHARs(Character.charCount(consumed));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    char[]    c    =    Character.toCHARs(Character.charCount(consumed));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
198	[BUG]  [BUGGY]  char[]  c  =  Character.toCHARs(Character.charCount(consumed)+  1);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toCHARs(Character.charCount(consumed)+  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toCHARs(Character.charCount(consumed)+  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed));    char[]    c    =    Character.toCHARs(Character.charCount(consumed));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
199	[BUG]  [BUGGY]  char[]  c  =  Character.toCHARs(Character.charCount(consumed),  pos);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toCHARs(Character.charCount(consumed),  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toCHARs(Character.charCount(consumed),  pos);	  char[]    c    =    Character.toChars(Character.charCount(consumed));    char[]    c    =    Character.toCHARs(Character.charCount(consumed));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
200	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,Writer,int)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input,    out));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,Writer,int)	111	None	replace
201	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  out));  [CE]  no  suitable  method  found  for  codePointAt(int,int,Writer)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  out));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  out));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input,    out));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,Writer)	111	None	replace
202	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  out));  [CE]  no  suitable  method  found  for  codePointAt(CharSequence,int,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  out));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  out));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input,    out));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(CharSequence,int,Writer)	111	None	replace
203	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  out.write('n');  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write('n');        out.write('n');    out.write('n');  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	69	13	add
204	[BUG]  [BUGGY]          out.write('n');    out.write('n');  out.write('n');  out.write('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  out.write('n');  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    out.write('n');  out.write('n');	  	compilable	  [FE]  ComparisonFailure  	69	13	add
205	[BUG]  [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	69	None	add
206	[BUG]  [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	69	None	add
207	[BUG]  [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	69	None	add
208	[BUG]  [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c);  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]            ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write(c);	  	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	69	None	add
209	[BUG]  [BUGGY]  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  output.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  output.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  cannot  find  symbol  output	44	None	replace
210	[BUG]  [BUGGY]  pos  =  out.length();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  out.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  out.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
211	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos),  consumed);  [CE]  no  suitable  method  found  for  toChars(int,int)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos),  consumed);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos),  consumed);	  char[]    c    =    Character.toChars(Character.charCount(consumed),    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,int)	32	None	replace
212	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  pos  +  1);  [CE]  no  suitable  method  found  for  toChars(int,int)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  pos  +  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed),  pos  +  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed),    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,int)	32	None	replace
213	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  consumed);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  consumed);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  consumed);	  char[]    c    =    Character.toChars(Character.charCount(consumed),    pos);    	non-compiled	[CE]  ')'  expected	32	None	replace
214	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos),  summary);  [CE]  cannot  find  symbol  summary  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos),  summary);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos),  summary);	  char[]    c    =    Character.toChars(Character.charCount(consumed),    pos);    	non-compiled	[CE]  cannot  find  symbol  summary	32	None	replace
215	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len),  out);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len),  out);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len),  out);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input),    out);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)	109	None	replace
216	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  out);  [CE]  no  suitable  method  found  for  toChars(int,Writer)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  out);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  out);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input),    out);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,Writer)	109	None	replace
217	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consumed));  [CE]  no  suitable  method  found  for  codePointAt(CharSequence,int,int)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consumed));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(CharSequence,int,int)	103	None	replace
218	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consumed,  len));  [CE]  no  suitable  method  found  for  codePointAt(CharSequence,int,int,int)  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consumed,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consumed,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(CharSequence,int,int,int)	103	None	replace
219	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consume,  input,  pos,  len));  [CE]  cannot  find  symbol  consume  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(consume,  input,  pos,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(consume,  input,  pos,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos,    len));    	non-compiled	[CE]  cannot  find  symbol  consume	103	None	replace
220	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input  +  1));  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input  +  1));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	113	None	replace
221	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1,  consumed));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1,  consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1,  consumed));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	113	None	replace
222	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  consumed);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  consumed);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  consumed);	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	113	None	replace
223	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1,  consumed);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1,  consumed);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1,  consumed);	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  ')'  expected	113	None	replace
224	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  input.charAt(pos));  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS "  +  input.charAt(pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS "  +  input.charAt(pos));	  out.write(   ".s.IFJDCS   ".charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  c	55	None	replace
225	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").charAt(pos);  [CE]  void  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ").charAt(pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ").charAt(pos);	  out.write(   ".s.IFJDCS   ".charAt(pos));    	non-compiled	[CE]  void  cannot  be  dereferenced	55	None	replace
226	[BUG]  [BUGGY]  out.write(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.codePointAt(input,  pos));	  out.write(Character.codePointAt(pos,    input));    	non-compiled	[CE]  cannot  find  symbol  c	51	None	replace
227	[BUG]  [BUGGY]  out.write(Character.codePointAt(pos,  consumed));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.codePointAt(pos,  consumed));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.codePointAt(pos,  consumed));	  out.write(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	51	None	replace
228	[BUG]  [BUGGY]  out.write(Character.codePointAt(pos,  pos));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.codePointAt(pos,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.codePointAt(pos,  pos));	  out.write(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	51	None	replace
229	[BUG]  [BUGGY]  out.write(Character.codePointAt(pos,  input,  pos));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)  [FE]                        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.codePointAt(pos,  input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.codePointAt(pos,  input,  pos));	  out.write(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)	51	None	replace
230	[BUG]  [BUGGY]  int  pos  =  output.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  =  output.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  output.length();	  int    pos    =    input.length()    +    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	77	None	replace
231	[BUG]  [BUGGY]  out.write(Character.codePointAt(pos,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.codePointAt(pos,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.codePointAt(pos,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	50	None	replace
232	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write(c);  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write(c);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  out.write(c);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	50	None	replace
233	[BUG]  [BUGGY]  int  pos  +=  consumed.length();  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  +=  consumed.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  +=  consumed.length();	          pos    +=    input.length();    int    pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	16	None	replace
234	[BUG]  [BUGGY]  Input  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Input  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Input  pos  =  input.length();	          pos    =    input.length();    Input    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
235	[BUG]  [BUGGY]  int  pos  =  input.length();  Input  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  =  input.length();  Input  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  input.length();  Input  pos  =  input.length();	          pos    =    input.length();    Input    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	79	None	replace
236	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  [CE]  no  suitable  method  found  for  codePointAt(int,Writer)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  out));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,Writer)	1	None	replace
237	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed  +  1));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed  +  1));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	1	None	replace
238	[BUG]  [BUGGY]  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  Character.charCount(Character.codePointAt(input,  pos));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    =    Character.charCount(Character.codePointAt(input,    pos));    timeout    	non-compiled	[CE]  cannot  find  symbol  c	25	None	replace
239	[BUG]  [BUGGY]  float  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  float  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	float  pos  =  input.length();	  int    pos    =    input.length()    -    2;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	76	None	replace
240	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  input));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  input));	  pos    +=    Character.charCount(Character.codePointAt(position,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	116	None	replace
241	[BUG]  [BUGGY]  out.write('n',  pos,  consumed);  [CE]  no  suitable  method  found  for  write(char,int,int)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n',  pos,  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  pos,  consumed);	  out.write('n',    consumed);    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int,int)	39	None	replace
242	[BUG]  [BUGGY]  out.write(c,  'n',  consumed);  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(c,  'n',  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(c,  'n',  consumed);	  out.write('n',    consumed);    	non-compiled	[CE]  cannot  find  symbol  c	39	None	replace
243	[BUG]  [BUGGY]  out.write('n',  len);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n',  len);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  len);	  out.write('n',    consumed);    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	39	None	replace
244	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	41	13	add
245	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	41	13	add
246	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  int  pos  =  input.length();  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    =    input.length();    pos  =  input.length();  int  pos  =  input.length();  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        =        input.length();        pos    =    input.length();    int  pos  =  input.length();  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	41	None	add
247	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  in.length();  pos  =  input.length();  [CE]  cannot  find  symbol  in  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  in.length();  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  in.length();  pos  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol  in	41	None	add
248	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  output.length();  pos  =  input.length();  [CE]  cannot  find  symbol  output  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  output.length();  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  output.length();  pos  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol  output	41	None	add
249	[BUG]  [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    =    input.length();    pos  =  input.length();  pos  =  input.length();  pos  =  output.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        =        input.length();        pos    =    input.length();    pos  =  input.length();  pos  =  output.length();	  	non-compiled	[CE]  cannot  find  symbol  output	41	None	add
250	[BUG]  [BUGGY]  out.write('n'  +  consumed);  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n'  +  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n'  +  consumed);	  out.write('n'    +    pos);    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
251	[BUG]  [BUGGY]  out.write('n'  +  pos  +  1);  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n'  +  pos  +  1);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n'  +  pos  +  1);	  out.write('n'    +    pos);    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
252	[BUG]  [BUGGY]  out.write('n'  +  input.length());  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n'  +  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n'  +  input.length());	  out.write('n'    +    pos);    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
253	[BUG]  [BUGGY]  OutputStream  out  =  this.input.getOutputStream(),  pos);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  this.input.getOutputStream(),  pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  this.input.getOutputStream(),  pos);	  OutputStream    out    =    this.input.getOutputStream();    	non-compiled	[CE]  ';'  expected	46	None	replace
254	[BUG]  [BUGGY]  out.write('n',  pos  +  1);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n',  pos  +  1);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  pos  +  1);	  out.write('n',    pos);    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	40	None	replace
255	[BUG]  [BUGGY]  out.write('n',  pos  +  1,  len);  [CE]  no  suitable  method  found  for  write(char,int,int)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n',  pos  +  1,  len);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  pos  +  1,  len);	  out.write('n',    pos);    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int,int)	40	None	replace
256	[BUG]  [BUGGY]  out.write('n',  pos  +  len);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n',  pos  +  len);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  pos  +  len);	  out.write('n',    pos);    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	40	None	replace
257	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  sumed));  out.write('n');  [CE]  cannot  find  symbol  sumed  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  sumed));  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  sumed));  out.write('n');	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  sumed	74	None	replace
258	[BUG]  [BUGGY]  char  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char  pos  =  input.length();	  int    pos    =    input.length()    -    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	75	None	replace
259	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	30	None	add
260	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  Character[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  Character[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    Character[]  c  =  Character.toChars(Character.charCount(consumed)+  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	30	None	add
261	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  char[]  c  =  Character.toCHARs(Character.charCount(consumed)+  1);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  char[]  c  =  Character.toCHARs(Character.charCount(consumed)+  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    char[]  c  =  Character.toCHARs(Character.charCount(consumed)+  1);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	30	None	add
262	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  Char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  Char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    Char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
263	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    char[]  c  =  Character.toChars(Character.charCount(consumed)+  1));	  	non-compiled	[CE]  ';'  expected	30	None	add
264	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	add
265	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  Char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  Char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    Char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));	  	non-compiled	[CE]  cannot  find  symbol	105	None	add
266	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  Character[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  Character[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    Character[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	add
267	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  String[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  String[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    String[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	add
268	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  2));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  2));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  2));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	add
269	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  0));  [CE]  cannot  find  symbol  c  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  0));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  0));	  pos    +=    Character.charCount(Character.codePointAt(consumed,    0));    	non-compiled	[CE]  cannot  find  symbol  c	54	None	replace
270	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  0,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,int,int)  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  0,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  0,  len));	  pos    +=    Character.charCount(Character.codePointAt(consumed,    0));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,int)	54	None	replace
271	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  0),  pos);  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  0),  pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  0),  pos);	  pos    +=    Character.charCount(Character.codePointAt(consumed,    0));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	54	None	replace
272	[BUG]  [BUGGY]  pos  =  input.length();  pos  =  out.length();  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  input.length();  pos  =  out.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.length();  pos  =  out.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
273	[BUG]  [BUGGY]  pos  =  out.length();  pos  =  output.length();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  out.length();  pos  =  output.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  out.length();  pos  =  output.length();	          pos    =    input.length();    pos    =    output.length();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
274	[BUG]  [BUGGY]  pos  +=  output.length();  [CE]  cannot  find  symbol  output  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  output.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  output.length();	  pos    +=    consumed.length();    	non-compiled	[CE]  cannot  find  symbol  output	11	None	replace
275	[BUG]  [BUGGY]  pos  +=  out.length();  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  out.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  out.length();	  pos    +=    consumed.length();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
276	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(output,  0));  [CE]  cannot  find  symbol  output  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(output,  0));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(output,  0));	  pos    +=    Character.charCount(Character.codePointAt(consumed,    0));    	non-compiled	[CE]  cannot  find  symbol  output	54	None	replace
277	[BUG]  [BUGGY]  out.write(Integer.toString(pos,  input));  [CE]  no  suitable  method  found  for  toString(int,CharSequence)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Integer.toString(pos,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Integer.toString(pos,  input));	  out.write(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  toString(int,CharSequence)	51	None	replace
278	[BUG]  [BUGGY]  out.write(input.charAt(pos,  len));  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(input.charAt(pos,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(input.charAt(pos,  len));	  out.write(Character.codePointAt(pos,    input));    	non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	51	None	replace
279	[BUG]  [BUGGY]  out.write(Integer.toString(pos,  len));  [CE]  cannot  find  symbol  c  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Integer.toString(pos,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Integer.toString(pos,  len));	  out.write(Character.codePointAt(pos,    input));    	non-compiled	[CE]  cannot  find  symbol  c	51	None	replace
280	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consume));  [CE]  cannot  find  symbol  consume  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consume));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  consume));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos,    len));    	non-compiled	[CE]  cannot  find  symbol  consume	103	None	replace
281	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  c	21	None	replace
282	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  Char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
283	[BUG]  [BUGGY]  out.write( "UTF-8 ");  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "UTF-8 ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "UTF-8 ");	  out.write(   "u000   ");    	non-compiled	[CE]  cannot  find  symbol  c	118	None	replace
284	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  out);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  out);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  out);	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	113	None	replace
285	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  input);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  input);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  input);	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	113	None	replace
286	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  input.length);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  input.length);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  input.length);	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	113	None	replace
287	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(output,  pos));  [CE]  cannot  find  symbol  output  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(output,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(output,  pos));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(output,    pos));    	non-compiled	[CE]  cannot  find  symbol  output	107	None	replace
288	[BUG]  [BUGGY]  pos  +=  len.length();  pos  +=  output.length();  [CE]  int  cannot  be  dereferenced  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  len.length();  pos  +=  output.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  len.length();  pos  +=  output.length();	          pos    +=    input.length();    pos    +=    output.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
289	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length();  }  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length();  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length();  }	          pos    +=    input.length();    pos    +=    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
290	[BUG]  [BUGGY]  if(consumed  <  0)  {  pos  +=  input.length();  pos  +=  input.length();  }  [CE]  cannot  find  symbol  c  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  <  0)  {  pos  +=  input.length();  pos  +=  input.length();  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  <  0)  {  pos  +=  input.length();  pos  +=  input.length();  }	          pos    +=    input.length();    pos    +=    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
291	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length();  }  else  {  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length();  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length();  }  else  {  out.write('n');  }	          pos    +=    input.length();    pos    +=    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
292	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.codePointAt(input,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(position,    input));    	compilable	  [FE]  StringIndexOutOfBoundsException  	125	13	replace
293	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  len));  [FE]  StringIndexOutOfBoundsException  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(position,    input));    	compilable	  [FE]  StringIndexOutOfBoundsException  	125	13	replace
294	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));	  Char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
295	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));	  Char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
296	[BUG]  [BUGGY]  out.write('n');  c  =  input.toChars();  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  c  =  input.toChars();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  c  =  input.toChars();	          out.write('n');    char[]    c    =    input.toChars();    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	124	None	replace
297	[BUG]  [BUGGY]  pos  =  input.indexOf(consumed);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  input.indexOf(consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.indexOf(consumed);	  pos    =    input.lastIndexOf(consumed);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
298	[BUG]  [BUGGY]  pos  =  out.lastIndexOf(consumed);  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  out.lastIndexOf(consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  out.lastIndexOf(consumed);	  pos    =    input.lastIndexOf(consumed);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
299	[BUG]  [BUGGY]  pos  =  in.length();  pos  =  input.length();  [CE]  cannot  find  symbol  in  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  in.length();  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  in.length();  pos  =  input.length();	          pos    =    input.length();    pos    =    in.length();    	non-compiled	[CE]  cannot  find  symbol  in	45	None	replace
300	[BUG]  [BUGGY]  OutputStream  out  =  this.output.getOutputStream();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  this.output.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  this.output.getOutputStream();	  OutputStream    out    =    output.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
301	[BUG]  [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.charCount(consumed));  char[]  c  =  Character.toChars(Character.charCount(consumed));  }  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.charCount(consumed));  char[]  c  =  Character.toChars(Character.charCount(consumed));  }  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  char[]  c  =  Character.toChars(Character.charCount(consumed));  char[]  c  =  Character.toChars(Character.charCount(consumed));  }	  char[]    c    =    Character.toChars(Character.charCount(consumed));    char[]    c    =    Character.toChars(Character.charCount(consumed));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	5	None	replace
302	[BUG]  [BUGGY]  out.write( "no-consumed ");  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "no-consumed ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "no-consumed ");	          out.write(       "n       ");    out.write(       "n       "));    	non-compiled	[CE]  cannot  find  symbol  c	80	None	replace
303	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  char[]  c  =  Character.toChars(Character.charCount(consumed));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  char[]  c  =  Character.toChars(Character.charCount(consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed    -    1));    char[]  c  =  Character.toChars(Character.charCount(consumed));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	120	None	add
304	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(0));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(0));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS "  +  charAt(0));	  out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
305	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	74	None	replace
306	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  out.write( " ");  }  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  out.write( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  out.write( " ");  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	74	None	replace
307	[BUG]  [BUGGY]  out.write( "[no-consumed] ");  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "[no-consumed] ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "[no-consumed] ");	          out.write(       "n       ");    out.write(   ".n       ");    	non-compiled	[CE]  cannot  find  symbol  c	36	None	replace
308	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1)+  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(consumed  +  1)+  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    	compilable	  [FE]  ComparisonFailure  	31	13	replace
309	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1)+  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1)+  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed  +  1)+  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed)+    1);    	compilable	  [FE]  ComparisonFailure  	31	13	replace
310	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  pos,  out);  [CE]  no  suitable  method  found  for  toChars(int,int,Writer)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  pos,  out);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed),  pos,  out);	  char[]    c    =    Character.toChars(Character.charCount(consumed),    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,int,Writer)	32	None	replace
311	[BUG]  [BUGGY]  OutputStream  out  =  inputDirectory.getOutputStream();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  inputDirectory.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  inputDirectory.getOutputStream();	  OutputStream    out    =    inputFile.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
312	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length());  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length());  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length());  }	          pos    +=    input.length();    pos    +=    input.length());    	non-compiled	[CE]  ';'  expected	114	None	replace
313	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length());  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length());  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  +=  input.length();  pos  +=  input.length());  }  else  {  out.write('n');  }	          pos    +=    input.length();    pos    +=    input.length());    	non-compiled	[CE]  ';'  expected	114	None	replace
314	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	43	None	replace
315	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(input);  }  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(input);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  =  input.length();  int  pos  =  input.length();  }  else  {  out.write(input);  }	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	43	None	replace
316	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    =    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
317	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }	          pos    +=    input.length();    int    pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	16	None	replace
318	[BUG]  [BUGGY]  if(consumed  <  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  <  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  <  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }	          pos    +=    input.length();    int    pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	16	None	replace
319	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }  else  {  out.write('n');  }  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  +=  input.length();  int  pos  +=  input.length();  }  else  {  out.write('n');  }	          pos    +=    input.length();    int    pos    +=    input.length();    	non-compiled	[CE]  ';'  expected	16	None	replace
320	[BUG]  [BUGGY]  pos  +=  input.length();  pos  +=  out.length();  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  input.length();  pos  +=  out.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length();  pos  +=  out.length();	          pos    +=    input.length();    pos    +=    in.length();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
321	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(pos,  consumed));  [CE]  method  charAt  in  class  String  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ".charAt(pos,  consumed));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ".charAt(pos,  consumed));	          out.write(       "n       ");    out.write('n');    	non-compiled	[CE]  method  charAt  in  class  String  cannot  be  applied  to  given  types;	82	None	replace
322	[BUG]  [BUGGY]  out.write( ", ");  [CE]  cannot  find  symbol  c  [FE]    junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ", ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ", ");	          out.write(       "n       ");    out.write(   ",n       ");    	non-compiled	[CE]  cannot  find  symbol  c	38	None	replace
323	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  cannot  find  symbol  c	73	None	replace
324	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  cannot  find  symbol  c	73	None	replace
325	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  cannot  find  symbol  c	73	None	replace
326	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  out));  [CE]  no  suitable  method  found  for  toChars(CharSequence,Writer)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  out));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.toChars(input,  out));	  pos    +=    Character.charCount(Character.toChars(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,Writer)	63	None	replace
327	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  out));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  out));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  pos,  out));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	97	None	replace
328	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos),  out);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos),  out);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  pos),  out);	  char[]    c    =    Character.toChars(Character.charCount(consumed,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	97	None	replace
329	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
330	[BUG]  [BUGGY]  if(consumed  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
331	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "n   ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   "n       ");    out.write( "n   ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
332	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "n   ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "n   ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   "n       ");    out.write( "n   ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
333	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write('n');  out.write( "n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   "n       ");    out.write('n');  out.write( "n ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
334	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write('n');  out.write( "n ");  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write('n');  out.write( "n ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   "n       ");    out.write('n');  out.write( "n ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
335	[BUG]  [BUGGY]  out.write('n',  pos,  len);  [CE]  no  suitable  method  found  for  write(char,int,int)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n',  pos,  len);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  pos,  len);	  out.write('n',    pos);    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int,int)	40	None	replace
336	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	72	None	replace
337	[BUG]  [BUGGY]  if(consumed  <  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  <  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  <  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	72	None	replace
338	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	72	None	replace
339	[BUG]  [BUGGY]  out.write(Character.toChars(consumed,  pos));  [CE]  no  suitable  method  found  for  toChars(int,int)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(consumed,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(consumed,  pos));	  out.write(Character.toChars(consumed));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,int)	102	None	replace
340	[BUG]  [BUGGY]  out.write(Character.toChars(consumed),  pos);  [CE]  no  suitable  method  found  for  write(char[],int)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(consumed),  pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(consumed),  pos);	  out.write(Character.toChars(consumed));    	non-compiled	[CE]  no  suitable  method  found  for  write(char[],int)	102	None	replace
341	[BUG]  [BUGGY]  pos  +=  Character.toChars(Character.charCount(input,  pos));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.toChars(Character.charCount(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.toChars(Character.charCount(input,  pos));	  pos    +=    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	64	None	replace
342	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  pos);  out.write(c);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  pos);  out.write(c);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  pos);  out.write(c);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	50	None	replace
343	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  out,  len);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  out,  len);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  out,  len);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input),    out);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	109	None	replace
344	[BUG]  [BUGGY]  out.write('0'  +  input.length());  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('0'  +  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('0'  +  input.length());	  out.write('0');    	non-compiled	[CE]  cannot  find  symbol  c	112	None	replace
345	[BUG]  [BUGGY]  out.write('0'  +  input.charAt(0));  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('0'  +  input.charAt(0));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('0'  +  input.charAt(0));	  out.write('0');    	non-compiled	[CE]  cannot  find  symbol  c	112	None	replace
346	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	123	None	replace
347	[BUG]  [BUGGY]  if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }  else  {  out.write( " ");  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }  else  {  out.write( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(consumed  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }  else  {  out.write( " ");  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	123	None	replace
348	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  empty));  [CE]  cannot  find  symbol  empty  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  empty));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  empty));	  pos    +=    Character.charCount(Character.codePointAt(input,    supplied));    	non-compiled	[CE]  cannot  find  symbol  empty	59	None	replace
349	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").charAt(pos));  [CE]  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ").charAt(pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ").charAt(pos));	  out.write(   ".s.IFJDCS   ".charAt(pos));    	non-compiled	[CE]  	55	None	replace
350	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  pos);  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS "  +  pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS "  +  pos);	  out.write(   ".s.IFJDCS   ".charAt(pos));    	non-compiled	[CE]  cannot  find  symbol  c	55	None	replace
351	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write('n');        out.write('n');    out.write('n');	  	compilable	  [FE]  ComparisonFailure  	69	13	add
352	[BUG]  [BUGGY]          out.write('n');    out.write('n');  out.write('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    out.write('n');	  	compilable	  [FE]  ComparisonFailure  	69	13	add
353	[BUG]  [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  input.toChars(pos);  out.write('n');  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  input.toChars(pos);  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    char[]  c  =  input.toChars(pos);  out.write('n');	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
354	[BUG]  [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  input.toChars(input);  out.write('n');  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  char[]  c  =  input.toChars(input);  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    char[]  c  =  input.toChars(input);  out.write('n');	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
355	[BUG]  [BUGGY]  out.write( "/s.IFJDCS ");  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "/s.IFJDCS ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "/s.IFJDCS ");	  out.write(   ".s.IFJDCS   ");    	non-compiled	[CE]  cannot  find  symbol  c	57	None	replace
356	[BUG]  [BUGGY]  out.write( "s.IFJDCS ");  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "s.IFJDCS ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "s.IFJDCS ");	  out.write(   ".s.IFJDCS   ");    	non-compiled	[CE]  cannot  find  symbol  c	57	None	replace
357	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len)+  1);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len)+  1);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len)+  1);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)	10	None	replace
358	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input),  pos);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input),  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input),  pos);	  char[]    c    =    Character.toChars(Character.charCount(pos,    input));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	65	None	replace
359	[BUG]  [BUGGY]  out.write('n',  pos  +  1,  consumed);  [CE]  no  suitable  method  found  for  write(char,int,int)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n',  pos  +  1,  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  pos  +  1,  consumed);	  out.write('n',    consumed);    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int,int)	39	None	replace
360	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  String  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  String  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    String  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	add
361	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  char[]  c  =  Character.toCHARs(Character.codePointAt(input,  pos  +  1));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  char[]  c  =  Character.toCHARs(Character.codePointAt(input,  pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    char[]  c  =  Character.toCHARs(Character.codePointAt(input,  pos  +  1));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	105	None	add
362	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos  +  1));  [CE]  no  suitable  method  found  for  codePointAt(int)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos  +  1));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int)	106	None	replace
363	[BUG]  [BUGGY]  pos  +=  input.length()  -  2;  [CE]  cannot  find  symbol  c  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  input.length()  -  2;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  -  2;	  pos    +=    input.length()    *    2;    	non-compiled	[CE]  cannot  find  symbol  c	99	None	replace
364	[BUG]  [BUGGY]  out.write(input.toChars());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(input.toChars());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(input.toChars());	  out.write(Character.toChars(input));    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
365	[BUG]  [BUGGY]  out.write(Integer.toString(pos,  input.length()));  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Integer.toString(pos,  input.length()));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Integer.toString(pos,  input.length()));	  out.write(Character.toChars(input));    	non-compiled	[CE]  cannot  find  symbol  c	101	None	replace
366	[BUG]  [BUGGY]  out.write(Integer.toString(pos));  [CE]  cannot  find  symbol  c  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Integer.toString(pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Integer.toString(pos));	  out.write(Character.toChars(input));    	non-compiled	[CE]  cannot  find  symbol  c	101	None	replace
367	[BUG]  [BUGGY]  out.write('n'  +  len);  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n'  +  len);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n'  +  len);	  out.write('n'    +    pos);    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
368	[BUG]  [BUGGY]  out.write('n');  pos  =  input.toChars(pos);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  pos  =  input.toChars(pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  pos  =  input.toChars(pos);	          out.write('n');    char[]    c    =    input.toChars(pos);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
369	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  contiguous));  [CE]  cannot  find  symbol  contiguous  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  contiguous));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  contiguous));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(input,    p));    	non-compiled	[CE]  cannot  find  symbol  contiguous	23	None	replace
370	[BUG]  [BUGGY]  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    int    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  ';'  expected	22	None	replace
371	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pt),  out);  [CE]  cannot  find  symbol  pt  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pt),  out);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pt),  out);	  pos    +=    Character.charCount(Character.codePointAt(consumed,    pos),    out);    	non-compiled	[CE]  cannot  find  symbol  pt	86	None	replace
372	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos)+  1);  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(input,  pos)+  1);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(input,  pos)+  1);	  out.write(Character.toChars(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	49	None	replace
373	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(output,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  output  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(output,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(output,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  cannot  find  symbol  output	20	None	add
374	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  p));  [CE]  cannot  find  symbol  p  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  p));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  p));	  	non-compiled	[CE]  cannot  find  symbol  p	20	None	add
375	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  raw));  [CE]  cannot  find  symbol  raw  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  raw));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input,  raw));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    input,    pos));    	non-compiled	[CE]  cannot  find  symbol  raw	67	None	replace
376	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  buffer));  [CE]  cannot  find  symbol  buffer  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input,  buffer));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input,  buffer));	  char[]    c    =    Character.toChars(Character.charCount(consumed,    input,    pos));    	non-compiled	[CE]  cannot  find  symbol  buffer	67	None	replace
377	[BUG]  [BUGGY]  out.write('n');  String  c  =  input.toChars(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  String  c  =  input.toChars(input,  0,  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  String  c  =  input.toChars(input,  0,  input.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
378	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  len);  [CE]  no  suitable  method  found  for  toChars(int,int)  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  len);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos),  len);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input),    pos);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,int)	108	None	replace
379	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input)+  1,  pos);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input)+  1,  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input)+  1,  pos);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input),    pos);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	108	None	replace
380	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars(input,  pos);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  char[]  c  =  input.toChars(input,  pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  char[]  c  =  input.toChars(input,  pos);	          out.write('n');    char[]    c    =    input.toChars(input);    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
381	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  input));  [CE]  no  suitable  method  found  for  codePointAt(int,Writer,CharSequence)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  input));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  input));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input,    out));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,Writer,CharSequence)	111	None	replace
382	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").toString();  [CE]  void  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ").toString();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ").toString();	  out.write(   ".s.IFJDCS   ".toString());    	non-compiled	[CE]  void  cannot  be  dereferenced	83	None	replace
383	[BUG]  [BUGGY]  if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  }	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    =    Character.charCount(Character.codePointAt(input,    pos));    timeout    	non-compiled	[CE]  cannot  find  symbol  c	25	None	replace
384	[BUG]  [BUGGY]  out.write(Character.codePointAt(pos,  input,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.codePointAt(pos,  input,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.codePointAt(pos,  input,  len));	  out.write(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)	51	None	replace
385	[BUG]  [BUGGY]  out.write(Character.toChars(Character.codePointAt(pos,  input));  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write(Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(Character.codePointAt(pos,  input));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    out.write(c);    	non-compiled	[CE]  ')'  expected	50	None	replace
386	[BUG]  [BUGGY]  out.write( "- ");  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( "- ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "- ");	          out.write(       "n       ");    out.write(   ".n       ");    	non-compiled	[CE]  cannot  find  symbol  c	36	None	replace
387	[BUG]  [BUGGY]  out.write('0').replace(pos,  consumed);  [CE]  void  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('0').replace(pos,  consumed);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('0').replace(pos,  consumed);	  out.write('0');    	non-compiled	[CE]  void  cannot  be  dereferenced	112	None	replace
388	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( "n   ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write('n');    out.write( "n   ");	  	compilable	  [FE]  ComparisonFailure  	81	13	add
389	[BUG]  [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( "n   ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write('n');  out.write( "n   ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write('n');    out.write( "n   ");	  	compilable	  [FE]  ComparisonFailure  	81	13	add
390	[BUG]  [BUGGY]  if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  c	21	None	replace
391	[BUG]  [BUGGY]  if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  out.write( " ");  }  [CE]  cannot  find  symbol  c  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  out.write( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  out.write( " ");  }	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  c	21	None	replace
392	[BUG]  [BUGGY]  OutputStream  input  =  input.toChars();  out.write('n');  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  input  =  input.toChars();  out.write('n');  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  input  =  input.toChars();  out.write('n');	          out.write('n');    char[]    c    =    input.toChars();    out.write('n');    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
393	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write('n');        out.write('n');    if(consumed  >  0)  {  out.write('n');  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	69	13	add
394	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    if(consumed  >  0)  {  out.write('n');  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	69	13	add
395	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  if(pos  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write('n');        out.write('n');    if(pos  >  0)  {  out.write('n');  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	69	13	add
396	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(pos  >  0)  {  out.write('n');  out.write('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  if(pos  >  0)  {  out.write('n');  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    if(pos  >  0)  {  out.write('n');  out.write('n');  }	  	compilable	  [FE]  ComparisonFailure  	69	13	add
397	[BUG]  [BUGGY]          out.write('n');    out.write('n');  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  out.write('[');  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write('n');    out.write('n');  if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  out.write('[');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write('n');        out.write('n');    if(consumed  >  0)  {  out.write('n');  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len  -  2;  pos++)  {  out.write('[');  }	  	non-compiled	[CE]  'else'  without  'if'	69	None	add
398	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  pos));  [CE]  no  suitable  method  found  for  codePointAt(int,Writer,int)  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  out,  pos));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input,    out));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,Writer,int)	111	None	replace
399	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "null ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   "n       ");    out.write( "null ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
400	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "null ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "null ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   "n       ");    out.write( "null ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
401	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "null ");  out.write( "null ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   "n       ");    out.write( "null ");  out.write( "null ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
402	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "null ");  out.write( "null ");  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   "n     ");  out.write( "null ");  out.write( "null ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   "n       ");    out.write( "null ");  out.write( "null ");	  	compilable	  [FE]  ComparisonFailure  	33	13	add
403	[BUG]  [BUGGY]  int  pos  +=  Character.charCount(Character.codePointAt(input,  out));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  +=  Character.charCount(Character.codePointAt(input,  out));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  +=  Character.charCount(Character.codePointAt(input,  out));	  pos    +=    Character.charCount(Character.codePointAt(consumed,    out));    	non-compiled	[CE]  ';'  expected	85	None	replace
404	[BUG]  [BUGGY]  pos  +=  input.length();  pos  +=  consumed.length();  [CE]  int  cannot  be  dereferenced  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  input.length();  pos  +=  consumed.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length();  pos  +=  consumed.length();	          pos    +=    input.length();    pos    +=    in.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	19	None	replace
405	[BUG]  [BUGGY]  pos  +=  len;  pos  +=  input.length());  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  len;  pos  +=  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  len;  pos  +=  input.length());	          pos    +=    input.length();    pos    +=    input.length());    	non-compiled	[CE]  ';'  expected	114	None	replace
406	[BUG]  [BUGGY]  pos  +=  len.length();  pos  +=  input.length());  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  len.length();  pos  +=  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  len.length();  pos  +=  input.length());	          pos    +=    input.length();    pos    +=    input.length());    	non-compiled	[CE]  ';'  expected	114	None	replace
407	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(pos  +  1));  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ".charAt(pos  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ".charAt(pos  +  1));	          out.write(       "n       ");    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	82	None	replace
408	[BUG]  [BUGGY]  OutputStream  out  =  input,  output.getOutputStream();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  input,  output.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  input,  output.getOutputStream();	  OutputStream    out    =    output.getOutputStream();    	non-compiled	[CE]  ';'  expected	48	None	replace
409	[BUG]  [BUGGY]  out.write('n');  char[]  c  =  input.toChars(pos,  0,  input.length());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  char[]  c  =  input.toChars(pos,  0,  input.length());  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  char[]  c  =  input.toChars(pos,  0,  input.length());	          out.write('n');    char[]    c    =    input.toChars(input,    0,    input.length());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
410	[BUG]  [BUGGY]  pos  =  input.lastIndexOf(consumed,  pos);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  input.lastIndexOf(consumed,  pos);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.lastIndexOf(consumed,  pos);	  pos    =    input.lastIndexOf(consumed);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
411	[BUG]  [BUGGY]  pos  =  input.lastIndexOf(consumed,  len);  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  =  input.lastIndexOf(consumed,  len);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.lastIndexOf(consumed,  len);	  pos    =    input.lastIndexOf(consumed);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
412	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,int,int)  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,int)	2	None	replace
413	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input.length  +  1));  [CE]  cannot  find  symbol  length  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input.length  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input.length  +  1));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  cannot  find  symbol  length	113	None	replace
414	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  pos);  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  pos);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1),  pos);	  char[]    c    =    Character.toChars(Character.charCount(input,    pos    +    1));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	113	None	replace
415	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  prev));  [CE]  cannot  find  symbol  prev  [FE]                      ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  prev));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  prev));	  pos    +=    Character.charCount(Character.codePointAt(input,    supplied));    	non-compiled	[CE]  cannot  find  symbol  prev	59	None	replace
416	[BUG]  [BUGGY]  OutputStream  out  =  input,  this.input.getOutputStream();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  OutputStream  out  =  input,  this.input.getOutputStream();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  input,  this.input.getOutputStream();	  OutputStream    out    =    this.input.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
417	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  cannot  find  symbol  c	73	None	replace
418	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  cannot  find  symbol  c	73	None	replace
419	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos),  provided);  [CE]  cannot  find  symbol  provided  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos),  provided);  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos),  provided);	  char[]    c    =    Character.toChars(Character.charCount(consumed),    pos);    	non-compiled	[CE]  cannot  find  symbol  provided	32	None	replace
420	[BUG]  [BUGGY]  if(pos  <  len)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  <  len)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  <  len)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	74	None	replace
421	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input.length  +  1));  [CE]  cannot  find  symbol  length  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input.length  +  1));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input.length  +  1));	  char[]    c    =    Character.toChars(Character.codePointAt(input,    pos    +    1));    	non-compiled	[CE]  cannot  find  symbol  length	106	None	replace
422	[BUG]  [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(input,  len));  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(input,  len));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.toChars(Character.codePointAt(input,  len));	  pos    +=    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	64	None	replace
423	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( "n   ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                out.write(       "n       ");        out.write(   ".n       ");    out.write( "n   ");	  	compilable	  [FE]  ComparisonFailure  	35	13	add
424	[BUG]  [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( "n   ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          out.write(     "n     ");    out.write(   ".n     ");  out.write( "n   ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                out.write(       "n       ");        out.write(   ".n       ");    out.write( "n   ");	  	compilable	  [FE]  ComparisonFailure  	35	13	add
425	[BUG]  [BUGGY]  pos  +=  input.length()  *  len;  [CE]  cannot  find  symbol  c  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  input.length()  *  len;  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  *  len;	  pos    +=    input.length()    +    len;    	non-compiled	[CE]  cannot  find  symbol  c	100	None	replace
426	[BUG]  [BUGGY]  out.write( ".IFJDCS ");  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".IFJDCS ");  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".IFJDCS ");	  out.write(   ".s.IFJDCS   ");    	non-compiled	[CE]  cannot  find  symbol  c	57	None	replace
427	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(pos,  len));	  Char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
428	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  pos));	  Char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
429	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	123	None	replace
430	[BUG]  [BUGGY]  out.write('n',  Character.toChars(Character.codePointAt(pos,  pos)));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n',  Character.toChars(Character.codePointAt(pos,  pos)));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  Character.toChars(Character.codePointAt(pos,  pos)));	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(pos,    pos));    out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	123	None	replace
431	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  0));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  0));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	13	add
432	[BUG]  [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  0));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  0));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	                pos        +=        Character.charCount(Character.codePointAt(input,        pos));        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  0));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	13	add
433	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  break;  }  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  break;  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  break;  }	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	72	None	replace
434	[BUG]  [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  }  else  {  for(int  pos  =  0;  pos  <  len;  pos++)  {	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write('n');    	non-compiled	[CE]  'else'  without  'if'	72	None	replace
435	[BUG]  [BUGGY]  int  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  Character.charCount(Character.codePointAt(input,  pos));	          pos    +=    Character.charCount(Character.codePointAt(input,    pos));    int    pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	22	None	replace
436	[BUG]  [BUGGY]  if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [CE]  cannot  find  symbol  c  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }	          pos    =    input.length();    pos    =    input.length());    	non-compiled	[CE]  cannot  find  symbol  c	119	None	replace
437	[BUG]  [BUGGY]  if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  c  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          pos    =    input.length();    pos    =    input.length());    	non-compiled	[CE]  cannot  find  symbol  c	119	None	replace
438	[BUG]  [BUGGY]  if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [CE]  cannot  find  symbol  c  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write('n');  }	          pos    =    input.length();    pos    =    input.length());    	non-compiled	[CE]  cannot  find  symbol  c	119	None	replace
439	[BUG]  [BUGGY]  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos),  out);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos),  out);  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  +=  Character.charCount(Character.codePointAt(input,  pos),  out);	  pos    +=    Character.charCount(Character.codePointAt(consumed,    pos),    out);    	non-compiled	[CE]  ';'  expected	86	None	replace
440	[BUG]  [BUGGY]  Int  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  Int  pos  =  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Int  pos  =  input.length();	          pos    =    input.length();    int    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
441	[BUG]  [BUGGY]  pos  +=  len.length();  pos  +=  input.length();  [CE]  int  cannot  be  dereferenced  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  len.length();  pos  +=  input.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  len.length();  pos  +=  input.length();	          pos    +=    input.length();    pos    +=    output.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
442	[BUG]  [BUGGY]  pos  +=  consumed.length();  pos  +=  output.length();  [CE]  int  cannot  be  dereferenced  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  consumed.length();  pos  +=  output.length();  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  consumed.length();  pos  +=  output.length();	          pos    +=    input.length();    pos    +=    output.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
443	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos,  consumed));  [CE]  no  suitable  method  found  for  codePointAt(int,int,int)  [FE]                  ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos,  consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos,  consumed));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    consumed));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,int)	1	None	replace
444	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ",  input.charAt(pos));  [CE]  no  suitable  method  found  for  write(String,char)  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write( ".s.IFJDCS ",  input.charAt(pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ",  input.charAt(pos));	  out.write(   ".s.IFJDCS   ".charAt(pos));    	non-compiled	[CE]  no  suitable  method  found  for  write(String,char)	55	None	replace
445	[BUG]  [BUGGY]  if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write( " ");  }  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write( " ");  }  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	if(pos  >  0)  {  pos  =  input.length();  pos  =  input.length();  }  else  {  out.write( " ");  }	          pos    =    input.length();    pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
446	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos,  0));  [CE]  no  suitable  method  found  for  codePointAt(int,int,int)  [FE]                    ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos,  0));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pos,  0));	  pos    +=    Character.charCount(Character.codePointAt(consumed,    0));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,int)	54	None	replace
447	[BUG]  [BUGGY]  char[]  c  =  Character.toCHARs(Character.charCount(consumed  +  1));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toCHARs(Character.charCount(consumed  +  1));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toCHARs(Character.charCount(consumed  +  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    char[]    c    =    Character.toCHARs(Character.charCount(consumed));    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
448	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  Character.toChars(Character.charCount(consumed));  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  Character.toChars(Character.charCount(consumed));  [BUGGY]      out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed),  Character.toChars(Character.charCount(consumed));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    Char[]    c    =    Character.toChars(Character.charCount(consumed));    	non-compiled	[CE]  ')'  expected	7	None	replace
449	[BUG]  [BUGGY]  out.write('n'  +  input.charAt(pos));  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n'  +  input.charAt(pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n'  +  input.charAt(pos));	  out.write('n'    +    pos);    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
450	[BUG]  [BUGGY]  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  cannot  find  symbol  c  [FE]          ComparisonFailure      [CONTEXT]      throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {      [BUGGY]  out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n');  c  =  Character.toChars(Character.codePointAt(input,  pos));	          out.write('n');    char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  c	71	None	replace
