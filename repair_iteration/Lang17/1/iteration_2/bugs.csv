bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]              ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	10	None	replace
2	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,int,int)  [FE]                ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  len));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int,int)	10	None	replace
3	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));  [CE]  cannot  find  symbol  consume  [FE]                  ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consume));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    len));    	non-compiled	[CE]  cannot  find  symbol  consume	10	None	replace
4	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumed));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    len));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
5	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  char[]  c  =  Character.toChars(Character.charCount(consumed));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  char[]  c  =  Character.toChars(Character.charCount(consumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed));    char[]  c  =  Character.toChars(Character.charCount(consumed));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	12	None	add
6	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  Character[]  c  =  Character.toChars(Character.charCount(consumed));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  Character[]  c  =  Character.toChars(Character.charCount(consumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed));    Character[]  c  =  Character.toChars(Character.charCount(consumed));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	12	None	add
7	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  Char[]  c  =  Character.toChars(Character.charCount(consumed));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  Char[]  c  =  Character.toChars(Character.charCount(consumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed));    Char[]  c  =  Character.toChars(Character.charCount(consumed));	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
8	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  char[]  c  =  Character.toCHARs(Character.charCount(consumed));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  char[]  c  =  Character.toCHARs(Character.charCount(consumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed));    char[]  c  =  Character.toCHARs(Character.charCount(consumed));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	12	None	add
9	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  String  c  =  Character.toChars(Character.charCount(consumed));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed));  String  c  =  Character.toChars(Character.charCount(consumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]    c    =    Character.toChars(Character.charCount(consumed));    String  c  =  Character.toChars(Character.charCount(consumed));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	12	None	add
10	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)	7	None	replace
11	[BUG]  [BUGGY]  pos  +=  consumed.length();  [CE]  int  cannot  be  dereferenced  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  consumed.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  consumed.length();	      pos    +=    input.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
12	[BUG]  [BUGGY]  pos  +=  len.length();  [CE]  int  cannot  be  dereferenced  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  len.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  len.length();	      pos    +=    input.length();    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
13	[BUG]  [BUGGY]  pos  +=  input.length()  +  1;  [CE]  cannot  find  symbol  c  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  input.length()  +  1;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  +  1;	      pos    +=    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
14	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        pos    +=    input.length();    pos  +=  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	13	add
15	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  input.length();  pos  +=  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    input.length();    pos  +=  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	13	add
16	[BUG]  [BUGGY]      pos  +=  input.length();  int  pos  +=  input.length();  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  input.length();  int  pos  +=  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    input.length();    int  pos  +=  input.length();	  	non-compiled	[CE]  ';'  expected	14	None	add
17	[BUG]  [BUGGY]      pos  +=  input.length();  Integer  pos  +=  input.length();  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  input.length();  Integer  pos  +=  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    input.length();    Integer  pos  +=  input.length();	  	non-compiled	[CE]  ';'  expected	14	None	add
18	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  output.length();  [CE]  cannot  find  symbol  output  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  input.length();  pos  +=  output.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    input.length();    pos  +=  output.length();	  	non-compiled	[CE]  cannot  find  symbol  output	14	None	add
19	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  in.length();  [CE]  cannot  find  symbol  in  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  input.length();  pos  +=  in.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    input.length();    pos  +=  in.length();	  	non-compiled	[CE]  cannot  find  symbol  in	14	None	add
20	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	13	add
21	[BUG]  [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	13	add
22	[BUG]  [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    int  pos  +=  Character.charCount(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  ';'  expected	3	None	add
23	[BUG]  [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  p));  [CE]  cannot  find  symbol  p  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(input,  p));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(input,  p));	  	non-compiled	[CE]  cannot  find  symbol  p	3	None	add
24	[BUG]  [BUGGY]  timeout  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	timeout	3	1	add
25	[BUG]  [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  timeout  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  =  Character.charCount(Character.codePointAt(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  =  Character.charCount(Character.codePointAt(input,  pos));	  	compilable	timeout	3	1	add
26	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  sumed));  [CE]  cannot  find  symbol  sumed  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  sumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  sumed));	  char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  cannot  find  symbol  sumed	8	None	replace
27	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  raw));  [CE]  cannot  find  symbol  raw  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  raw));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  raw));	  char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  cannot  find  symbol  raw	8	None	replace
28	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    	compilable	  [FE]  ComparisonFailure  	13	13	replace
29	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed  +  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    	compilable	  [FE]  ComparisonFailure  	13	13	replace
30	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed));    	compilable	  [FE]  ComparisonFailure  	13	13	replace
31	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed)+  1);	  char[]    c    =    Character.toChars(Character.charCount(consumed));    	compilable	  [FE]  ComparisonFailure  	13	13	replace
32	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  pos);  [CE]  no  suitable  method  found  for  toChars(int,int)  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed),  pos);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed),  pos);	  char[]    c    =    Character.toChars(Character.charCount(consumed));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(int,int)	13	None	replace
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write( "n   ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        out.write(   "n   ");    out.write( "n   ");	  	compilable	  [FE]  ComparisonFailure  	21	13	add
34	[BUG]  [BUGGY]      out.write(   "n   ");  out.write( "n   ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write( "n   ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write(   "n   ");    out.write( "n   ");	  	compilable	  [FE]  ComparisonFailure  	21	13	add
35	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write( ".n   ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        out.write(   "n   ");    out.write( ".n   ");	  	compilable	  [FE]  ComparisonFailure  	21	13	add
36	[BUG]  [BUGGY]      out.write(   "n   ");  out.write( ".n   ");  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write( ".n   ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write(   "n   ");    out.write( ".n   ");	  	compilable	  [FE]  ComparisonFailure  	21	13	add
37	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n    [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write( ",n   ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        out.write(   "n   ");    out.write( ",n   ");	  	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n    	21	13	add
38	[BUG]  [BUGGY]      out.write(   "n   ");  out.write( ",n   ");  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n    [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write( ",n   ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write(   "n   ");    out.write( ",n   ");	  	compilable	  [FE]  junit.framework.ComparisonFailure:  unescape(String)  failed:  expected  'n    	21	13	add
39	[BUG]  [BUGGY]  out.write('n',  consumed);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write('n',  consumed);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  consumed);	      out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	17	None	replace
40	[BUG]  [BUGGY]  out.write('n',  pos);  [CE]  no  suitable  method  found  for  write(char,int)  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write('n',  pos);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n',  pos);	      out.write('n');    	non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	17	None	replace
41	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  =  input.length();  pos  =  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        pos    =    input.length();    pos  =  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	19	13	add
42	[BUG]  [BUGGY]      pos  =  input.length();  pos  =  input.length();  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  =  input.length();  pos  =  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    =    input.length();    pos  =  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	19	13	add
43	[BUG]  [BUGGY]      pos  =  input.length();  int  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  =  input.length();  int  pos  =  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    =    input.length();    int  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	add
44	[BUG]  [BUGGY]      pos  =  input.length();  pos  =  output.length();  [CE]  cannot  find  symbol  output  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  =  input.length();  pos  =  output.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    =    input.length();    pos  =  output.length();	  	non-compiled	[CE]  cannot  find  symbol  output	19	None	add
45	[BUG]  [BUGGY]      pos  =  input.length();  pos  =  in.length();  [CE]  cannot  find  symbol  in  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  =  input.length();  pos  =  in.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    =    input.length();    pos  =  in.length();	  	non-compiled	[CE]  cannot  find  symbol  in	19	None	add
46	[BUG]  [BUGGY]  OutputStream  out  =  this.input.getOutputStream();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  OutputStream  out  =  this.input.getOutputStream();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  this.input.getOutputStream();	      OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
47	[BUG]  [BUGGY]  OutputStream  out  =  outputStream.getOutputStream();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  OutputStream  out  =  outputStream.getOutputStream();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  outputStream.getOutputStream();	      OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
48	[BUG]  [BUGGY]  OutputStream  out  =  output.getOutputStream();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  OutputStream  out  =  output.getOutputStream();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  output.getOutputStream();	      OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
49	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos));  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write(Character.toChars(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(input,  pos));	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	2	None	replace
50	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write(c);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write(c);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  out.write(c);	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	2	None	replace
51	[BUG]  [BUGGY]  out.write(Character.codePointAt(pos,  input));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]              ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write(Character.codePointAt(pos,  input));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.codePointAt(pos,  input));	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	2	None	replace
52	[BUG]  [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  Char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	Char[]  c  =  Character.toChars(Character.codePointAt(pos,  input));	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
53	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pt));  [CE]  cannot  find  symbol  pt  [FE]              ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pt));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pt));	      pos    +=    Character.charCount(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  cannot  find  symbol  pt	5	None	replace
54	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  0));  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  0));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  0));	      pos    +=    Character.charCount(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	5	None	replace
55	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(pos));  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write( ".s.IFJDCS ".charAt(pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ".charAt(pos));	      out.write(   "n   ");    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
56	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [CE]  cannot  find  symbol  c  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ".charAt(0));	      out.write(   "n   ");    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
57	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ");  [CE]  cannot  find  symbol  c  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write( ".s.IFJDCS ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ");	      out.write(   "n   ");    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
58	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  len));  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  len));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  len));	      pos    +=    Character.charCount(Character.codePointAt(consumed));    	non-compiled	[CE]  cannot  find  symbol  c	6	None	replace
59	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  supplied));  [CE]  cannot  find  symbol  supplied  [FE]                  ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  supplied));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  supplied));	      pos    +=    Character.charCount(Character.codePointAt(consumed));    	non-compiled	[CE]  cannot  find  symbol  supplied	6	None	replace
60	[BUG]  [BUGGY]  pos  =  input.length()  +  1;  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  =  input.length()  +  1;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.length()  +  1;	      pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
61	[BUG]  [BUGGY]  pos  =  input.length()  -  1;  [CE]  cannot  find  symbol  c  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  =  input.length()  -  1;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.length()  -  1;	      pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
62	[BUG]  [BUGGY]  pos  =  input.length()  -  2;  [CE]  cannot  find  symbol  c  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  =  input.length()  -  2;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.length()  -  2;	      pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
63	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  pos));  [CE]  no  suitable  method  found  for  toChars(CharSequence,int)  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.toChars(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.toChars(input,  pos));	      pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence,int)	4	None	replace
64	[BUG]  [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(input,  pos));  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.toChars(Character.codePointAt(input,  pos));	      pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
65	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(pos,  input));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(pos,  input));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	11	None	replace
66	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consumed));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consumed));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consumed));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	11	None	replace
67	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  input,  pos));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  input,  pos));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  input,  pos));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	11	None	replace
68	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consume));  [CE]  cannot  find  symbol  consume  [FE]              ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consume));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos,  consume));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  consume	11	None	replace
69	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        out.write('n');    out.write('n');	  	compilable	  [FE]  ComparisonFailure  	16	13	add
70	[BUG]  [BUGGY]      out.write('n');  out.write('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    out.write('n');	  	compilable	  [FE]  ComparisonFailure  	16	13	add
71	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
72	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write('n');	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
73	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  translate(CharSequence,Writer)	16	None	add
74	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write('n');  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(consumed,  pos));  out.write('n');	  	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	16	None	add
75	[BUG]  [BUGGY]  int  pos  =  input.length()  -  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  int  pos  =  input.length()  -  1;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  input.length()  -  1;	      int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	replace
76	[BUG]  [BUGGY]  int  pos  =  input.length()  -  2;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  int  pos  =  input.length()  -  2;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  input.length()  -  2;	      int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	replace
77	[BUG]  [BUGGY]  int  pos  =  input.length()  +  1;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  int  pos  =  input.length()  +  1;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  input.length()  +  1;	      int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	replace
78	[BUG]  [BUGGY]      pos  =  input.length();  Integer  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  =  input.length();  Integer  pos  =  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    =    input.length();    Integer  pos  =  input.length();	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	19	None	add
79	[BUG]  [BUGGY]      pos  =  input.length();  Input  pos  =  input.length();  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  =  input.length();  Input  pos  =  input.length();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    =    input.length();    Input  pos  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
80	[BUG]  [BUGGY]      out.write(   "n   ");  out.write(   "n   "));  [CE]  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write(   "n   "));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write(   "n   ");    out.write(   "n   "));	  	non-compiled	[CE]  	21	None	add
81	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	        out.write(   "n   ");    out.write('n');	  	compilable	  [FE]  ComparisonFailure  	21	13	add
82	[BUG]  [BUGGY]      out.write(   "n   ");  out.write('n');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write(   "n   ");  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write(   "n   ");    out.write('n');	  	compilable	  [FE]  ComparisonFailure  	21	13	add
83	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".toString());  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write( ".s.IFJDCS ".toString());  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( ".s.IFJDCS ".toString());	      out.write(   "n   ");    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
84	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  len));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos,  len));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos,  len));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	11	None	replace
85	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  out));  [CE]  no  suitable  method  found  for  codePointAt(int,Writer)  [FE]              ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  out));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  out));	      pos    +=    Character.charCount(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,Writer)	5	None	replace
86	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  out);  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]                ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  out);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(consumed,  pos),  out);	      pos    +=    Character.charCount(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	5	None	replace
87	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  input.toChars(pos);  out.write('n');  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  input.toChars(pos);  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  input.toChars(pos);  out.write('n');	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
88	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  input.toChars(input);  out.write('n');  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  input.toChars(input);  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  input.toChars(input);  out.write('n');	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
89	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  input.toChars(input,  0,  input.length());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  input.toChars(input,  0,  input.length());  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  input.toChars(input,  0,  input.length());	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
90	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  input.toChars(pos);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  input.toChars(pos);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  input.toChars(pos);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
91	[BUG]  [BUGGY]  int  pos  =  input.length()  +  len;  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  int  pos  =  input.length()  +  len;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	int  pos  =  input.length()  +  len;	      int    pos    =    input.length();    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	23	None	replace
92	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  supplied));  [CE]  cannot  find  symbol  supplied  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  supplied));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  supplied));	  char[]    c    =    Character.toChars(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  cannot  find  symbol  supplied	8	None	replace
93	[BUG]  [BUGGY]  OutputStream  out  =  inputFile.getOutputStream();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  OutputStream  out  =  inputFile.getOutputStream();  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	OutputStream  out  =  inputFile.getOutputStream();	      OutputStream    out    =    input.getOutputStream();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
94	[BUG]  [BUGGY]  pos  =  input.length()  +  len;  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  =  input.length()  +  len;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.length()  +  len;	      pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
95	[BUG]  [BUGGY]  pos  =  input.length()  +  2;  [CE]  cannot  find  symbol  c  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  =  input.length()  +  2;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.length()  +  2;	      pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
96	[BUG]  [BUGGY]  out.write('n'  +  pos);  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write('n'  +  pos);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('n'  +  pos);	      out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	17	None	replace
97	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed,  pos));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed,  pos));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	13	None	replace
98	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.toChars(input));  [CE]  no  suitable  method  found  for  toChars(CharSequence)  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.toChars(input));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.toChars(input));	      pos    +=    Character.charCount(Character.codePointAt(input,    pos));    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence)	4	None	replace
99	[BUG]  [BUGGY]  pos  +=  input.length()  *  2;  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  input.length()  *  2;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  *  2;	      pos    +=    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
100	[BUG]  [BUGGY]  pos  +=  input.length()  +  len;  [CE]  cannot  find  symbol  c  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  input.length()  +  len;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  +  len;	      pos    +=    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
101	[BUG]  [BUGGY]  out.write(Character.toChars(input));  [CE]  no  suitable  method  found  for  toChars(CharSequence)  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write(Character.toChars(input));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(input));	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  no  suitable  method  found  for  toChars(CharSequence)	2	None	replace
102	[BUG]  [BUGGY]  out.write(Character.toChars(consumed));  [CE]  cannot  find  symbol  c  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write(Character.toChars(consumed));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write(Character.toChars(consumed));	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    out.write(c);    	non-compiled	[CE]  cannot  find  symbol  c	2	None	replace
103	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  len));  [CE]  no  suitable  method  found  for  codePointAt(CharSequence,int,int)  [FE]              ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  len));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos,  len));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    len));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(CharSequence,int,int)	10	None	replace
104	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  consumed));  [CE]  cannot  find  symbol  c  [FE]                ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  consumed));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  consumed));	      pos    +=    Character.charCount(Character.codePointAt(consumed));    	non-compiled	[CE]  cannot  find  symbol  c	6	None	replace
105	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	compilable	  [FE]  StringIndexOutOfBoundsException  	1	13	replace
106	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(input,  pos  +  1));	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	compilable	  [FE]  StringIndexOutOfBoundsException  	1	13	replace
107	[BUG]  [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(output,  pos));  [CE]  cannot  find  symbol  output  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  Character.charCount(Character.codePointAt(input,  pos));  pos  +=  Character.charCount(Character.codePointAt(output,  pos));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    Character.charCount(Character.codePointAt(input,    pos));    pos  +=  Character.charCount(Character.codePointAt(output,  pos));	  	non-compiled	[CE]  cannot  find  symbol  output	3	None	add
108	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  pos);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  pos);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  pos);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	7	None	replace
109	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  out);  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  out);  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input),  out);	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence)	7	None	replace
110	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  pos));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  pos));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  pos));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,int)	7	None	replace
111	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  out));  [CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,Writer)  [FE]          ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  out));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  input,  out));	  char[]    c    =    Character.toChars(Character.codePointAt(pos,    input));    	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,CharSequence,Writer)	7	None	replace
112	[BUG]  [BUGGY]  out.write('0');  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write('0');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write('0');	      out.write('n');    	non-compiled	[CE]  cannot  find  symbol  c	17	None	replace
113	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1));  [CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(input,  pos  +  1));	  char[]    c    =    Character.toChars(Character.charCount(input,    pos));    	non-compiled	[CE]  method  charCount  in  class  Character  cannot  be  applied  to  given  types;	11	None	replace
114	[BUG]  [BUGGY]      pos  +=  input.length();  pos  +=  input.length());  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  +=  input.length();  pos  +=  input.length());  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    +=    input.length();    pos  +=  input.length());	  	non-compiled	[CE]  ';'  expected	14	None	add
115	[BUG]  [BUGGY]  pos  =  input.lastIndexOf(consumed);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  =  input.lastIndexOf(consumed);  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  =  input.lastIndexOf(consumed);	      pos    =    input.length();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
116	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(position,  input));  [CE]  cannot  find  symbol  position  [FE]              ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(position,  input));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(position,  input));	      pos    +=    Character.charCount(Character.codePointAt(consumed,    pos));    	non-compiled	[CE]  cannot  find  symbol  position	5	None	replace
117	[BUG]  [BUGGY]  out.write( "   ");  [CE]  cannot  find  symbol  c  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write( "   ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "   ");	      out.write(   "n   ");    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
118	[BUG]  [BUGGY]  out.write( "u000 ");  [CE]  cannot  find  symbol  c  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  out.write( "u000 ");  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	out.write( "u000 ");	      out.write(   "n   ");    	non-compiled	[CE]  cannot  find  symbol  c	22	None	replace
119	[BUG]  [BUGGY]      pos  =  input.length();  pos  =  input.length());  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      pos  =  input.length();  pos  =  input.length());  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        pos    =    input.length();    pos  =  input.length());	  	non-compiled	[CE]  ';'  expected	19	None	add
120	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	add	char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    	compilable	  [FE]  ComparisonFailure  	13	13	replace
121	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.charCount(consumed  -  1));	  char[]    c    =    Character.toChars(Character.charCount(consumed));    	compilable	  [FE]  ComparisonFailure  	13	13	replace
122	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumption));  [CE]  cannot  find  symbol  consumption  [FE]            ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumption));  [BUGGY]    out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(pos,  consumption));	  char[]    c    =    Character.toChars(Character.codePointAt(consume,    pos));    	non-compiled	[CE]  cannot  find  symbol  consumption	9	None	replace
123	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  [CE]  no  suitable  method  found  for  codePointAt(int,int)  [FE]    ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  Character.toChars(Character.codePointAt(pos,  pos));  out.write('n');	  	non-compiled	[CE]  no  suitable  method  found  for  codePointAt(int,int)	16	None	add
124	[BUG]  [BUGGY]      out.write('n');  char[]  c  =  input.toChars();  out.write('n');  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]      out.write('n');  char[]  c  =  input.toChars();  out.write('n');  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	        out.write('n');    char[]  c  =  input.toChars();  out.write('n');	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
125	[BUG]  [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(position,  input));  [CE]  cannot  find  symbol  position  [FE]        ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  char[]  c  =  Character.toChars(Character.codePointAt(position,  input));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	char[]  c  =  Character.toChars(Character.codePointAt(position,  input));	      char[]    c    =    Character.toChars(Character.codePointAt(input,    pos));    	non-compiled	[CE]  cannot  find  symbol  position	1	None	replace
126	[BUG]  [BUGGY]  pos  +=  input.length()  -  1;  [CE]  cannot  find  symbol  c  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  input.length()  -  1;  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  input.length()  -  1;	      pos    +=    input.length();    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
127	[BUG]  [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  quoted));  [CE]  cannot  find  symbol  quoted  [FE]                ComparisonFailure    [CONTEXT]    throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  Character.codePointCount(input,  0,  input.length());  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {    [BUGGY]  pos  +=  Character.charCount(Character.codePointAt(input,  quoted));  [BUGGY]    char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  }  else  {    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  if  (pos  <  len  -  2)  {  pos  +=  Character.charCount(Character.codePointAt(input,  pos));  }  else  {  pos++;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang17/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	0.2773500981126146	87	87	1	replace	pos  +=  Character.charCount(Character.codePointAt(input,  quoted));	      pos    +=    Character.charCount(Character.codePointAt(consumed));    	non-compiled	[CE]  cannot  find  symbol  quoted	6	None	replace
